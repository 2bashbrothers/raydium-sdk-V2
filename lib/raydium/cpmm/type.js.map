{"version":3,"sources":["../../../src/raydium/cpmm/type.ts"],"sourcesContent":["import { EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ApiCpmmConfigInfo, ApiV3PoolInfoStandardItemCpmm, ApiV3Token, CpmmKeys } from \"../../api/type\";\r\nimport { TxVersion } from \"../../common/txTool/txType\";\r\nimport { Percent } from \"../../module\";\r\nimport { ComputeBudgetConfig, GetTransferAmountFee, TxTipConfig } from \"../../raydium/type\";\r\nimport { SwapResult } from \"./curve/calculator\";\r\nimport { CpmmConfigInfoLayout, CpmmPoolInfoLayout } from \"./layout\";\r\n\r\nexport interface CreateCpmmPoolParam<T> {\r\n  poolId?: PublicKey;\r\n  programId: PublicKey;\r\n  poolFeeAccount: PublicKey;\r\n  mintA: Pick<ApiV3Token, \"address\" | \"decimals\" | \"programId\">;\r\n  mintB: Pick<ApiV3Token, \"address\" | \"decimals\" | \"programId\">;\r\n  mintAAmount: BN;\r\n  mintBAmount: BN;\r\n  startTime: BN;\r\n  feeConfig: ApiCpmmConfigInfo;\r\n\r\n  associatedOnly: boolean;\r\n  checkCreateATAOwner?: boolean;\r\n\r\n  ownerInfo: {\r\n    feePayer?: PublicKey;\r\n    useSOLBalance?: boolean; // if has WSOL mint\r\n  };\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txVersion?: T;\r\n  txTipConfig?: TxTipConfig;\r\n  feePayer?: PublicKey;\r\n}\r\n\r\nexport interface CreateCpmmPoolPermissionParam<T> {\r\n  poolId?: PublicKey;\r\n  programId: PublicKey;\r\n  poolFeeAccount: PublicKey;\r\n  mintA: Pick<ApiV3Token, \"address\" | \"decimals\" | \"programId\">;\r\n  mintB: Pick<ApiV3Token, \"address\" | \"decimals\" | \"programId\">;\r\n  mintAAmount: BN;\r\n  mintBAmount: BN;\r\n  startTime: BN;\r\n  feeConfig: ApiCpmmConfigInfo;\r\n\r\n  associatedOnly: boolean;\r\n  checkCreateATAOwner?: boolean;\r\n\r\n  ownerInfo: {\r\n    feePayer?: PublicKey;\r\n    useSOLBalance?: boolean; // if has WSOL mint\r\n  };\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txVersion?: T;\r\n  txTipConfig?: TxTipConfig;\r\n  feePayer?: PublicKey;\r\n  feeOn: FeeOn;\r\n}\r\n\r\nexport interface CreateCpmmPoolAddress {\r\n  poolId: PublicKey;\r\n  configId: PublicKey;\r\n  authority: PublicKey;\r\n  lpMint: PublicKey;\r\n  vaultA: PublicKey;\r\n  vaultB: PublicKey;\r\n  observationId: PublicKey;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  programId: PublicKey;\r\n  poolFeeAccount: PublicKey;\r\n  feeConfig: ApiCpmmConfigInfo;\r\n}\r\n\r\nexport interface AddCpmmLiquidityParams<T = TxVersion.LEGACY> {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  poolKeys?: CpmmKeys;\r\n  payer?: PublicKey;\r\n  inputAmount: BN;\r\n  baseIn: boolean;\r\n  slippage: Percent;\r\n  config?: {\r\n    bypassAssociatedCheck?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n  };\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  computeResult?: {\r\n    inputAmountFee: GetTransferAmountFee;\r\n    anotherAmount: GetTransferAmountFee;\r\n    maxAnotherAmount: GetTransferAmountFee;\r\n    liquidity: BN;\r\n  };\r\n  feePayer?: PublicKey;\r\n}\r\n\r\nexport interface WithdrawCpmmLiquidityParams<T = TxVersion.LEGACY> {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  poolKeys?: CpmmKeys;\r\n  payer?: PublicKey;\r\n  lpAmount: BN;\r\n  slippage: Percent;\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n  closeWsol?: boolean;\r\n}\r\n\r\nexport interface CpmmSwapParams<T = TxVersion.LEGACY> {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  poolKeys?: CpmmKeys;\r\n  payer?: PublicKey;\r\n  baseIn: boolean;\r\n  fixedOut?: boolean;\r\n  slippage?: number;\r\n  swapResult: Pick<SwapResult, \"inputAmount\" | \"outputAmount\">;\r\n  inputAmount: BN;\r\n\r\n  config?: {\r\n    bypassAssociatedCheck?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    associatedOnly?: boolean;\r\n  };\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n}\r\n\r\nexport interface ComputePairAmountParams {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  baseReserve: BN;\r\n  quoteReserve: BN;\r\n  amount: string | Decimal;\r\n  slippage: Percent;\r\n  epochInfo: EpochInfo;\r\n  baseIn?: boolean;\r\n}\r\n\r\nexport type CpmmParsedRpcData = ReturnType<typeof CpmmPoolInfoLayout.decode> & {\r\n  baseReserve: BN;\r\n  quoteReserve: BN;\r\n  vaultAAmount: BN;\r\n  vaultBAmount: BN;\r\n  configInfo?: ReturnType<typeof CpmmConfigInfoLayout.decode>;\r\n  poolPrice: Decimal;\r\n  programId: PublicKey;\r\n};\r\n\r\nexport type CpmmComputeData = {\r\n  id: PublicKey;\r\n  version: 7;\r\n  configInfo: ReturnType<typeof CpmmConfigInfoLayout.decode>;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  authority: PublicKey;\r\n} & Omit<CpmmParsedRpcData, \"configInfo\" | \"mintA\" | \"mintB\">;\r\n\r\nexport type CpmmLockExtInfo = {\r\n  nftMint: PublicKey;\r\n  nftAccount: PublicKey;\r\n  metadataAccount: PublicKey;\r\n  lockPda: PublicKey;\r\n  userLpVault: PublicKey;\r\n  lockLpVault: PublicKey;\r\n};\r\n\r\nexport interface LockCpmmLpParams<T = TxVersion.LEGACY> {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  poolKeys?: CpmmKeys;\r\n  lpAmount: BN;\r\n  programId?: PublicKey;\r\n  authProgram?: PublicKey;\r\n  feePayer?: PublicKey;\r\n  feeNftOwner?: PublicKey;\r\n  withMetadata?: boolean;\r\n  getEphemeralSigners?: (k: number) => any;\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n}\r\n\r\nexport interface HarvestLockCpmmLpParams<T = TxVersion.LEGACY> {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  poolKeys?: CpmmKeys;\r\n\r\n  nftMint: PublicKey;\r\n  lpFeeAmount: BN;\r\n\r\n  programId?: PublicKey;\r\n  authProgram?: PublicKey;\r\n  clmmProgram?: PublicKey;\r\n\r\n  cpmmProgram?: {\r\n    programId?: PublicKey;\r\n    authProgram?: PublicKey;\r\n  };\r\n\r\n  feePayer?: PublicKey;\r\n\r\n  withMetadata?: boolean;\r\n  getEphemeralSigners?: (k: number) => any;\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  closeWsol?: boolean;\r\n}\r\n\r\nexport interface HarvestMultiLockCpmmLpParams<T = TxVersion.LEGACY> {\r\n  lockInfo: {\r\n    poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n    poolKeys?: CpmmKeys;\r\n    nftMint: PublicKey;\r\n    lpFeeAmount: BN;\r\n  }[];\r\n\r\n  programId?: PublicKey;\r\n  authProgram?: PublicKey;\r\n  clmmProgram?: PublicKey;\r\n\r\n  cpmmProgram?: {\r\n    programId?: PublicKey;\r\n    authProgram?: PublicKey;\r\n  };\r\n\r\n  feePayer?: PublicKey;\r\n  withMetadata?: boolean;\r\n  getEphemeralSigners?: (k: number) => any;\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txVersion?: T;\r\n  closeWsol?: boolean;\r\n}\r\n\r\nexport interface CpmmLockNftBasicInfo {\r\n  name: string;\r\n  symbol: string;\r\n  description: string;\r\n  external_url: string;\r\n  collection: {\r\n    name: string;\r\n    family: string;\r\n  };\r\n  image: string;\r\n}\r\n\r\nexport interface CpmmLockNftInfo extends CpmmLockNftBasicInfo {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  positionInfo: {\r\n    percentage: number;\r\n    usdValue: number;\r\n    unclaimedFee: {\r\n      lp: number;\r\n      amountA: number;\r\n      amountB: number;\r\n      useValue: number;\r\n    };\r\n  };\r\n}\r\n\r\nexport interface CollectCreatorFees<T = TxVersion.LEGACY> {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  poolKeys?: CpmmKeys;\r\n\r\n  programId?: PublicKey;\r\n  feePayer?: PublicKey;\r\n  associatedOnly?: boolean;\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n}\r\n\r\nexport interface CollectMultiCreatorFees<T = TxVersion.LEGACY> {\r\n  poolInfoList: ApiV3PoolInfoStandardItemCpmm[];\r\n\r\n  programId?: PublicKey;\r\n  feePayer?: PublicKey;\r\n  associatedOnly?: boolean;\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n}\r\n\r\nexport enum FeeOn {\r\n  BothToken,\r\n  OnlyTokenA,\r\n  OnlyTokenB,\r\n}\r\n"],"mappings":"4ZAAA,gDA4RO,GAAK,GAAL,CAAK,GACV,8BACA,+BACA,+BAHU","names":[]}