{"version":3,"sources":["../../../src/raydium/launchpad/launchpad.ts","../../../src/common/logger.ts","../../../src/common/txTool/txTool.ts","../../../src/common/txTool/lookupTable.ts","../../../src/common/accountInfo.ts","../../../src/common/bignumber.ts","../../../src/module/amount.ts","../../../src/module/formatter.ts","../../../src/module/fraction.ts","../../../src/common/constant.ts","../../../src/raydium/token/constant.ts","../../../src/module/token.ts","../../../src/common/pubKey.ts","../../../src/module/currency.ts","../../../src/module/percent.ts","../../../src/module/price.ts","../../../src/common/lodash.ts","../../../src/common/owner.ts","../../../src/common/pda.ts","../../../src/common/txTool/txUtils.ts","../../../src/common/txTool/txType.ts","../../../src/common/programId.ts","../../../src/common/transfer.ts","../../../src/common/utility.ts","../../../src/common/fee.ts","../../../src/raydium/moduleBase.ts","../../../src/raydium/clmm/clmm.ts","../../../src/raydium/token/utils.ts","../../../src/raydium/clmm/instrument.ts","../../../src/marshmallow/index.ts","../../../src/marshmallow/buffer-layout.ts","../../../src/raydium/clmm/utils/tick.ts","../../../src/raydium/clmm/utils/constants.ts","../../../src/raydium/clmm/utils/math.ts","../../../src/raydium/clmm/utils/pda.ts","../../../src/raydium/clmm/utils/pool.ts","../../../src/raydium/clmm/utils/position.ts","../../../src/raydium/clmm/utils/tickarrayBitmap.ts","../../../src/raydium/clmm/layout.ts","../../../src/raydium/launchpad/pda.ts","../../../src/raydium/launchpad/instrument.ts","../../../src/raydium/launchpad/layout.ts","../../../src/raydium/launchpad/curve/curve.ts","../../../src/raydium/launchpad/curve/constantProductCurve.ts","../../../src/raydium/launchpad/curve/curveBase.ts","../../../src/raydium/launchpad/curve/fixedPriceCurve.ts","../../../src/raydium/launchpad/curve/linearPriceCurve.ts","../../../src/raydium/launchpad/curve/func.ts"],"sourcesContent":["import ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport {\r\n  TxVersion,\r\n  MakeTxData,\r\n  LAUNCHPAD_PROGRAM,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getATAAddress,\r\n  MakeMultiTxData,\r\n  DEVNET_PROGRAM_ID,\r\n} from \"@/common\";\r\nimport {\r\n  BuyToken,\r\n  BuyTokenExactOut,\r\n  ClaimAllPlatformFee,\r\n  ClaimCreatorFee,\r\n  ClaimMultiCreatorFee,\r\n  ClaimMultipleVaultPlatformFee,\r\n  ClaimMultiVesting,\r\n  ClaimPlatformFee,\r\n  ClaimVaultPlatformFee,\r\n  ClaimVesting,\r\n  CpmmCreatorFeeOn,\r\n  CreateLaunchPad,\r\n  CreateMultipleVesting,\r\n  CreatePlatform,\r\n  CreateVesting,\r\n  LaunchpadConfigInfo,\r\n  LaunchpadPoolInfo,\r\n  SellToken,\r\n  SellTokenExactOut,\r\n  UpdatePlatform,\r\n  Sniper\r\n} from \"./type\";\r\nimport {\r\n  getPdaCreatorFeeVaultAuth,\r\n  getPdaCreatorVault,\r\n  getPdaLaunchpadAuth,\r\n  getPdaLaunchpadPoolId,\r\n  getPdaLaunchpadVaultId,\r\n  getPdaPlatformFeeVaultAuth,\r\n  getPdaPlatformId,\r\n  getPdaPlatformVault,\r\n  getPdaVestId,\r\n} from \"./pda\";\r\nimport {\r\n  initialize,\r\n  buyExactInInstruction,\r\n  sellExactInInstruction,\r\n  createPlatformConfig,\r\n  updatePlatformConfig,\r\n  claimPlatformFee,\r\n  createVestingAccount,\r\n  claimVestedToken,\r\n  buyExactOutInstruction,\r\n  initializeWithToken2022,\r\n  sellExactOut,\r\n  claimPlatformFeeFromVault,\r\n  claimCreatorFee,\r\n  initializeV2,\r\n} from \"./instrument\";\r\nimport {\r\n  NATIVE_MINT,\r\n  TOKEN_2022_PROGRAM_ID,\r\n  TOKEN_PROGRAM_ID,\r\n  TransferFeeConfig,\r\n  createAssociatedTokenAccountIdempotentInstruction,\r\n  createSyncNativeInstruction,\r\n  getTransferFeeConfig,\r\n  unpackMint,\r\n} from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\r\nimport { getPdaMetadataKey } from \"../clmm\";\r\nimport { LaunchpadConfig, LaunchpadPool, PlatformConfig } from \"./layout\";\r\nimport { Curve, SwapInfoReturn } from \"./curve/curve\";\r\nimport Decimal from \"decimal.js\";\r\nimport { getRecentBlockHash } from \"@/common\";\r\n\r\nexport const LaunchpadPoolInitParam = {\r\n  initPriceX64: new BN(\"515752397214619\"),\r\n  supply: new BN(1_000_000_000_000_000),\r\n  totalSellA: new BN(793_100_000_000_000),\r\n  totalFundRaisingB: new BN(85_000_000_000),\r\n  totalLockedAmount: new BN(\"0\"),\r\n  cliffPeriod: new BN(\"0\"),\r\n  unlockPeriod: new BN(\"0\"),\r\n  decimals: 6,\r\n  virtualA: new BN(\"1073471847374405\"),\r\n  virtualB: new BN(\"30050573465\"),\r\n  realA: new BN(0),\r\n  realB: new BN(0),\r\n  protocolFee: new BN(0),\r\n  platformId: new PublicKey(\"4Bu96XjU84XjPDSpveTVf6LYGCkfW5FK7SNkREWcEfV4\"),\r\n  vestingSchedule: {\r\n    totalLockedAmount: new BN(0),\r\n    cliffPeriod: new BN(0),\r\n    unlockPeriod: new BN(0),\r\n    startTime: new BN(0),\r\n    totalAllocatedShare: new BN(0),\r\n  },\r\n};\r\n\r\nconst SLIPPAGE_UNIT = new BN(10000);\r\n\r\nexport interface SwapInfoReturnExt extends SwapInfoReturn {\r\n  decimalOutAmount: Decimal;\r\n  minDecimalOutAmount: Decimal;\r\n}\r\nexport default class LaunchpadModule extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async sayHello() {\r\n    console.log(\"hello\");\r\n  }\r\n\r\n  public async createLaunchpad<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    platformId = LaunchpadPoolInitParam.platformId,\r\n    mintA,\r\n    decimals = 6,\r\n    mintBDecimals = 9,\r\n    name,\r\n    symbol,\r\n    uri,\r\n    migrateType,\r\n    configId,\r\n    snipers,\r\n    configInfo: propConfigInfo,\r\n    platformFeeRate,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    buyAmount,\r\n    minMintAAmount,\r\n    slippage,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    extraSigners,\r\n\r\n    token2022,\r\n    transferFeeExtensionParams,\r\n    creatorFeeOn = CpmmCreatorFeeOn.OnlyTokenB,\r\n    ...extraConfigs\r\n  }: CreateLaunchPad<T>): Promise<{\r\n    tx: MakeMultiTxData<T, { address: LaunchpadPoolInfo & { poolId: PublicKey }; swapInfo: SwapInfoReturnExt }>,\r\n    txs: any[]\r\n  }> {\r\n    const txs: any[] = [];\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    token2022 = !!transferFeeExtensionParams;\r\n    if (token2022) migrateType = \"cpmm\";\r\n    let configInfo = propConfigInfo;\r\n    if (!configInfo && configId) {\r\n      const r = await this.scope.connection.getAccountInfo(configId);\r\n      if (r) configInfo = LaunchpadConfig.decode(r.data);\r\n    }\r\n\r\n    if (!configInfo) this.logAndCreateError(\"config not found\");\r\n    const mintB = configInfo!.mintB;\r\n    const curType = configInfo!.curveType;\r\n\r\n    // const { publicKey: configId } = getPdaLaunchpadConfigId(programId, mintB, curType, configIndex);\r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n    const { publicKey: vaultA } = getPdaLaunchpadVaultId(programId, poolId, mintA);\r\n    const { publicKey: vaultB } = getPdaLaunchpadVaultId(programId, poolId, mintB);\r\n    const { publicKey: metaId } = getPdaMetadataKey(mintA);\r\n\r\n    console.log(\r\n      `create token: ${mintA.toBase58()}, mintB: ${mintB.toBase58()}, decimals A:${decimals}/B:${mintBDecimals}, config:${configId.toBase58()}`,\r\n    );\r\n\r\n    if (symbol.length > 10) this.logAndCreateError(\"Symbol length should shorter than 11\");\r\n    if (!uri) this.logAndCreateError(\"uri should not empty\");\r\n\r\n    const supply = extraConfigs?.supply ?? LaunchpadPoolInitParam.supply;\r\n    const totalSellA = extraConfigs?.totalSellA ?? LaunchpadPoolInitParam.totalSellA;\r\n    const totalFundRaisingB = extraConfigs?.totalFundRaisingB ?? LaunchpadPoolInitParam.totalFundRaisingB;\r\n    const totalLockedAmount = extraConfigs?.totalLockedAmount ?? new BN(0);\r\n\r\n    let defaultPlatformFeeRate = platformFeeRate;\r\n    if (!platformFeeRate) {\r\n      const platformData = await this.scope.connection.getAccountInfo(platformId);\r\n      if (!platformData) this.logAndCreateError(\"platform id not found:\", platformId.toString());\r\n      defaultPlatformFeeRate = PlatformConfig.decode(platformData!.data).feeRate;\r\n    }\r\n\r\n    const curve = Curve.getCurve(configInfo!.curveType);\r\n    const initParam = curve.getInitParam({\r\n      supply,\r\n      totalFundRaising: totalFundRaisingB,\r\n      totalSell: totalSellA,\r\n      totalLockedAmount,\r\n      migrateFee: configInfo!.migrateFee,\r\n    });\r\n\r\n    const poolInfo: LaunchpadPoolInfo = {\r\n      epoch: new BN(896),\r\n      bump: 254,\r\n      status: 0,\r\n      mintDecimalsA: decimals,\r\n      mintDecimalsB: mintBDecimals,\r\n      supply,\r\n      totalSellA,\r\n      mintA: new PublicKey(mintA),\r\n      mintB,\r\n      virtualA: initParam.a,\r\n      virtualB: initParam.b,\r\n      realA: LaunchpadPoolInitParam.realA,\r\n      realB: LaunchpadPoolInitParam.realB,\r\n      migrateFee: configInfo!.migrateFee,\r\n      migrateType: migrateType === \"amm\" ? 0 : 1,\r\n      protocolFee: LaunchpadPoolInitParam.protocolFee,\r\n      platformFee: defaultPlatformFeeRate!,\r\n      platformId,\r\n      configId,\r\n      vaultA,\r\n      vaultB,\r\n      creator: this.scope.ownerPubKey,\r\n      totalFundRaisingB,\r\n      vestingSchedule: {\r\n        totalLockedAmount,\r\n        cliffPeriod: new BN(0),\r\n        unlockPeriod: new BN(0),\r\n        startTime: new BN(0),\r\n        totalAllocatedShare: new BN(0),\r\n      },\r\n      mintProgramFlag: token2022 ? 1 : 0,\r\n      cpmmCreatorFeeOn: creatorFeeOn,\r\n    };\r\n\r\n    const initCurve = Curve.getCurve(configInfo!.curveType);\r\n    const { c } = initCurve.getInitParam({\r\n      supply: poolInfo.supply,\r\n      totalFundRaising: poolInfo.totalFundRaisingB,\r\n      totalLockedAmount,\r\n      totalSell: configInfo!.curveType === 0 ? poolInfo.totalSellA : new BN(0),\r\n      migrateFee: configInfo!.migrateFee,\r\n    });\r\n\r\n    try {\r\n      Curve.checkParam({\r\n        supply: poolInfo.supply,\r\n        totalFundRaising: poolInfo.totalFundRaisingB,\r\n        totalSell: c,\r\n        totalLockedAmount,\r\n        decimals: poolInfo.mintDecimalsA,\r\n        config: configInfo!,\r\n        migrateType,\r\n      });\r\n      this.logDebug(\"check init params success\");\r\n    } catch (e: any) {\r\n      this.logAndCreateError(`check create mint params failed, ${e.message}`);\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        token2022\r\n          ? initializeWithToken2022(\r\n              programId,\r\n              feePayer ?? this.scope.ownerPubKey,\r\n              this.scope.ownerPubKey,\r\n              configId,\r\n              platformId,\r\n              authProgramId,\r\n              poolId,\r\n              mintA,\r\n              mintB,\r\n              vaultA,\r\n              vaultB,\r\n\r\n              decimals,\r\n              name,\r\n              symbol,\r\n              uri || \"https://\",\r\n\r\n              {\r\n                type:\r\n                  curType === 0\r\n                    ? \"ConstantCurve\"\r\n                    : curType === 1\r\n                    ? \"FixedCurve\"\r\n                    : curType === 2\r\n                    ? \"LinearCurve\"\r\n                    : \"ConstantCurve\",\r\n                totalSellA,\r\n                migrateType,\r\n                supply,\r\n                totalFundRaisingB,\r\n              },\r\n              totalLockedAmount,\r\n              extraConfigs?.cliffPeriod ?? new BN(0),\r\n              extraConfigs?.unlockPeriod ?? new BN(0),\r\n              creatorFeeOn,\r\n              transferFeeExtensionParams,\r\n            )\r\n          : initializeV2(\r\n              programId,\r\n              feePayer ?? this.scope.ownerPubKey,\r\n              this.scope.ownerPubKey,\r\n              configId,\r\n              platformId,\r\n              authProgramId,\r\n              poolId,\r\n              mintA,\r\n              mintB,\r\n              vaultA,\r\n              vaultB,\r\n              metaId,\r\n\r\n              decimals,\r\n              name,\r\n              symbol,\r\n              uri || \"https://\",\r\n\r\n              {\r\n                type:\r\n                  curType === 0\r\n                    ? \"ConstantCurve\"\r\n                    : curType === 1\r\n                    ? \"FixedCurve\"\r\n                    : curType === 2\r\n                    ? \"LinearCurve\"\r\n                    : \"ConstantCurve\",\r\n                totalSellA,\r\n                migrateType,\r\n                supply,\r\n                totalFundRaisingB,\r\n              },\r\n              totalLockedAmount,\r\n              extraConfigs?.cliffPeriod ?? new BN(0),\r\n              extraConfigs?.unlockPeriod ?? new BN(0),\r\n              creatorFeeOn,\r\n            ),\r\n      ],\r\n    });\r\n\r\n    const epoch = token2022 ? await this.scope.connection.getEpochInfo() : undefined;\r\n    const fee = transferFeeExtensionParams\r\n      ? {\r\n          epoch: BigInt(epoch?.epoch || 0),\r\n          maximumFee: BigInt(transferFeeExtensionParams?.maxinumFee.toString() ?? 0),\r\n          transferFeeBasisPoints: transferFeeExtensionParams?.transferFeeBasePoints ?? 0,\r\n        }\r\n      : undefined;\r\n\r\n    let swapInfo: SwapInfoReturn = {\r\n      amountA: {\r\n        amount: new BN(0),\r\n        fee: undefined,\r\n        expirationTime: undefined,\r\n      },\r\n      amountB: new BN(0),\r\n      splitFee: {\r\n        platformFee: new BN(0),\r\n        shareFee: new BN(0),\r\n        protocolFee: new BN(0),\r\n        creatorFee: new BN(0),\r\n      },\r\n    };\r\n    let splitIns;\r\n    if (extraSigners?.length) txBuilder.addInstruction({ signers: extraSigners });\r\n    if (!extraConfigs.createOnly) {\r\n      \r\n      const { builder, extInfo } = await this.buyToken({\r\n        programId,\r\n        authProgramId,\r\n        mintAProgram: token2022 ? TOKEN_2022_PROGRAM_ID : undefined,\r\n        mintA,\r\n        mintB,\r\n        poolInfo,\r\n        buyAmount,\r\n        minMintAAmount,\r\n        shareFeeRate: extraConfigs.shareFeeRate,\r\n        shareFeeReceiver: extraConfigs.shareFeeReceiver,\r\n        configInfo,\r\n        platformFeeRate: defaultPlatformFeeRate,\r\n        slippage,\r\n        associatedOnly,\r\n        checkCreateATAOwner,\r\n        skipCheckMintA: !fee,\r\n        transferFeeConfigA: fee\r\n          ? {\r\n              transferFeeConfigAuthority: authProgramId,\r\n              withdrawWithheldAuthority: authProgramId,\r\n              withheldAmount: BigInt(0),\r\n              olderTransferFee: fee,\r\n              newerTransferFee: fee,\r\n            }\r\n          : undefined,\r\n        fromCreate: true,\r\n      });\r\n\r\n      console.log(\"FEE: \", fee);\r\n      console.log(\"PREPARING SNIPER TRANSACTIONS\");\r\n      for (const sniper of snipers) {\r\n\r\n        const { builder: sniperBuilder, extInfo } = await this.buyToken({\r\n          programId,\r\n          authProgramId,\r\n          mintAProgram: token2022 ? TOKEN_2022_PROGRAM_ID : undefined,\r\n          mintA,\r\n          mintB,\r\n          poolInfo,\r\n          buyAmount: sniper.amount,\r\n          minMintAAmount,\r\n          shareFeeRate: extraConfigs.shareFeeRate,\r\n          shareFeeReceiver: extraConfigs.shareFeeReceiver,\r\n          configInfo,\r\n          platformFeeRate: defaultPlatformFeeRate,\r\n          slippage,\r\n          sniper,\r\n          associatedOnly,\r\n          checkCreateATAOwner,\r\n          skipCheckMintA: !fee,\r\n          transferFeeConfigA: fee\r\n            ? {\r\n                transferFeeConfigAuthority: authProgramId,\r\n                withdrawWithheldAuthority: authProgramId,\r\n                withheldAmount: BigInt(0),\r\n                olderTransferFee: fee,\r\n                newerTransferFee: fee,\r\n              }\r\n            : undefined,\r\n          fromCreate: true\r\n        });\r\n        txs.push({\r\n          ...sniperBuilder.AllTxData,\r\n          blockHash: this.scope.blockhashCommitment\r\n        });\r\n      }\r\n\r\n      txBuilder.addInstruction({ ...builder.AllTxData });\r\n      swapInfo = { ...extInfo };\r\n      splitIns =\r\n        (this.scope.cluster === \"devnet\" || txVersion === TxVersion.LEGACY) && extraConfigs.shareFeeReceiver\r\n          ? [builder.allInstructions[0]]\r\n          : undefined;\r\n    }\r\n\r\n    //txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    if (txVersion === TxVersion.V0) {\r\n      console.log(\"VERSION V0\");\r\n      const mintTransaction = txBuilder.sizeCheckBuildV0({\r\n        computeBudgetConfig,\r\n        swapInfo,\r\n        splitIns,\r\n        address: {\r\n          ...poolInfo,\r\n          poolId,\r\n        },\r\n      }) as Promise<\r\n        MakeMultiTxData<T, { address: LaunchpadPoolInfo & { poolId: PublicKey }; swapInfo: SwapInfoReturnExt }>\r\n      >;\r\n\r\n      return {\r\n        tx: await mintTransaction,\r\n        txs: txs\r\n      }\r\n\r\n    }\r\n      \r\n    console.log(\"VERSION PLAIN\");\r\n    const transactionMint = txBuilder.sizeCheckBuild({\r\n      computeBudgetConfig,\r\n      swapInfo,\r\n      splitIns,\r\n      address: {\r\n        ...poolInfo,\r\n        poolId,\r\n      },\r\n    }) as Promise<\r\n      MakeMultiTxData<T, { address: LaunchpadPoolInfo & { poolId: PublicKey }; swapInfo: SwapInfoReturnExt }>\r\n    >;\r\n    return {\r\n      tx: await transactionMint,\r\n      txs: txs\r\n    }\r\n  }\r\n\r\n  public async buyTokenOriginal<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    mintA,\r\n    mintAProgram = TOKEN_PROGRAM_ID,\r\n    mintB = NATIVE_MINT,\r\n    poolInfo: propPoolInfo,\r\n\r\n    configInfo: propConfigInfo,\r\n    platformFeeRate,\r\n\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    buyAmount,\r\n    minMintAAmount: propMinMintAAmount,\r\n    slippage,\r\n    sniper,\r\n    shareFeeRate = new BN(0),\r\n    shareFeeReceiver,\r\n\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    fromCreate = false,\r\n    transferFeeConfigA: propsTransferFeeConfigA,\r\n    skipCheckMintA = false,\r\n  }: BuyToken<T>): Promise<MakeTxData<T, SwapInfoReturnExt>> {\r\n    if (buyAmount.lte(new BN(0))) this.logAndCreateError(\"buy amount should gt 0:\", buyAmount.toString());\r\n\r\n    const txBuilder = sniper ? this.createSniperTxBuilder(sniper.owner, sniper.owner.publicKey) : this.createTxBuilder(feePayer);\r\n    //const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n\r\n    \r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    let transferFeeConfigA = propsTransferFeeConfigA;\r\n    if (!skipCheckMintA) {\r\n      console.log(\"!skipCheckMintA: \", skipCheckMintA);\r\n      if (!transferFeeConfigA) {\r\n        console.log(\"!transferFeeConfigA: \", transferFeeConfigA);\r\n        const mintInfo = await this.scope.connection.getAccountInfo(mintA);\r\n        if (mintInfo && mintInfo.owner.equals(TOKEN_2022_PROGRAM_ID)) {\r\n          console.log(\"TOKEN_2022_PROGRAM_ID: \", skipCheckMintA);\r\n          mintAProgram = mintInfo.owner;\r\n          const onlineData = unpackMint(mintA, mintInfo, mintAProgram);\r\n          transferFeeConfigA = getTransferFeeConfig(onlineData) || undefined;\r\n        }\r\n      } else {\r\n        console.log(\"TOKEN_2022_PROGRAM_ID: \", TOKEN_2022_PROGRAM_ID);\r\n        mintAProgram = TOKEN_2022_PROGRAM_ID;\r\n      }\r\n    }\r\n\r\n    const userTokenAccountA = this.scope.account.getAssociatedTokenAccount(mintA, mintAProgram);\r\n    let userTokenAccountB: PublicKey | null = fromCreate\r\n      ? this.scope.account.getAssociatedTokenAccount(mintB, TOKEN_PROGRAM_ID)\r\n      : null;\r\n    const mintBUseSOLBalance = mintB.equals(NATIVE_MINT);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          this.scope.ownerPubKey,\r\n          userTokenAccountA,\r\n          this.scope.ownerPubKey,\r\n          mintA,\r\n          mintAProgram,\r\n        ),\r\n        ...(fromCreate\r\n          ? [\r\n              createAssociatedTokenAccountIdempotentInstruction(\r\n                this.scope.ownerPubKey,\r\n                userTokenAccountB!,\r\n                this.scope.ownerPubKey,\r\n                mintB,\r\n                TOKEN_PROGRAM_ID,\r\n              ),\r\n              SystemProgram.transfer({\r\n                fromPubkey: this.scope.ownerPubKey,\r\n                toPubkey: userTokenAccountB!,\r\n                lamports: BigInt(buyAmount.toString()),\r\n              }),\r\n              createSyncNativeInstruction(userTokenAccountB!),\r\n            ]\r\n          : []),\r\n      ],\r\n    });\r\n\r\n    if (!fromCreate) {\r\n      const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          mint: mintB,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: mintBUseSOLBalance\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: buyAmount,\r\n              }\r\n            : undefined,\r\n          skipCloseAccount: !mintBUseSOLBalance,\r\n          notUseTokenAccount: mintBUseSOLBalance,\r\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      if (_ownerTokenAccountB) userTokenAccountB = _ownerTokenAccountB;\r\n      txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    }\r\n    if (userTokenAccountB === undefined)\r\n      this.logAndCreateError(\r\n        `cannot found mintB(${mintB.toBase58()}) token accounts`,\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccounts,\r\n      );\r\n    let poolInfo = propPoolInfo;\r\n    if (!poolInfo) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool:\", poolId.toBase58());\r\n      poolInfo = LaunchpadPool.decode(poolData!.data);\r\n    }\r\n\r\n    let configInfo = propConfigInfo;\r\n    const allData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      [configInfo ? undefined : poolInfo.configId, poolInfo.platformId]\r\n        .filter(Boolean)\r\n        .map((key) => ({ pubkey: key! })),\r\n    );\r\n    if (!configInfo) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.configId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"config not found: \", poolInfo.configId.toBase58());\r\n      configInfo = LaunchpadConfig.decode(data!.accountInfo!.data);\r\n    }\r\n    const platformData = allData.find((d) => d.pubkey.equals(poolInfo!.platformId));\r\n    if (!platformData || !platformData.accountInfo)\r\n      this.logAndCreateError(\"platform info not found: \", poolInfo.configId.toBase58());\r\n    const platformInfo = PlatformConfig.decode(platformData!.accountInfo!.data);\r\n    platformFeeRate = platformFeeRate || platformInfo.feeRate;\r\n\r\n    const calculatedAmount = Curve.buyExactIn({\r\n      poolInfo,\r\n      amountB: buyAmount,\r\n      protocolFeeRate: configInfo.tradeFeeRate,\r\n      platformFeeRate,\r\n      curveType: configInfo.curveType,\r\n      shareFeeRate,\r\n      creatorFeeRate: platformInfo.creatorFeeRate,\r\n      transferFeeConfigA,\r\n      slot: await this.scope.connection.getSlot(),\r\n    });\r\n\r\n    const decimalAmountA = new Decimal(calculatedAmount.amountA.amount.toString()).sub(\r\n      calculatedAmount.amountA.fee?.toString() ?? 0,\r\n    );\r\n\r\n    const multiplier = slippage\r\n      ? new Decimal(SLIPPAGE_UNIT.sub(slippage).toNumber() / SLIPPAGE_UNIT.toNumber()).clampedTo(0, 1)\r\n      : new Decimal(1);\r\n\r\n    const minMintAAmount =\r\n      propMinMintAAmount ??\r\n      (slippage\r\n        ? new BN(decimalAmountA.mul(multiplier).toFixed(0))\r\n        : calculatedAmount.amountA.amount.sub(calculatedAmount.amountA.fee ?? new BN(0)));\r\n\r\n    if (calculatedAmount.amountB.lt(buyAmount)) {\r\n      console.log(\r\n        `maximum ${mintA.toBase58()} amount can buy is ${calculatedAmount.amountA.toString()}, input ${mintB.toBase58()} amount: ${calculatedAmount.amountB.toString()}`,\r\n      );\r\n    }\r\n\r\n    const shareATA = shareFeeReceiver ? getATAAddress(shareFeeReceiver, mintB, TOKEN_PROGRAM_ID).publicKey : undefined;\r\n    if (shareATA) {\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(this.scope.ownerPubKey, shareATA, shareFeeReceiver!, mintB),\r\n        ],\r\n      });\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        buyExactInInstruction(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          authProgramId,\r\n          poolInfo.configId,\r\n          poolInfo.platformId,\r\n          poolId,\r\n          userTokenAccountA!,\r\n          userTokenAccountB!,\r\n          poolInfo.vaultA,\r\n          poolInfo.vaultB,\r\n          mintA,\r\n          mintB,\r\n          mintAProgram,\r\n          TOKEN_PROGRAM_ID,\r\n\r\n          getPdaPlatformVault(programId, poolInfo.platformId, mintB).publicKey,\r\n          getPdaCreatorVault(programId, poolInfo.creator, mintB).publicKey,\r\n\r\n          calculatedAmount.amountB.lt(buyAmount) ? calculatedAmount.amountB : buyAmount,\r\n          minMintAAmount,\r\n          shareFeeRate,\r\n          shareATA,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<SwapInfoReturnExt>({\r\n      txVersion,\r\n      extInfo: {\r\n        ...calculatedAmount,\r\n        decimalOutAmount: decimalAmountA,\r\n        minDecimalOutAmount: new Decimal(minMintAAmount.toString()),\r\n      },\r\n    }) as Promise<MakeTxData<T, SwapInfoReturnExt>>;\r\n  }\r\n\r\n  public async buyToken<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    mintA,\r\n    mintAProgram = TOKEN_PROGRAM_ID,\r\n    mintB = NATIVE_MINT,\r\n    poolInfo: propPoolInfo,\r\n\r\n    configInfo: propConfigInfo,\r\n    platformFeeRate,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    buyAmount,\r\n    minMintAAmount: propMinMintAAmount,\r\n    slippage,\r\n\r\n    shareFeeRate = new BN(0),\r\n    shareFeeReceiver,\r\n    sniper,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    fromCreate = false,\r\n    transferFeeConfigA: propsTransferFeeConfigA,\r\n    skipCheckMintA = false,\r\n  }: BuyToken<T>): Promise<MakeTxData<T, SwapInfoReturnExt>> {\r\n    if (buyAmount.lte(new BN(0))) this.logAndCreateError(\"buy amount should gt 0:\", buyAmount.toString());\r\n    const txBuilder = sniper ? this.createSniperTxBuilder(sniper.owner, sniper.owner.publicKey) : this.createTxBuilder(feePayer);\r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    let transferFeeConfigA = propsTransferFeeConfigA;\r\n    if (!skipCheckMintA) {\r\n      console.log(\"!skipCheckMintA: \", skipCheckMintA);\r\n      if (!transferFeeConfigA) {\r\n        console.log(\"!transferFeeConfigA: \", transferFeeConfigA);\r\n        const mintInfo = await this.scope.connection.getAccountInfo(mintA);\r\n        if (mintInfo && mintInfo.owner.equals(TOKEN_2022_PROGRAM_ID)) {\r\n          console.log(\"!mintInfo: \", mintInfo);\r\n          mintAProgram = mintInfo.owner;\r\n          const onlineData = unpackMint(mintA, mintInfo, mintAProgram);\r\n          transferFeeConfigA = getTransferFeeConfig(onlineData) || undefined;\r\n        }\r\n      } else {\r\n        console.log(\"mintAProgram: \", TOKEN_2022_PROGRAM_ID);\r\n        mintAProgram = TOKEN_2022_PROGRAM_ID;\r\n      }\r\n    }\r\n\r\n    const userTokenAccountA = sniper \r\n      ? this.scope.account.getAssociatedTokenAccountByOwner(sniper.owner.publicKey, mintA, mintAProgram) \r\n      : this.scope.account.getAssociatedTokenAccount(mintA, mintAProgram);\r\n    \r\n    let userTokenAccountB: PublicKey | null = fromCreate\r\n      ? \r\n        sniper\r\n          ? this.scope.account.getAssociatedTokenAccountByOwner(sniper.owner.publicKey, mintB, TOKEN_PROGRAM_ID) \r\n          : this.scope.account.getAssociatedTokenAccount(mintB, TOKEN_PROGRAM_ID)\r\n      : null;\r\n    const mintBUseSOLBalance = mintB.equals(NATIVE_MINT);\r\n\r\n    console.log(\"userTokenAccountA: \", userTokenAccountA);\r\n    console.log(\"userTokenAccountB: \", userTokenAccountB);\r\n\r\n    const ixs = [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          sniper?.owner.publicKey || this.scope.ownerPubKey,\r\n          userTokenAccountA,\r\n          sniper?.owner.publicKey || this.scope.ownerPubKey,\r\n          mintA,\r\n          mintAProgram,\r\n        ),\r\n        ...(fromCreate\r\n          ? [\r\n              createAssociatedTokenAccountIdempotentInstruction(\r\n                sniper?.owner.publicKey || this.scope.ownerPubKey,\r\n                userTokenAccountB!,\r\n                sniper?.owner.publicKey || this.scope.ownerPubKey,\r\n                mintB,\r\n                TOKEN_PROGRAM_ID,\r\n              ),\r\n              SystemProgram.transfer({\r\n                fromPubkey: sniper?.owner.publicKey || this.scope.ownerPubKey,\r\n                toPubkey: userTokenAccountB!,\r\n                lamports: BigInt(buyAmount.toString()),\r\n              }),\r\n              createSyncNativeInstruction(userTokenAccountB!),\r\n            ]\r\n          : []),\r\n      ];\r\n\r\n    //  const ixs = [\r\n    //     createAssociatedTokenAccountIdempotentInstruction(\r\n    //       sniper?.owner.publicKey || this.scope.ownerPubKey,\r\n    //       userTokenAccountA,\r\n    //       sniper?.owner.publicKey || this.scope.ownerPubKey,\r\n    //       mintA,\r\n    //       mintAProgram,\r\n    //     )\r\n    //   ];\r\n\r\n    \r\n\r\n    console.log(\"adding ixs: \", ixs);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: ixs\r\n    });\r\n\r\n    if (!fromCreate) {\r\n      const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          mint: mintB,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: mintBUseSOLBalance\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: buyAmount,\r\n              }\r\n            : undefined,\r\n          skipCloseAccount: !mintBUseSOLBalance,\r\n          notUseTokenAccount: mintBUseSOLBalance,\r\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      if (_ownerTokenAccountB) userTokenAccountB = _ownerTokenAccountB;\r\n      // txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    }\r\n    if (userTokenAccountB === undefined)\r\n      this.logAndCreateError(\r\n        `cannot found mintB(${mintB.toBase58()}) token accounts`,\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccounts,\r\n      );\r\n    let poolInfo = propPoolInfo;\r\n    if (!poolInfo) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool:\", poolId.toBase58());\r\n      poolInfo = LaunchpadPool.decode(poolData!.data);\r\n    }\r\n\r\n    let configInfo = propConfigInfo;\r\n    const allData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      [configInfo ? undefined : poolInfo.configId, poolInfo.platformId]\r\n        .filter(Boolean)\r\n        .map((key) => ({ pubkey: key! })),\r\n    );\r\n    if (!configInfo) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.configId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"config not found: \", poolInfo.configId.toBase58());\r\n      configInfo = LaunchpadConfig.decode(data!.accountInfo!.data);\r\n    }\r\n    const platformData = allData.find((d) => d.pubkey.equals(poolInfo!.platformId));\r\n    if (!platformData || !platformData.accountInfo)\r\n      this.logAndCreateError(\"platform info not found: \", poolInfo.configId.toBase58());\r\n    const platformInfo = PlatformConfig.decode(platformData!.accountInfo!.data);\r\n    platformFeeRate = platformFeeRate || platformInfo.feeRate;\r\n\r\n    const calculatedAmount = Curve.buyExactIn({\r\n      poolInfo,\r\n      amountB: buyAmount,\r\n      protocolFeeRate: configInfo.tradeFeeRate,\r\n      platformFeeRate,\r\n      curveType: configInfo.curveType,\r\n      shareFeeRate,\r\n      creatorFeeRate: platformInfo.creatorFeeRate,\r\n      transferFeeConfigA,\r\n      slot: await this.scope.connection.getSlot(),\r\n    });\r\n\r\n    const decimalAmountA = new Decimal(calculatedAmount.amountA.amount.toString()).sub(\r\n      calculatedAmount.amountA.fee?.toString() ?? 0,\r\n    );\r\n\r\n    const multiplier = slippage\r\n      ? new Decimal(SLIPPAGE_UNIT.sub(slippage).toNumber() / SLIPPAGE_UNIT.toNumber()).clampedTo(0, 1)\r\n      : new Decimal(1);\r\n\r\n    const minMintAAmount =\r\n      propMinMintAAmount ??\r\n      (slippage\r\n        ? new BN(decimalAmountA.mul(multiplier).toFixed(0))\r\n        : calculatedAmount.amountA.amount.sub(calculatedAmount.amountA.fee ?? new BN(0)));\r\n\r\n    if (calculatedAmount.amountB.lt(buyAmount)) {\r\n      console.log(\r\n        `maximum ${mintA.toBase58()} amount can buy is ${calculatedAmount.amountA.toString()}, input ${mintB.toBase58()} amount: ${calculatedAmount.amountB.toString()}`,\r\n      );\r\n    }\r\n\r\n    const shareATA = shareFeeReceiver ? getATAAddress(shareFeeReceiver, mintB, TOKEN_PROGRAM_ID).publicKey : undefined;\r\n    if (shareATA) {\r\n      // txBuilder.addInstruction({\r\n      //   instructions: [\r\n      //     createAssociatedTokenAccountIdempotentInstruction(sniper?.owner.publicKey || this.scope.ownerPubKey, shareATA, shareFeeReceiver!, mintB),\r\n      //   ],\r\n      // });\r\n    }\r\n\r\n    // txBuilder.addInstruction({\r\n    //   instructions: [\r\n    //     buyExactInInstruction(\r\n    //       programId,\r\n    //       sniper?.owner.publicKey || this.scope.ownerPubKey,\r\n    //       authProgramId,\r\n    //       poolInfo.configId,\r\n    //       poolInfo.platformId,\r\n    //       poolId,\r\n    //       userTokenAccountA!,\r\n    //       userTokenAccountB!,\r\n    //       poolInfo.vaultA,\r\n    //       poolInfo.vaultB,\r\n    //       mintA,\r\n    //       mintB,\r\n    //       mintAProgram,\r\n    //       TOKEN_PROGRAM_ID,\r\n\r\n    //       getPdaPlatformVault(programId, poolInfo.platformId, mintB).publicKey,\r\n    //       getPdaCreatorVault(programId, poolInfo.creator, mintB).publicKey,\r\n\r\n    //       calculatedAmount.amountB.lt(buyAmount) ? calculatedAmount.amountB : buyAmount,\r\n    //       minMintAAmount,\r\n    //       shareFeeRate,\r\n    //       shareATA,\r\n    //     ),\r\n    //   ],\r\n    // });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<SwapInfoReturnExt>({\r\n      txVersion,\r\n      extInfo: {\r\n        ...calculatedAmount,\r\n        decimalOutAmount: decimalAmountA,\r\n        minDecimalOutAmount: new Decimal(minMintAAmount.toString()),\r\n      },\r\n    }) as Promise<MakeTxData<T, SwapInfoReturnExt>>;\r\n  }\r\n\r\n  public async buyTokenExactOut<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    mintA,\r\n    mintAProgram = TOKEN_PROGRAM_ID,\r\n    mintB = NATIVE_MINT,\r\n    poolInfo: propPoolInfo,\r\n\r\n    configInfo: propConfigInfo,\r\n    transferFeeConfigA: propsTransferFeeConfigA,\r\n    platformFeeRate,\r\n\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    maxBuyAmount,\r\n    outAmount,\r\n    slippage,\r\n\r\n    shareFeeRate = new BN(0),\r\n    shareFeeReceiver,\r\n\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    skipCheckMintA = false,\r\n  }: BuyTokenExactOut<T>): Promise<MakeTxData<T, { outAmount: BN; maxSpentAmount: BN }>> {\r\n    if (outAmount.lte(new BN(0))) this.logAndCreateError(\"out amount should gt 0:\", outAmount.toString());\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    let poolInfo = propPoolInfo;\r\n    if (!poolInfo) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool:\", poolId.toBase58());\r\n      poolInfo = LaunchpadPool.decode(poolData!.data);\r\n    }\r\n\r\n    let configInfo = propConfigInfo;\r\n    const allData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      [configInfo ? undefined : poolInfo.configId, poolInfo.platformId]\r\n        .filter(Boolean)\r\n        .map((key) => ({ pubkey: key! })),\r\n    );\r\n    if (!configInfo) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.configId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"config not found: \", poolInfo.configId.toBase58());\r\n      configInfo = LaunchpadConfig.decode(data!.accountInfo!.data);\r\n    }\r\n    const platformData = allData.find((d) => d.pubkey.equals(poolInfo!.platformId));\r\n    if (!platformData || !platformData.accountInfo)\r\n      this.logAndCreateError(\"platform info not found: \", poolInfo.configId.toBase58());\r\n    const platformInfo = PlatformConfig.decode(platformData!.accountInfo!.data);\r\n    platformFeeRate = platformFeeRate || platformInfo.feeRate;\r\n\r\n    let transferFeeConfigA = propsTransferFeeConfigA;\r\n    if (!skipCheckMintA) {\r\n      if (!transferFeeConfigA) {\r\n        const mintInfo = await this.scope.connection.getAccountInfo(mintA);\r\n        if (mintInfo && mintInfo.owner.equals(TOKEN_2022_PROGRAM_ID)) {\r\n          mintAProgram = mintInfo.owner;\r\n          const onlineData = unpackMint(mintA, mintInfo, mintAProgram);\r\n          transferFeeConfigA = getTransferFeeConfig(onlineData) || undefined;\r\n        }\r\n      } else {\r\n        mintAProgram = TOKEN_2022_PROGRAM_ID;\r\n      }\r\n    }\r\n\r\n    const calculatedAmount = Curve.buyExactOut({\r\n      poolInfo,\r\n      amountA: outAmount,\r\n      protocolFeeRate: configInfo.tradeFeeRate,\r\n      platformFeeRate,\r\n      curveType: configInfo.curveType,\r\n      shareFeeRate,\r\n      creatorFeeRate: platformInfo.creatorFeeRate,\r\n      transferFeeConfigA,\r\n      slot: await this.scope.connection.getSlot(),\r\n    });\r\n\r\n    const decimalAmountB = new Decimal(calculatedAmount.amountB.toString());\r\n    const multiplier = slippage\r\n      ? new Decimal(SLIPPAGE_UNIT.add(slippage).toNumber() / SLIPPAGE_UNIT.toNumber()).clampedTo(\r\n          0,\r\n          Number.MIN_SAFE_INTEGER,\r\n        )\r\n      : new Decimal(1);\r\n\r\n    const maxAmountB =\r\n      maxBuyAmount ?? slippage ? new BN(decimalAmountB.mul(multiplier).toFixed(0)) : calculatedAmount.amountB;\r\n\r\n    const userTokenAccountA = this.scope.account.getAssociatedTokenAccount(mintA, mintAProgram);\r\n    let userTokenAccountB: PublicKey | null = null;\r\n\r\n    const mintBUseSOLBalance = mintB.equals(NATIVE_MINT);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          this.scope.ownerPubKey,\r\n          userTokenAccountA,\r\n          this.scope.ownerPubKey,\r\n          mintA,\r\n          mintAProgram,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintB,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: calculatedAmount.amountB,\r\n            }\r\n          : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) userTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    if (userTokenAccountB === undefined)\r\n      this.logAndCreateError(\r\n        `cannot found mintB(${mintB.toBase58()}) token accounts`,\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccounts,\r\n      );\r\n\r\n    const shareATA = shareFeeReceiver ? getATAAddress(shareFeeReceiver, mintB, TOKEN_PROGRAM_ID).publicKey : undefined;\r\n    if (shareATA) {\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(this.scope.ownerPubKey, shareATA, shareFeeReceiver!, mintB),\r\n        ],\r\n      });\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        buyExactOutInstruction(\r\n          programId,\r\n\r\n          this.scope.ownerPubKey,\r\n          authProgramId,\r\n          poolInfo.configId,\r\n          poolInfo.platformId,\r\n          poolId,\r\n          userTokenAccountA!,\r\n          userTokenAccountB!,\r\n          poolInfo.vaultA,\r\n          poolInfo.vaultB,\r\n          mintA,\r\n          mintB,\r\n          mintAProgram,\r\n          TOKEN_PROGRAM_ID,\r\n\r\n          getPdaPlatformVault(programId, poolInfo.platformId, mintB).publicKey,\r\n          getPdaCreatorVault(programId, poolInfo.creator, mintB).publicKey,\r\n\r\n          outAmount,\r\n          maxAmountB,\r\n          shareFeeRate,\r\n          shareATA,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{ outAmount: BN; maxSpentAmount: BN }>({\r\n      txVersion,\r\n      extInfo: {\r\n        maxSpentAmount: maxAmountB,\r\n        outAmount,\r\n      },\r\n    }) as Promise<MakeTxData<T, { outAmount: BN; maxSpentAmount: BN }>>;\r\n  }\r\n\r\n  public async sellToken<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    mintAProgram = TOKEN_PROGRAM_ID,\r\n    mintA,\r\n    mintB = NATIVE_MINT,\r\n    poolInfo: propPoolInfo,\r\n    configInfo: propConfigInfo,\r\n    platformFeeRate,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    sellAmount,\r\n    minAmountB: propMinAmountB,\r\n    slippage,\r\n\r\n    shareFeeRate = new BN(0),\r\n    shareFeeReceiver,\r\n\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    skipCheckMintA = false,\r\n  }: SellToken<T>): Promise<MakeTxData<T, { outAmount: BN }>> {\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    if (sellAmount.lte(new BN(0))) this.logAndCreateError(\"sell amount should be gt 0\");\r\n\r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n\r\n    let transferFeeConfigA: TransferFeeConfig | undefined;\r\n    if (!skipCheckMintA) {\r\n      const mintInfo = await this.scope.connection.getAccountInfo(mintA);\r\n      if (mintInfo && mintInfo.owner.equals(TOKEN_2022_PROGRAM_ID)) {\r\n        mintAProgram = mintInfo.owner;\r\n        const onlineData = unpackMint(mintA, mintInfo, mintAProgram);\r\n        transferFeeConfigA = getTransferFeeConfig(onlineData) || undefined;\r\n      }\r\n    }\r\n\r\n    let userTokenAccountA: PublicKey | null = null;\r\n    let userTokenAccountB: PublicKey | null = null;\r\n\r\n    const mintBUseSOLBalance = mintB.equals(NATIVE_MINT);\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: mintAProgram,\r\n        mint: mintA,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: undefined,\r\n        skipCloseAccount: true,\r\n        notUseTokenAccount: false,\r\n        associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) userTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    if (userTokenAccountA === undefined)\r\n      this.logAndCreateError(\"cannot found mintA token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintB,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: 0,\r\n            }\r\n          : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) userTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (userTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found mintB token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    let poolInfo = propPoolInfo;\r\n    if (!poolInfo) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool\", poolId.toBase58());\r\n      poolInfo = LaunchpadPool.decode(poolData!.data);\r\n    }\r\n    let configInfo = propConfigInfo;\r\n    const allData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      [configInfo ? undefined : poolInfo.configId, poolInfo.platformId]\r\n        .filter(Boolean)\r\n        .map((key) => ({ pubkey: key! })),\r\n    );\r\n    if (!configInfo) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.configId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"config not found: \", poolInfo.configId.toBase58());\r\n      configInfo = LaunchpadConfig.decode(data!.accountInfo!.data);\r\n    }\r\n\r\n    const platformData = allData.find((d) => d.pubkey.equals(poolInfo!.platformId));\r\n    if (!platformData || !platformData.accountInfo)\r\n      this.logAndCreateError(\"platform info not found: \", poolInfo.configId.toBase58());\r\n    const platformInfo = PlatformConfig.decode(platformData!.accountInfo!.data);\r\n    platformFeeRate = platformFeeRate || platformInfo.feeRate;\r\n\r\n    const calculatedAmount = Curve.sellExactIn({\r\n      poolInfo,\r\n      amountA: sellAmount,\r\n      protocolFeeRate: configInfo.tradeFeeRate,\r\n      platformFeeRate,\r\n      curveType: configInfo.curveType,\r\n      shareFeeRate,\r\n      creatorFeeRate: platformInfo.creatorFeeRate,\r\n      transferFeeConfigA,\r\n      slot: await this.scope.connection.getSlot(),\r\n    });\r\n\r\n    const decimalAmountB = new Decimal(calculatedAmount.amountB.toString());\r\n    const multiplier = slippage\r\n      ? new Decimal(SLIPPAGE_UNIT.sub(slippage).toNumber() / SLIPPAGE_UNIT.toNumber()).clampedTo(0, 1)\r\n      : new Decimal(1);\r\n\r\n    const minAmountB =\r\n      propMinAmountB ?? (slippage ? new BN(decimalAmountB.mul(multiplier).toFixed(0)) : calculatedAmount.amountB);\r\n\r\n    if (minAmountB.lte(new BN(0))) this.logAndCreateError(`out ${mintB.toBase58()} amount should be gt 0`);\r\n\r\n    const shareATA = shareFeeReceiver ? getATAAddress(shareFeeReceiver, mintB, TOKEN_PROGRAM_ID).publicKey : undefined;\r\n    if (shareATA) {\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(this.scope.ownerPubKey, shareATA, shareFeeReceiver!, mintB),\r\n        ],\r\n      });\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        sellExactInInstruction(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          authProgramId,\r\n          poolInfo.configId,\r\n          poolInfo.platformId,\r\n          poolId,\r\n          userTokenAccountA!,\r\n          userTokenAccountB!,\r\n          poolInfo.vaultA,\r\n          poolInfo.vaultB,\r\n          mintA,\r\n          mintB,\r\n          mintAProgram,\r\n          TOKEN_PROGRAM_ID,\r\n\r\n          getPdaPlatformVault(programId, poolInfo.platformId, mintB).publicKey,\r\n          getPdaCreatorVault(programId, poolInfo.creator, mintB).publicKey,\r\n\r\n          calculatedAmount.amountA.amount.lt(sellAmount) ? calculatedAmount.amountA.amount : sellAmount,\r\n          minAmountB,\r\n          shareFeeRate,\r\n          shareATA,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{ outAmount: BN }>({\r\n      txVersion,\r\n      extInfo: {\r\n        outAmount: minAmountB,\r\n      },\r\n    }) as Promise<MakeTxData<T, { outAmount: BN }>>;\r\n  }\r\n\r\n  public async sellTokenExactOut<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    mintAProgram = TOKEN_PROGRAM_ID,\r\n    mintA,\r\n    mintB = NATIVE_MINT,\r\n    poolInfo: propPoolInfo,\r\n    configInfo: propConfigInfo,\r\n    platformFeeRate,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n    inAmount,\r\n    maxSellAmount,\r\n    slippage,\r\n\r\n    shareFeeRate = new BN(0),\r\n    shareFeeReceiver,\r\n\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    skipCheckMintA = false,\r\n  }: SellTokenExactOut<T>): Promise<MakeTxData<T, { maxSellAmount: BN }>> {\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    if (maxSellAmount?.lte(new BN(0))) this.logAndCreateError(\"max sell amount should be gt 0\");\r\n\r\n    const { publicKey: poolId } = getPdaLaunchpadPoolId(programId, mintA, mintB);\r\n\r\n    let transferFeeConfigA: TransferFeeConfig | undefined;\r\n    if (!skipCheckMintA) {\r\n      const mintInfo = await this.scope.connection.getAccountInfo(mintA);\r\n      if (mintInfo && mintInfo.owner.equals(TOKEN_2022_PROGRAM_ID)) {\r\n        mintAProgram = mintInfo.owner;\r\n        const onlineData = unpackMint(mintA, mintInfo, mintAProgram);\r\n        transferFeeConfigA = getTransferFeeConfig(onlineData) || undefined;\r\n      }\r\n    }\r\n\r\n    let userTokenAccountA: PublicKey | null = null;\r\n    let userTokenAccountB: PublicKey | null = null;\r\n\r\n    const mintBUseSOLBalance = mintB.equals(NATIVE_MINT);\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: mintAProgram,\r\n        mint: mintA,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: undefined,\r\n        skipCloseAccount: true,\r\n        notUseTokenAccount: false,\r\n        associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) userTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    if (userTokenAccountA === undefined)\r\n      this.logAndCreateError(\"cannot found mintA token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintB,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: 0,\r\n            }\r\n          : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) userTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (userTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found mintB token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    let poolInfo = propPoolInfo;\r\n    if (!poolInfo) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool\", poolId.toBase58());\r\n      poolInfo = LaunchpadPool.decode(poolData!.data);\r\n    }\r\n\r\n    let configInfo = propConfigInfo;\r\n    const allData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      [configInfo ? undefined : poolInfo.configId, poolInfo.platformId]\r\n        .filter(Boolean)\r\n        .map((key) => ({ pubkey: key! })),\r\n    );\r\n    if (!configInfo) {\r\n      const data = allData.find((d) => d.pubkey.equals(poolInfo!.configId));\r\n      if (!data || !data.accountInfo) this.logAndCreateError(\"config not found: \", poolInfo.configId.toBase58());\r\n      configInfo = LaunchpadConfig.decode(data!.accountInfo!.data);\r\n    }\r\n\r\n    const platformData = allData.find((d) => d.pubkey.equals(poolInfo!.platformId));\r\n    if (!platformData || !platformData.accountInfo)\r\n      this.logAndCreateError(\"platform info not found: \", poolInfo.configId.toBase58());\r\n    const platformInfo = PlatformConfig.decode(platformData!.accountInfo!.data);\r\n    platformFeeRate = platformFeeRate || platformInfo.feeRate;\r\n\r\n    const calculatedAmount = Curve.sellExactOut({\r\n      poolInfo,\r\n      amountB: inAmount,\r\n      protocolFeeRate: configInfo.tradeFeeRate,\r\n      platformFeeRate,\r\n      curveType: configInfo.curveType,\r\n      shareFeeRate,\r\n      creatorFeeRate: platformInfo.creatorFeeRate,\r\n      transferFeeConfigA,\r\n      slot: await this.scope.connection.getSlot(),\r\n    });\r\n\r\n    const decimalAmountA = new Decimal(calculatedAmount.amountA.amount.toString());\r\n    const multiplier = slippage\r\n      ? new Decimal(SLIPPAGE_UNIT.add(slippage).toNumber() / SLIPPAGE_UNIT.toNumber()).clampedTo(\r\n          0,\r\n          Number.MAX_SAFE_INTEGER,\r\n        )\r\n      : new Decimal(1);\r\n\r\n    const maxSellAmountA =\r\n      maxSellAmount ?? slippage ? new BN(decimalAmountA.mul(multiplier).toFixed(0)) : calculatedAmount.amountA.amount;\r\n\r\n    const shareATA = shareFeeReceiver ? getATAAddress(shareFeeReceiver, mintB, TOKEN_PROGRAM_ID).publicKey : undefined;\r\n    if (shareATA) {\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(this.scope.ownerPubKey, shareATA, shareFeeReceiver!, mintB),\r\n        ],\r\n      });\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        sellExactOut(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          authProgramId,\r\n          poolInfo.configId,\r\n          poolInfo.platformId,\r\n          poolId,\r\n          userTokenAccountA!,\r\n          userTokenAccountB!,\r\n          poolInfo.vaultA,\r\n          poolInfo.vaultB,\r\n          mintA,\r\n          mintB,\r\n          mintAProgram,\r\n          TOKEN_PROGRAM_ID,\r\n\r\n          getPdaPlatformVault(programId, poolInfo.platformId, mintB).publicKey,\r\n          getPdaCreatorVault(programId, poolInfo.creator, mintB).publicKey,\r\n\r\n          inAmount,\r\n          maxSellAmountA,\r\n\r\n          shareFeeRate,\r\n          shareATA,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{ maxSellAmount: BN }>({\r\n      txVersion,\r\n      extInfo: {\r\n        maxSellAmount: maxSellAmountA,\r\n      },\r\n    }) as Promise<MakeTxData<T, { maxSellAmount: BN }>>;\r\n  }\r\n\r\n  public async createPlatformConfig<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    platformAdmin,\r\n    platformClaimFeeWallet,\r\n    platformLockNftWallet,\r\n    cpConfigId,\r\n    migrateCpLockNftScale,\r\n    transferFeeExtensionAuth,\r\n    creatorFeeRate,\r\n    feeRate,\r\n    name,\r\n    web,\r\n    img,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CreatePlatform<T>): Promise<MakeTxData<T, { platformId: PublicKey }>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const { publicKey: platformId } = getPdaPlatformId(programId, platformAdmin);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createPlatformConfig(\r\n          programId,\r\n          platformAdmin,\r\n          platformClaimFeeWallet,\r\n          platformLockNftWallet,\r\n          platformId,\r\n\r\n          cpConfigId,\r\n\r\n          transferFeeExtensionAuth,\r\n\r\n          migrateCpLockNftScale,\r\n\r\n          feeRate,\r\n          creatorFeeRate,\r\n          name,\r\n          web,\r\n          img,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: {\r\n        platformId,\r\n      },\r\n    }) as Promise<MakeTxData<T, { platformId: PublicKey }>>;\r\n  }\r\n\r\n  public async updatePlatformConfig<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    platformAdmin,\r\n    platformId: propsPlatformId,\r\n    updateInfo,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: UpdatePlatform<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const platformId = propsPlatformId ?? getPdaPlatformId(programId, platformAdmin).publicKey;\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [updatePlatformConfig(programId, platformAdmin, platformId, updateInfo)],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async claimPlatformFee<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    platformId,\r\n    poolId,\r\n    platformClaimFeeWallet,\r\n\r\n    mintB: propsMintB,\r\n    vaultB: propsVaultB,\r\n    mintBProgram = TOKEN_PROGRAM_ID,\r\n\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: ClaimPlatformFee<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    let mintB = propsMintB;\r\n    let vaultB = propsVaultB;\r\n\r\n    if (!mintB) {\r\n      const poolData = await this.scope.connection.getAccountInfo(poolId, { commitment: \"processed\" });\r\n      if (!poolData) this.logAndCreateError(\"cannot found pool:\", poolId.toBase58());\r\n      const poolInfo = LaunchpadPool.decode(poolData!.data);\r\n\r\n      const configData = await this.scope.connection.getAccountInfo(poolInfo.configId, { commitment: \"processed\" });\r\n      if (!configData) this.logAndCreateError(\"cannot found config:\", poolInfo.configId.toBase58());\r\n      const configInfo = LaunchpadConfig.decode(configData!.data);\r\n\r\n      mintB = configInfo.mintB;\r\n      vaultB = vaultB ?? poolInfo.vaultB;\r\n    }\r\n\r\n    if (!mintB || !vaultB) {\r\n      this.logAndCreateError(\r\n        \"cannot found mint info, mintB: \",\r\n        mintB.toBase58(),\r\n        \", vaultB: \",\r\n        vaultB?.toBase58() ?? \"\",\r\n      );\r\n    }\r\n\r\n    const userTokenAccountB = getATAAddress(this.scope.ownerPubKey, mintB, TOKEN_PROGRAM_ID).publicKey;\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          this.scope.ownerPubKey,\r\n          userTokenAccountB,\r\n          this.scope.ownerPubKey,\r\n          mintB,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        claimPlatformFee(\r\n          programId,\r\n          platformClaimFeeWallet,\r\n          authProgramId,\r\n          poolId,\r\n          platformId,\r\n          vaultB!,\r\n          userTokenAccountB!,\r\n          mintB,\r\n          mintBProgram,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async claimAllPlatformFee<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    authProgramId,\r\n    platformId,\r\n    platformClaimFeeWallet,\r\n\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: ClaimAllPlatformFee<T>): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    authProgramId = authProgramId ?? getPdaLaunchpadAuth(programId).publicKey;\r\n\r\n    const allPlatformPool = await this.scope.connection.getProgramAccounts(programId, {\r\n      filters: [\r\n        { dataSize: LaunchpadPool.span },\r\n        { memcmp: { offset: LaunchpadPool.offsetOf(\"platformId\"), bytes: platformId.toString() } },\r\n      ],\r\n    });\r\n\r\n    allPlatformPool.forEach((data) => {\r\n      const pool = LaunchpadPool.decode(data.account.data);\r\n      if (pool.platformFee.lte(new BN(0))) return;\r\n\r\n      const userTokenAccountB = getATAAddress(this.scope.ownerPubKey, pool.mintB, TOKEN_PROGRAM_ID).publicKey;\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(\r\n            this.scope.ownerPubKey,\r\n            userTokenAccountB,\r\n            this.scope.ownerPubKey,\r\n            pool.mintB,\r\n          ),\r\n        ],\r\n      });\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          claimPlatformFee(\r\n            programId,\r\n            platformClaimFeeWallet,\r\n            authProgramId!,\r\n            data.pubkey,\r\n            platformId,\r\n            pool.vaultB,\r\n            userTokenAccountB!,\r\n            pool.mintB,\r\n            TOKEN_PROGRAM_ID,\r\n          ),\r\n        ],\r\n      });\r\n    });\r\n\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n\r\n    return txBuilder.sizeCheckBuild({\r\n      computeBudgetConfig,\r\n    }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async createVesting<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    poolId,\r\n    beneficiary,\r\n    shareAmount,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CreateVesting<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const poolInfo = await this.getRpcPoolInfo({ poolId });\r\n    if (shareAmount.add(poolInfo.vestingSchedule.totalAllocatedShare).gt(poolInfo.vestingSchedule.totalLockedAmount))\r\n      this.logAndCreateError(\"share amount exceed total locked amount\");\r\n\r\n    const vestingRecord = getPdaVestId(programId, poolId, beneficiary).publicKey;\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createVestingAccount(programId, this.scope.ownerPubKey, beneficiary, poolId, vestingRecord, shareAmount),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async createMultipleVesting<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    poolId,\r\n    beneficiaryList,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n  }: CreateMultipleVesting<T>): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    if (beneficiaryList.length === 0) this.logAndCreateError(\"beneficiaryList is null\");\r\n\r\n    const poolInfo = await this.getRpcPoolInfo({ poolId });\r\n    const allShareAmount = beneficiaryList.reduce(\r\n      (acc, cur) => acc.add(cur.shareAmount),\r\n      poolInfo.vestingSchedule.totalAllocatedShare,\r\n    );\r\n\r\n    if (allShareAmount.gt(poolInfo.vestingSchedule.totalLockedAmount))\r\n      this.logAndCreateError(\"share amount exceed total locked amount\");\r\n\r\n    beneficiaryList.forEach((beneficiary) => {\r\n      const vestingRecord = getPdaVestId(programId, poolId, beneficiary.wallet).publicKey;\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createVestingAccount(\r\n            programId,\r\n            this.scope.ownerPubKey,\r\n            beneficiary.wallet,\r\n            poolId,\r\n            vestingRecord,\r\n            beneficiary.shareAmount,\r\n          ),\r\n        ],\r\n      });\r\n    });\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async claimVesting<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    poolId,\r\n    poolInfo: propsPoolInfo,\r\n    vestingRecord: propsVestingRecord,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: ClaimVesting<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const authProgramId = getPdaLaunchpadAuth(programId).publicKey;\r\n    const vestingRecord = propsVestingRecord || getPdaVestId(programId, poolId, this.scope.ownerPubKey).publicKey;\r\n\r\n    let poolInfo = propsPoolInfo;\r\n    if (!poolInfo) {\r\n      const r = await this.scope.connection.getAccountInfo(poolId);\r\n      if (!r) this.logAndCreateError(\"pool not found\");\r\n      poolInfo = LaunchpadPool.decode(r!.data);\r\n    }\r\n\r\n    const userTokenAccountA = getATAAddress(this.scope.ownerPubKey, poolInfo.mintA, TOKEN_PROGRAM_ID).publicKey;\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          this.scope.ownerPubKey,\r\n          userTokenAccountA,\r\n          this.scope.ownerPubKey,\r\n          poolInfo.mintA,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        claimVestedToken(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          authProgramId,\r\n          poolId,\r\n          vestingRecord,\r\n          userTokenAccountA!,\r\n          poolInfo.vaultA,\r\n          poolInfo.mintA,\r\n          TOKEN_PROGRAM_ID,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async claimMultiVesting<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    poolIdList,\r\n    poolsInfo: propsPoolsInfo = {},\r\n    vestingRecords = {},\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n  }: ClaimMultiVesting<T>): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let poolsInfo = { ...propsPoolsInfo };\r\n    const authProgramId = getPdaLaunchpadAuth(programId).publicKey;\r\n    const needFetchPools = poolIdList.filter((id) => !poolsInfo[id.toBase58()]);\r\n    if (needFetchPools.length) {\r\n      const fetchedPools = await this.getRpcPoolsInfo({ poolIdList: needFetchPools });\r\n      poolsInfo = {\r\n        ...poolsInfo,\r\n        ...fetchedPools.poolInfoMap,\r\n      };\r\n    }\r\n\r\n    poolIdList.forEach((poolId) => {\r\n      const poolIdStr = poolId.toBase58();\r\n      const poolInfo = poolsInfo[poolIdStr];\r\n      if (!poolInfo) this.logAndCreateError(`pool info not found: ${poolIdStr}`);\r\n      const vestingRecord =\r\n        vestingRecords[poolIdStr] || getPdaVestId(programId, poolId, this.scope.ownerPubKey).publicKey;\r\n      const userTokenAccountA = getATAAddress(this.scope.ownerPubKey, poolInfo.mintA, TOKEN_PROGRAM_ID).publicKey;\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(\r\n            this.scope.ownerPubKey,\r\n            userTokenAccountA,\r\n            this.scope.ownerPubKey,\r\n            poolInfo.mintA,\r\n          ),\r\n        ],\r\n      });\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          claimVestedToken(\r\n            programId,\r\n            this.scope.ownerPubKey,\r\n            authProgramId,\r\n            poolId,\r\n            vestingRecord,\r\n            userTokenAccountA!,\r\n            poolInfo.vaultA,\r\n            poolInfo.mintA,\r\n            TOKEN_PROGRAM_ID,\r\n          ),\r\n        ],\r\n      });\r\n    });\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async claimVaultPlatformFee<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    platformId,\r\n    mintB,\r\n    mintBProgram = TOKEN_PROGRAM_ID,\r\n    claimFeeWallet,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: ClaimVaultPlatformFee<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const platformFeeVault = getPdaPlatformVault(programId, platformId, mintB).publicKey;\r\n    const platformFeeAuth = getPdaPlatformFeeVaultAuth(programId).publicKey;\r\n\r\n    const userTokenAccount = this.scope.account.getAssociatedTokenAccount(mintB, mintBProgram);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          this.scope.ownerPubKey,\r\n          userTokenAccount,\r\n          this.scope.ownerPubKey,\r\n          mintB,\r\n          mintBProgram,\r\n        ),\r\n        claimPlatformFeeFromVault(\r\n          programId,\r\n          platformId,\r\n          claimFeeWallet ?? this.scope.ownerPubKey,\r\n          platformFeeAuth,\r\n          platformFeeVault,\r\n          userTokenAccount,\r\n          mintB,\r\n          mintBProgram,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async claimMultipleVaultPlatformFee<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    platformList,\r\n    unwrapSol = true,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n  }: ClaimMultipleVaultPlatformFee<T>): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    // const platformFeeVault = getPdaPlatformVault(programId, platformId, mintB).publicKey;\r\n\r\n    const tokenAccountRecord: Record<string, PublicKey> = {};\r\n\r\n    platformList.forEach(async (platform) => {\r\n      const platformFeeAuth = getPdaPlatformFeeVaultAuth(programId).publicKey;\r\n      const platformFeeVault = getPdaPlatformVault(programId, platform.id, platform.mintB).publicKey;\r\n      const useSolBalance = platform.mintB.equals(NATIVE_MINT) && unwrapSol;\r\n      let userTokenAccount: PublicKey | undefined = tokenAccountRecord[platform.mintB.toBase58()];\r\n\r\n      if (!userTokenAccount) {\r\n        const { account: _userTokenAccount, instructionParams: _tokenAccountInstruction } =\r\n          await this.scope.account.getOrCreateTokenAccount({\r\n            mint: platform.mintB,\r\n            owner: this.scope.ownerPubKey,\r\n            createInfo: useSolBalance\r\n              ? {\r\n                  payer: this.scope.ownerPubKey!,\r\n                  amount: 0,\r\n                }\r\n              : undefined,\r\n            skipCloseAccount: !useSolBalance,\r\n            notUseTokenAccount: useSolBalance,\r\n            associatedOnly: useSolBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n        if (_userTokenAccount) userTokenAccount = _userTokenAccount;\r\n        txBuilder.addInstruction(_tokenAccountInstruction || {});\r\n        if (userTokenAccount === undefined)\r\n          this.logAndCreateError(\r\n            `cannot found platform ${platform.id.toBase58()} mintB(${platform.mintB.toBase58()}) token accounts`,\r\n            \"tokenAccounts\",\r\n            this.scope.account.tokenAccounts,\r\n          );\r\n      }\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          claimPlatformFeeFromVault(\r\n            programId,\r\n            platform.id,\r\n            platform.claimFeeWallet ?? this.scope.ownerPubKey,\r\n            platformFeeVault,\r\n            platformFeeAuth,\r\n            userTokenAccount!,\r\n            platform.mintB,\r\n            platform.mintBProgram ?? TOKEN_PROGRAM_ID,\r\n          ),\r\n        ],\r\n      });\r\n    });\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async claimCreatorFee<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    mintB,\r\n    mintBProgram = TOKEN_PROGRAM_ID,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: ClaimCreatorFee<T>): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const creatorFeeVault = getPdaCreatorVault(programId, this.scope.ownerPubKey, mintB).publicKey;\r\n    const creatorFeeVaultAuth = getPdaCreatorFeeVaultAuth(programId).publicKey;\r\n    const userTokenAccount = this.scope.account.getAssociatedTokenAccount(mintB, mintBProgram);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        createAssociatedTokenAccountIdempotentInstruction(\r\n          this.scope.ownerPubKey,\r\n          userTokenAccount,\r\n          this.scope.ownerPubKey,\r\n          mintB,\r\n          mintBProgram,\r\n        ),\r\n        claimCreatorFee(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          creatorFeeVaultAuth,\r\n          creatorFeeVault,\r\n          userTokenAccount!,\r\n          mintB,\r\n          mintBProgram,\r\n        ),\r\n      ],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData>;\r\n  }\r\n\r\n  public async claimMultipleCreatorFee<T extends TxVersion>({\r\n    programId = LAUNCHPAD_PROGRAM,\r\n    mintBList,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n  }: ClaimMultiCreatorFee<T>): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    mintBList.forEach((mint) => {\r\n      const mintB = mint.pubKey;\r\n      const mintBProgram = mint.programId ?? TOKEN_PROGRAM_ID;\r\n      const creatorFeeVault = getPdaCreatorVault(programId, this.scope.ownerPubKey, mintB).publicKey;\r\n      const creatorFeeVaultAuth = getPdaCreatorFeeVaultAuth(programId).publicKey;\r\n      const userTokenAccount = this.scope.account.getAssociatedTokenAccount(mintB, mintBProgram);\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          createAssociatedTokenAccountIdempotentInstruction(\r\n            this.scope.ownerPubKey,\r\n            userTokenAccount,\r\n            this.scope.ownerPubKey,\r\n            mintB,\r\n            mintBProgram,\r\n          ),\r\n          claimCreatorFee(\r\n            programId,\r\n            this.scope.ownerPubKey,\r\n            creatorFeeVaultAuth,\r\n            creatorFeeVault,\r\n            userTokenAccount!,\r\n            mintB,\r\n            mintBProgram,\r\n          ),\r\n        ],\r\n      });\r\n    });\r\n\r\n    if (txVersion == TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async getRpcPoolInfo({\r\n    poolId,\r\n  }: {\r\n    poolId: PublicKey;\r\n  }): Promise<LaunchpadPoolInfo & { configInfo: LaunchpadConfigInfo }> {\r\n    const data = await this.getRpcPoolsInfo({ poolIdList: [poolId] });\r\n\r\n    return data.poolInfoMap[poolId.toBase58()];\r\n  }\r\n\r\n  public async getRpcPoolsInfo({\r\n    poolIdList,\r\n    config,\r\n  }: {\r\n    poolIdList: PublicKey[];\r\n    config?: { batchRequest?: boolean; chunkCount?: number };\r\n  }): Promise<{\r\n    poolInfoMap: Record<\r\n      string,\r\n      LaunchpadPoolInfo & {\r\n        poolId: PublicKey;\r\n        configInfo: LaunchpadConfigInfo;\r\n      }\r\n    >;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIdList.map((i) => ({ pubkey: i })),\r\n      config,\r\n    );\r\n\r\n    const poolInfoMap: { [poolId: string]: LaunchpadPoolInfo & { poolId: PublicKey } } = {};\r\n    const configKeys: PublicKey[] = [];\r\n\r\n    for (let i = 0; i < poolIdList.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + poolIdList[i].toBase58());\r\n      const poolInfo = LaunchpadPool.decode(item.accountInfo.data);\r\n      poolInfoMap[poolIdList[i].toBase58()] = {\r\n        ...poolInfo,\r\n        poolId: item.accountInfo.owner,\r\n      };\r\n      configKeys.push(poolInfo.configId);\r\n    }\r\n\r\n    const configAccounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      configKeys.map((i) => ({ pubkey: i })),\r\n      config,\r\n    );\r\n\r\n    const configInfoMap: { [poolId: string]: LaunchpadConfigInfo & { configId: PublicKey } } = {};\r\n\r\n    for (let i = 0; i < configKeys.length; i++) {\r\n      const item = configAccounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch config info error: \" + configKeys[i].toBase58());\r\n      const configInfo = LaunchpadConfig.decode(item.accountInfo.data);\r\n      configInfoMap[configKeys[i].toBase58()] = {\r\n        ...configInfo,\r\n        configId: item.accountInfo.owner,\r\n      };\r\n    }\r\n\r\n    return {\r\n      poolInfoMap: Object.keys(poolInfoMap).reduce(\r\n        (acc, cur) => ({\r\n          ...acc,\r\n          [cur]: {\r\n            ...poolInfoMap[cur],\r\n            configInfo: configInfoMap[poolInfoMap[cur].configId.toBase58()],\r\n          },\r\n        }),\r\n        {},\r\n      ),\r\n    };\r\n  }\r\n}\r\n","import { get, set } from \"lodash\";\r\n\r\nexport type ModuleName = \"Common.Api\";\r\n\r\nexport enum LogLevel {\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug,\r\n}\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n  private name: string;\r\n  constructor(params: { name: string; logLevel?: LogLevel }) {\r\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\r\n    this.name = params.name;\r\n  }\r\n\r\n  set level(logLevel: LogLevel) {\r\n    this.logLevel = logLevel;\r\n  }\r\n  get time(): string {\r\n    return Date.now().toString();\r\n  }\r\n  get moduleName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private isLogLevel(level: LogLevel): boolean {\r\n    return level <= this.logLevel;\r\n  }\r\n\r\n  public error(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Error)) return this;\r\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public logWithError(...props): Logger {\r\n    // this.error(...props)\r\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\r\n    throw new Error(msg);\r\n  }\r\n\r\n  public warning(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\r\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public info(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Info)) return this;\r\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public debug(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\r\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\r\n    return this;\r\n  }\r\n}\r\n\r\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\r\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\r\n\r\nexport function createLogger(moduleName: string): Logger {\r\n  let logger = get(moduleLoggers, moduleName);\r\n  if (!logger) {\r\n    // default level is error\r\n    const logLevel = get(moduleLevels, moduleName);\r\n\r\n    logger = new Logger({ name: moduleName, logLevel });\r\n    set(moduleLoggers, moduleName, logger);\r\n  }\r\n\r\n  return logger;\r\n}\r\n\r\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\r\n  set(moduleLevels, moduleName, level);\r\n\r\n  const logger = get(moduleLoggers, moduleName);\r\n  if (logger) logger.level = level;\r\n}\r\n","import {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  sendAndConfirmTransaction,\r\n  SignatureResult,\r\n  Signer,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\nimport axios from \"axios\";\r\nimport { LOOKUP_TABLE_CACHE } from \"./lookupTable\";\r\n\r\nimport { Api } from \"../../api\";\r\nimport { ComputeBudgetConfig, SignAllTransactions, TxTipConfig } from \"../../raydium/type\";\r\nimport { Cluster } from \"../../solana\";\r\nimport { Owner } from \"../owner\";\r\nimport { CacheLTA, getDevLookupTableCache, getMainLookupTableCache, getMultipleLookupTableInfo } from \"./lookupTable\";\r\nimport { InstructionType, TxVersion } from \"./txType\";\r\nimport {\r\n  addComputeBudget,\r\n  checkLegacyTxSize,\r\n  checkV0TxSize,\r\n  confirmTransaction,\r\n  getRecentBlockHash,\r\n  printSimulate,\r\n} from \"./txUtils\";\r\n\r\ninterface SolanaFeeInfo {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  priorityTx: number;\r\n  nonVotes: number;\r\n  priorityRatio: number;\r\n  avgCuPerBlock: number;\r\n  blockspaceUsageRatio: number;\r\n}\r\ntype SolanaFeeInfoJson = {\r\n  \"1\": SolanaFeeInfo;\r\n  \"5\": SolanaFeeInfo;\r\n  \"15\": SolanaFeeInfo;\r\n};\r\n\r\ninterface ExecuteParams {\r\n  skipPreflight?: boolean;\r\n  recentBlockHash?: string;\r\n  sendAndConfirm?: boolean;\r\n  notSendToRpc?: boolean;\r\n}\r\n\r\ninterface TxBuilderInit {\r\n  connection: Connection;\r\n  feePayer: PublicKey;\r\n  cluster: Cluster;\r\n  owner?: Owner;\r\n  blockhashCommitment?: Commitment;\r\n  loopMultiTxStatus?: boolean;\r\n  api?: Api;\r\n  signAllTransactions?: SignAllTransactions;\r\n}\r\n\r\nexport interface AddInstructionParam {\r\n  addresses?: Record<string, PublicKey>;\r\n  instructions?: TransactionInstruction[];\r\n  endInstructions?: TransactionInstruction[];\r\n  lookupTableAddress?: string[];\r\n  signers?: Signer[];\r\n  instructionTypes?: string[];\r\n  endInstructionTypes?: string[];\r\n}\r\n\r\nexport interface TxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transaction: Transaction;\r\n  instructionTypes: string[];\r\n  signers: Signer[];\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transaction: VersionedTransaction;\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\r\n}\r\n\r\ntype TxUpdateParams = {\r\n  txId: string;\r\n  status: \"success\" | \"error\" | \"sent\";\r\n  signedTx: Transaction | VersionedTransaction;\r\n};\r\nexport interface MultiTxExecuteParam extends ExecuteParams {\r\n  sequentially: boolean;\r\n  skipTxCount?: number;\r\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\r\n}\r\nexport interface MultiTxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transactions: Transaction[];\r\n  instructionTypes: string[];\r\n  signers: Signer[][];\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface MultiTxV0BuildData<T = Record<string, any>>\r\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transactions: VersionedTransaction[];\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  blockHash?: string;\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\r\n}\r\n\r\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? MultiTxBuildData<O>\r\n  : MultiTxV0BuildData<O>;\r\n\r\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? TxBuildData<O>\r\n  : TxV0BuildData<O>;\r\n\r\nconst LOOP_INTERVAL = 2000;\r\n\r\nexport class TxBuilder {\r\n  private connection: Connection;\r\n  private owner?: Owner;\r\n  private instructions: TransactionInstruction[] = [];\r\n  private endInstructions: TransactionInstruction[] = [];\r\n  private lookupTableAddress: string[] = [];\r\n  private signers: Signer[] = [];\r\n  private instructionTypes: string[] = [];\r\n  private endInstructionTypes: string[] = [];\r\n  private feePayer: PublicKey;\r\n  private cluster: Cluster;\r\n  private signAllTransactions?: SignAllTransactions;\r\n  private blockhashCommitment?: Commitment;\r\n  private loopMultiTxStatus: boolean;\r\n\r\n  constructor(params: TxBuilderInit) {\r\n    this.connection = params.connection;\r\n    this.feePayer = params.feePayer;\r\n    this.signAllTransactions = params.signAllTransactions;\r\n    this.owner = params.owner;\r\n    this.cluster = params.cluster;\r\n    this.blockhashCommitment = params.blockhashCommitment;\r\n    this.loopMultiTxStatus = !!params.loopMultiTxStatus;\r\n  }\r\n\r\n  get AllTxData(): {\r\n    instructions: TransactionInstruction[];\r\n    endInstructions: TransactionInstruction[];\r\n    signers: Signer[];\r\n    instructionTypes: string[];\r\n    endInstructionTypes: string[];\r\n    lookupTableAddress: string[];\r\n  } {\r\n    return {\r\n      instructions: this.instructions,\r\n      endInstructions: this.endInstructions,\r\n      signers: this.signers,\r\n      instructionTypes: this.instructionTypes,\r\n      endInstructionTypes: this.endInstructionTypes,\r\n      lookupTableAddress: this.lookupTableAddress,\r\n    };\r\n  }\r\n\r\n  get allInstructions(): TransactionInstruction[] {\r\n    return [...this.instructions, ...this.endInstructions];\r\n  }\r\n\r\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\r\n    const json = (\r\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\r\n    ).data;\r\n    const { avg } = json?.[15] ?? {};\r\n    if (!avg) return undefined;\r\n    return {\r\n      units: 600000,\r\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\r\n    };\r\n  }\r\n\r\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\r\n    if (config) {\r\n      const { instructions, instructionTypes } = addComputeBudget(config);\r\n      this.instructions.unshift(...instructions);\r\n      this.instructionTypes.unshift(...instructionTypes);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public addTipInstruction(tipConfig?: TxTipConfig): boolean {\r\n    if (tipConfig) {\r\n      this.endInstructions.push(\r\n        SystemProgram.transfer({\r\n          fromPubkey: tipConfig.feePayer ?? this.feePayer,\r\n          toPubkey: new PublicKey(tipConfig.address),\r\n          lamports: BigInt(tipConfig.amount.toString()),\r\n        }),\r\n      );\r\n      this.endInstructionTypes.push(InstructionType.TransferTip);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async calComputeBudget({\r\n    config: propConfig,\r\n    defaultIns,\r\n  }: {\r\n    config?: ComputeBudgetConfig;\r\n    defaultIns?: TransactionInstruction[];\r\n  }): Promise<void> {\r\n    try {\r\n      const config = propConfig || (await this.getComputeBudgetConfig());\r\n      if (this.addCustomComputeBudget(config)) return;\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    } catch {\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    }\r\n  }\r\n\r\n  public addInstruction({\r\n    instructions = [],\r\n    endInstructions = [],\r\n    signers = [],\r\n    instructionTypes = [],\r\n    endInstructionTypes = [],\r\n    lookupTableAddress = [],\r\n  }: AddInstructionParam): TxBuilder {\r\n    this.instructions.push(...instructions);\r\n    this.endInstructions.push(...endInstructions);\r\n    this.signers.push(...signers);\r\n    this.instructionTypes.push(...instructionTypes);\r\n    this.endInstructionTypes.push(...endInstructionTypes);\r\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\r\n    return this;\r\n  }\r\n\r\n  public async versionBuild<O = Record<string, any>>({\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    txVersion?: TxVersion;\r\n    extInfo?: O;\r\n  }): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\r\n    if (txVersion === TxVersion.V0) return (await this.buildV0({ ...(extInfo || {}) })) as MakeTxData<TxVersion.V0, O>;\r\n    return this.build<O>(extInfo) as MakeTxData<TxVersion.LEGACY, O>;\r\n  }\r\n\r\n  public build<O = Record<string, any>>(extInfo?: O): MakeTxData<TxVersion.LEGACY, O> {\r\n    const transaction = new Transaction();\r\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\r\n    transaction.feePayer = this.feePayer;\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        transaction.recentBlockhash = recentBlockHash;\r\n        if (this.signers.length) transaction.sign(...this.signers);\r\n\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = sendAndConfirm\r\n            ? await sendAndConfirmTransaction(\r\n                this.connection,\r\n                transaction,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              )\r\n            : await this.connection.sendRawTransaction(transaction.serialize(), { skipPreflight });\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(...this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || ({} as O),\r\n    };\r\n  }\r\n\r\n  public buildMultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\r\n    extInfo?: T;\r\n  }): MultiTxBuildData {\r\n    const { extraPreBuildData = [], extInfo } = params;\r\n    const { transaction } = this.build(extInfo);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\r\n\r\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            let i = 0;\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) continue;\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                tx.recentBlockhash = recentBlockHash;\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\r\n            tx.recentBlockhash = recentBlockHash;\r\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n            return tx;\r\n          });\r\n          printSimulate(partialSignedTxs);\r\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return {\r\n              txIds,\r\n              signedTxs,\r\n            };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\r\n    extraPreBuildData,\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\r\n    txVersion?: T;\r\n    extInfo?: O;\r\n  }): Promise<MakeMultiTxData<T, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0MultiTx({\r\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\r\n        buildProps: extInfo || {},\r\n      })) as MakeMultiTxData<T, O>;\r\n    return this.buildMultiTx<O>({\r\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\r\n      extInfo,\r\n    }) as MakeMultiTxData<T, O>;\r\n  }\r\n\r\n  public async buildV0<O = Record<string, any>>(\r\n    props?: O & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    },\r\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\r\n    const {\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      forerunCreate,\r\n      recentBlockhash: propRecentBlockhash,\r\n      ...extInfo\r\n    } = props || {};\r\n\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\"\r\n        ? await getDevLookupTableCache(this.connection)\r\n        : await getMainLookupTableCache(this.connection)),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const recentBlockhash = forerunCreate\r\n      ? PublicKey.default.toBase58()\r\n      : propRecentBlockhash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n    const messageV0 = new TransactionMessage({\r\n      payerKey: this.feePayer,\r\n      recentBlockhash,\r\n      instructions: [...this.allInstructions],\r\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n    const transaction = new VersionedTransaction(messageV0);\r\n\r\n    transaction.sign(this.signers);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\r\n          if (sendAndConfirm) {\r\n            await confirmTransaction(this.connection, txId);\r\n          }\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendTransaction(txs[0], { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: (extInfo || {}) as O,\r\n    };\r\n  }\r\n\r\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\r\n    buildProps?: T & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    };\r\n  }): Promise<MultiTxV0BuildData> {\r\n    const { extraPreBuildData = [], buildProps } = params;\r\n    const { transaction } = await this.buildV0(buildProps);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\r\n\r\n    const allTransactions: VersionedTransaction[] = [\r\n      transaction,\r\n      ...filterExtraBuildData.map((data) => data.transaction),\r\n    ];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach(async (tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      buildProps,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: buildProps || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuild(\r\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig; splitIns?: TransactionInstruction[] },\r\n  ): Promise<MultiTxBuildData> {\r\n    const { splitIns = [], computeBudgetConfig, ...extInfo } = props || {};\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n\r\n    const allTransactions: Transaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      const _signerStrs = new Set<string>(\r\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\r\n\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer }) ||\r\n          checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          checkLegacyTxSize({\r\n            instructions: computeBudgetConfig\r\n              ? [...computeBudgetData.instructions, ...instructionQueue]\r\n              : [...instructionQueue],\r\n            payer: this.feePayer,\r\n            signers: _signer,\r\n          })\r\n        ) {\r\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n        } else {\r\n          allTransactions.push(new Transaction().add(...instructionQueue));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        checkLegacyTxSize({\r\n          instructions: computeBudgetConfig\r\n            ? [...computeBudgetData.instructions, ...instructionQueue]\r\n            : [...instructionQueue],\r\n          payer: this.feePayer,\r\n          signers: _signers.map((s) => s.publicKey),\r\n        })\r\n      ) {\r\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n      } else {\r\n        allTransactions.push(new Transaction().add(...instructionQueue));\r\n      }\r\n      allSigners.push(_signers);\r\n    }\r\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        allTransactions.forEach(async (tx, idx) => {\r\n          tx.recentBlockhash = recentBlockHash;\r\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n              }\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuildV0(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n      sniperTransactions?: VersionedTransaction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? await getDevLookupTableCache(this.connection) : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      blockHash: blockHash,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                console.log(\"skip tx: \", i);\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async buildSniperTransaction(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\"\r\n        ? await getDevLookupTableCache(this.connection)\r\n        : await getMainLookupTableCache(this.connection)),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                console.log(\"skip tx: \", i);\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n\r\n}\r\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\r\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\r\n\r\nexport interface CacheLTA {\r\n  [key: string]: AddressLookupTableAccount;\r\n}\r\n\r\nexport async function getMultipleLookupTableInfo({\r\n  connection,\r\n  address,\r\n  cluster = \"mainnet\",\r\n}: {\r\n  connection: Connection;\r\n  address: PublicKey[];\r\n  cluster?: \"mainnet\" | \"devnet\";\r\n}): Promise<CacheLTA> {\r\n  const dataInfos = await getMultipleAccountsInfo(\r\n    connection,\r\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\r\n  );\r\n\r\n  const outDict: CacheLTA = {};\r\n  for (let i = 0; i < address.length; i++) {\r\n    const info = dataInfos[i];\r\n    const key = address[i];\r\n    if (!info) continue;\r\n    const lookupAccount = new AddressLookupTableAccount({\r\n      key,\r\n      state: AddressLookupTableAccount.deserialize(info.data),\r\n    });\r\n    outDict[key.toString()] = lookupAccount;\r\n\r\n    if (cluster === \"devnet\") DEV_LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n    else LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n  }\r\n\r\n  return outDict;\r\n}\r\n\r\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\r\n  // AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU: new AddressLookupTableAccount({\r\n  //   key: new PublicKey(\"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\"),\r\n  //   state: AddressLookupTableAccount.deserialize(\r\n  //     Buffer.from(\r\n  //       \"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\",\r\n  //       \"base64\",\r\n  //     ),\r\n  //   ),\r\n  // }),\r\n};\r\n\r\nexport const getMainLookupTableCache = async (connection: Connection) => {\r\n  const altStr = \"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\";\r\n  if (LOOKUP_TABLE_CACHE[altStr]) return LOOKUP_TABLE_CACHE;\r\n\r\n  const devAlt = new PublicKey(altStr);\r\n  const data = await connection.getAccountInfo(devAlt);\r\n  if (!data) return LOOKUP_TABLE_CACHE;\r\n  LOOKUP_TABLE_CACHE[altStr] = new AddressLookupTableAccount({\r\n    key: devAlt,\r\n    state: AddressLookupTableAccount.deserialize(data.data),\r\n  });\r\n\r\n  return LOOKUP_TABLE_CACHE;\r\n};\r\n\r\nexport const DEV_LOOKUP_TABLE_CACHE: CacheLTA = {};\r\nexport const getDevLookupTableCache = async (connection: Connection) => {\r\n  const devAltStr = \"EFhMuDw1PKEuckuFRW9PavNfTH4LKP5uKHgyXDmWpFCq\";\r\n  if (DEV_LOOKUP_TABLE_CACHE[devAltStr]) return DEV_LOOKUP_TABLE_CACHE;\r\n\r\n  const devAlt = new PublicKey(devAltStr);\r\n  const data = await connection.getAccountInfo(devAlt);\r\n  if (!data) return DEV_LOOKUP_TABLE_CACHE;\r\n  DEV_LOOKUP_TABLE_CACHE[devAltStr] = new AddressLookupTableAccount({\r\n    key: devAlt,\r\n    state: AddressLookupTableAccount.deserialize(data.data),\r\n  });\r\n\r\n  return DEV_LOOKUP_TABLE_CACHE;\r\n};\r\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\r\nimport { WSOLMint, chunkArray, solToWSol } from \"./\";\r\nimport { createLogger } from \"./logger\";\r\nimport { MINT_SIZE, TOKEN_PROGRAM_ID, getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\r\n\r\ninterface MultipleAccountsJsonRpcResponse {\r\n  jsonrpc: string;\r\n  id: string;\r\n  error?: {\r\n    code: number;\r\n    message: string;\r\n  };\r\n  result: {\r\n    context: { slot: number };\r\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\r\n  };\r\n}\r\n\r\nexport interface GetMultipleAccountsInfoConfig {\r\n  batchRequest?: boolean;\r\n  commitment?: Commitment;\r\n  chunkCount?: number;\r\n}\r\n\r\nconst logger = createLogger(\"Raydium_accountInfo_util\");\r\n\r\nexport async function getMultipleAccountsInfo(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<(AccountInfo<Buffer> | null)[]> {\r\n  const {\r\n    batchRequest,\r\n    commitment = \"confirmed\",\r\n    chunkCount = 100,\r\n  } = {\r\n    batchRequest: false,\r\n    ...config,\r\n  };\r\n\r\n  const chunkedKeys = chunkArray(publicKeys, chunkCount);\r\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\r\n\r\n  if (batchRequest) {\r\n    const batch = chunkedKeys.map((keys) => {\r\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\r\n      return {\r\n        methodName: \"getMultipleAccounts\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const _batch = chunkArray(batch, 10);\r\n\r\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\r\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\r\n    ).flat();\r\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\r\n      if (unsafeRes.error)\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\r\n\r\n      return unsafeRes.result.value.map((accountInfo) => {\r\n        if (accountInfo) {\r\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\r\n\r\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\r\n\r\n          return {\r\n            data: Buffer.from(data[0], \"base64\"),\r\n            executable,\r\n            lamports,\r\n            owner: new PublicKey(owner),\r\n            rentEpoch,\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n    });\r\n  } else {\r\n    try {\r\n      results = (await Promise.all(\r\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\r\n      )) as (AccountInfo<Buffer> | null)[][];\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return results.flat();\r\n}\r\n\r\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\r\n  connection: Connection,\r\n  publicKeysWithCustomFlag: T[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\r\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\r\n    connection,\r\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\r\n    config,\r\n  );\r\n\r\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\r\n}\r\n\r\nexport enum AccountType {\r\n  Uninitialized,\r\n  Mint,\r\n  Account,\r\n}\r\nexport const ACCOUNT_TYPE_SIZE = 1;\r\n\r\nexport async function fetchMultipleMintInfos({\r\n  connection,\r\n  mints,\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  mints: PublicKey[];\r\n  config?: { batchRequest?: boolean };\r\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\r\n  if (mints.length === 0) return {};\r\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\r\n    connection,\r\n    mints.map((i) => ({ pubkey: solToWSol(i) })),\r\n    config,\r\n  );\r\n\r\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\r\n  for (const i of mintInfos) {\r\n    if (!i.accountInfo || i.accountInfo.data.length < MINT_SIZE) {\r\n      console.log(\"invalid mint account\", i.pubkey.toBase58());\r\n      continue;\r\n    }\r\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\r\n    mintK[i.pubkey.toString()] = {\r\n      ...t,\r\n      programId: i.accountInfo?.owner || TOKEN_PROGRAM_ID,\r\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\r\n    };\r\n  }\r\n  mintK[PublicKey.default.toBase58()] = mintK[WSOLMint.toBase58()];\r\n\r\n  return mintK;\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { CurrencyAmount, TokenAmount } from \"../module/amount\";\r\nimport { Currency } from \"../module/currency\";\r\nimport { Fraction } from \"../module/fraction\";\r\nimport { Percent } from \"../module/percent\";\r\nimport { Price } from \"../module/price\";\r\nimport { Token } from \"../module/token\";\r\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\nimport { parseBigNumberish } from \"./constant\";\r\nimport { mul } from \"./fractionUtil\";\r\nimport { notInnerObject } from \"./utility\";\r\n\r\nexport const BN_ZERO = new BN(0);\r\nexport const BN_ONE = new BN(1);\r\nexport const BN_TWO = new BN(2);\r\nexport const BN_THREE = new BN(3);\r\nexport const BN_FIVE = new BN(5);\r\nexport const BN_TEN = new BN(10);\r\nexport const BN_100 = new BN(100);\r\nexport const BN_1000 = new BN(1000);\r\nexport const BN_10000 = new BN(10000);\r\nexport type BigNumberish = BN | string | number | bigint;\r\nexport type Numberish = number | string | bigint | Fraction | BN;\r\n\r\nexport function tenExponential(shift: BigNumberish): BN {\r\n  return BN_TEN.pow(parseBigNumberish(shift));\r\n}\r\n\r\n/**\r\n *\r\n * @example\r\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\r\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\r\n */\r\nexport function parseNumberInfo(n: Numberish | undefined): {\r\n  denominator: string;\r\n  numerator: string;\r\n  sign?: string;\r\n  int?: string;\r\n  dec?: string;\r\n} {\r\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\r\n  if (n instanceof BN) {\r\n    return { numerator: n.toString(), denominator: \"1\" };\r\n  }\r\n\r\n  if (n instanceof Fraction) {\r\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\r\n  }\r\n\r\n  const s = String(n);\r\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  const denominator = \"1\" + \"0\".repeat(dec.length);\r\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\r\n  return { denominator, numerator, sign, int, dec };\r\n}\r\n\r\n// round up\r\nexport function divCeil(a: BN, b: BN): BN {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const dm = a.divmod(b);\r\n\r\n  // Fast case - exact division\r\n  if (dm.mod.isZero()) return dm.div;\r\n\r\n  // Round up\r\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\r\n}\r\n\r\nexport function shakeFractionDecimal(n: Fraction): string {\r\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  return `${sign}${int}`;\r\n}\r\n\r\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\r\n  if (n instanceof BN) return n;\r\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\r\n}\r\n\r\nexport function toFraction(value: Numberish): Fraction {\r\n  //  to complete math format(may have decimal), not int\r\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\r\n\r\n  if (value instanceof Price) return value.adjusted;\r\n\r\n  // to complete math format(may have decimal), not BN\r\n  if (value instanceof TokenAmount)\r\n    try {\r\n      return toFraction(value.toExact());\r\n    } catch {\r\n      return new Fraction(BN_ZERO);\r\n    }\r\n\r\n  // do not ideal with other fraction value\r\n  if (value instanceof Fraction) return value;\r\n\r\n  // wrap to Fraction\r\n  const n = String(value);\r\n  const details = parseNumberInfo(n);\r\n  return new Fraction(details.numerator, details.denominator);\r\n}\r\n\r\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\r\n}\r\n\r\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\r\n}\r\n\r\n/**\r\n * @example\r\n * toPercent(3.14) // => Percent { 314.00% }\r\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\r\n */\r\nexport function toPercent(\r\n  n: Numberish,\r\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\r\n): Percent {\r\n  const { numerator, denominator } = parseNumberInfo(n);\r\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\r\n}\r\n\r\nexport function toTokenPrice(params: {\r\n  token: TokenJson | Token | SplToken;\r\n  numberPrice: Numberish;\r\n  decimalDone?: boolean;\r\n}): Price {\r\n  const { token, numberPrice, decimalDone } = params;\r\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\r\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\r\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\r\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\r\n\r\n  return new Price({\r\n    baseToken: usdCurrency,\r\n    denominator: parsedDenominator.toString(),\r\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\r\n    numerator: parsedNumerator.toString(),\r\n  });\r\n}\r\n\r\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\r\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\r\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\r\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\r\n}\r\n\r\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\r\n  if (!price || !amount) return toUsdCurrency(0);\r\n  return toUsdCurrency(mul(amount, price)!);\r\n}\r\n\r\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\r\n  if (n == null) return undefined;\r\n  const { numerator, denominator } = parseNumberInfo(n.toString());\r\n  return new Fraction(numerator, denominator);\r\n}\r\n\r\nexport function isDecimal(val: unknown): boolean {\r\n  return val instanceof Decimal;\r\n}\r\n\r\n// export function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\r\n//   // @ts-expect-error no need type for inner code\r\n//   return isDecimal(info)\r\n//     ? decimalToFraction(info as any)\r\n//     : Array.isArray(info)\r\n//     ? info.map((k) => recursivelyDecimalToFraction(k))\r\n//     : notInnerObject(info)\r\n//     ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\r\n//     : info;\r\n// }\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { BigNumberish, BN_TEN } from \"../common/bignumber\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common\";\r\nimport { Currency } from \"./currency\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_amount\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nexport function splitNumber(num: string, decimals: number): [string, string] {\r\n  let integral = \"0\";\r\n  let fractional = \"0\";\r\n\r\n  if (num.includes(\".\")) {\r\n    const splited = num.split(\".\");\r\n    if (splited.length === 2) {\r\n      [integral, fractional] = splited;\r\n      fractional = fractional.padEnd(decimals, \"0\");\r\n    } else {\r\n      logger.logWithError(`invalid number string, num: ${num}`);\r\n    }\r\n  } else {\r\n    integral = num;\r\n  }\r\n\r\n  // fix decimals is 0\r\n  return [integral, fractional.slice(0, decimals) || fractional];\r\n}\r\n\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token;\r\n  protected logger: Logger;\r\n\r\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.token = token;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n  public gt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\r\n    return new TokenAmount(this.token, this.raw.add(other.raw));\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\r\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.token.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n  protected logger: Logger;\r\n\r\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.currency = currency;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n\r\n  /**\r\n   * a greater than b\r\n   */\r\n  public gt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\r\n  }\r\n\r\n  public sub(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\r\n\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\r\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\r\nimport _toFarmat from \"toformat\";\r\n\r\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\r\ninterface FormatOptions {\r\n  decimalSeparator?: string;\r\n  groupSeparator?: string;\r\n  groupSize?: number;\r\n  fractionGroupSeparator?: string;\r\n  fractionGroupSize?: number;\r\n}\r\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\r\n  new (value: BigSource): WrappedBig;\r\n  (value: BigSource): WrappedBig;\r\n  (): WrappedBigConstructor;\r\n\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedBig extends Big {\r\n  add(n: BigSource): WrappedBig;\r\n  abs(): WrappedBig;\r\n  div(n: BigSource): WrappedBig;\r\n  minus(n: BigSource): WrappedBig;\r\n  mod(n: BigSource): WrappedBig;\r\n  mul(n: BigSource): WrappedBig;\r\n  plus(n: BigSource): WrappedBig;\r\n  pow(exp: number): WrappedBig;\r\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\r\n  sqrt(): WrappedBig;\r\n  sub(n: BigSource): WrappedBig;\r\n  times(n: BigSource): WrappedBig;\r\n  toFormat(): string;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\ntype DecimalConstructor = typeof Decimal;\r\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\r\n  new (value: Numeric): WrappedDecimal;\r\n  clone(config?: Config): WrappedDecimalConstructor;\r\n  config(config: Config): WrappedDecimal;\r\n  set(config: Config): WrappedDecimal;\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedDecimal extends Decimal {\r\n  absoluteValue(): WrappedDecimal;\r\n  abs(): WrappedDecimal;\r\n  dividedBy(y: Numeric): WrappedDecimal;\r\n  div(y: Numeric): WrappedDecimal;\r\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\r\n  idiv(y: Numeric): WrappedDecimal;\r\n  logarithm(base?: Numeric): WrappedDecimal;\r\n  log(base?: Numeric): WrappedDecimal;\r\n  minus(y: Numeric): WrappedDecimal;\r\n  sub(y: Numeric): WrappedDecimal;\r\n  modulo(y: Numeric): WrappedDecimal;\r\n  mod(y: Numeric): WrappedDecimal;\r\n  naturalExponetial(): WrappedDecimal;\r\n  exp(): WrappedDecimal;\r\n  naturalLogarithm(): WrappedDecimal;\r\n  ln(): WrappedDecimal;\r\n  negated(): WrappedDecimal;\r\n  neg(): WrappedDecimal;\r\n  plus(y: Numeric): WrappedDecimal;\r\n  add(y: Numeric): WrappedDecimal;\r\n  squareRoot(): WrappedDecimal;\r\n  sqrt(): WrappedDecimal;\r\n  times(y: Numeric): WrappedDecimal;\r\n  mul(y: Numeric): WrappedDecimal;\r\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\r\n  todp(dp?: number, rm?: number): WrappedDecimal;\r\n  toInteger(): WrappedDecimal;\r\n  toint(): WrappedDecimal;\r\n  toPower(y: Numeric): WrappedDecimal;\r\n  pow(y: Numeric): WrappedDecimal;\r\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\r\n  tosd(sd?: number, rm?: number): WrappedDecimal;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\nconst toFormat: {\r\n  (fn: BigConstructor): WrappedBigConstructor;\r\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\r\n} = _toFarmat;\r\nexport default toFormat;\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\nimport _Decimal from \"decimal.js-light\";\r\n\r\nimport { BigNumberish } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common/constant\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\n\r\nconst logger = createLogger(\"module/fraction\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nconst Decimal = toFormat(_Decimal);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\r\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\r\n  [Rounding.ROUND_UP]: _Big.roundUp,\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: BN;\r\n  public readonly denominator: BN;\r\n\r\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\r\n    this.numerator = parseBigNumberish(numerator);\r\n    this.denominator = parseBigNumberish(denominator);\r\n  }\r\n\r\n  public get quotient(): BN {\r\n    return this.numerator.div(this.denominator);\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  }\r\n\r\n  public add(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public sub(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public mul(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\r\n  }\r\n\r\n  public div(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\r\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\r\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding] || 1;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.numerator.isZero();\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { BigNumberish } from \"./bignumber\";\r\nimport { createLogger } from \"./logger\";\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nconst MAX_SAFE = 0x1fffffffffffff;\r\n\r\nexport function parseBigNumberish(value: BigNumberish): BN {\r\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\r\n  // BN\r\n  if (value instanceof BN) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === \"string\") {\r\n    if (value.match(/^-?[0-9]+$/)) {\r\n      return new BN(value);\r\n    }\r\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\r\n  }\r\n\r\n  if (typeof value === \"number\") {\r\n    if (value % 1) {\r\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\r\n    }\r\n\r\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\r\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\r\n    }\r\n\r\n    return new BN(String(value));\r\n  }\r\n\r\n  if (typeof value === \"bigint\") {\r\n    return new BN(value.toString());\r\n  }\r\n  logger.error(`invalid BigNumberish value: ${value}`);\r\n  return new BN(0); // never reach, because logWithError will throw error\r\n}","import { PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nexport const SOL_INFO: TokenInfo = {\r\n  chainId: 101,\r\n  address: PublicKey.default.toBase58(),\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"SOL\",\r\n  name: \"solana\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n\r\nexport const TOKEN_WSOL: TokenInfo = {\r\n  chainId: 101,\r\n  address: \"So11111111111111111111111111111111111111112\",\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"WSOL\",\r\n  name: \"Wrapped SOL\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\r\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\r\n\r\n/**\r\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n */\r\nexport interface TokenProps {\r\n  mint: PublicKeyish;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n  skipMint?: boolean;\r\n  isToken2022?: boolean;\r\n}\r\n\r\nexport class Token {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n  public readonly isToken2022: boolean;\r\n\r\n  public readonly mint: PublicKey;\r\n  public static readonly WSOL: Token = new Token({\r\n    ...TOKEN_WSOL,\r\n    mint: TOKEN_WSOL.address,\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\r\n   */\r\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\r\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\r\n      this.decimals = TOKEN_WSOL.decimals;\r\n      this.symbol = TOKEN_WSOL.symbol;\r\n      this.name = TOKEN_WSOL.name;\r\n      this.mint = new PublicKey(TOKEN_WSOL.address);\r\n      this.isToken2022 = false;\r\n      return;\r\n    }\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol || mint.toString().substring(0, 6);\r\n    this.name = name || mint.toString().substring(0, 6);\r\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\r\n    this.isToken2022 = isToken2022;\r\n  }\r\n\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.mint.equals(other.mint);\r\n  }\r\n}\r\n","import { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\ninterface AccountMetaProps {\r\n  pubkey: PublicKey;\r\n  isSigner?: boolean;\r\n  isWritable?: boolean;\r\n}\r\n\r\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\r\n  return {\r\n    pubkey,\r\n    isWritable,\r\n    isSigner,\r\n  };\r\n}\r\n\r\nexport const commonSystemAccountMeta = [\r\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n];\r\n\r\nexport type PublicKeyish = PublicKey | string;\r\n\r\nexport function validateAndParsePublicKey({\r\n  publicKey: orgPubKey,\r\n  transformSol,\r\n}: {\r\n  publicKey: PublicKeyish;\r\n  transformSol?: boolean;\r\n}): PublicKey {\r\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\r\n\r\n  if (publicKey instanceof PublicKey) {\r\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\r\n    return publicKey;\r\n  }\r\n\r\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\r\n\r\n  if (typeof publicKey === \"string\") {\r\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\r\n    try {\r\n      const key = new PublicKey(publicKey);\r\n      return key;\r\n    } catch {\r\n      throw new Error(\"invalid public key\");\r\n    }\r\n  }\r\n\r\n  throw new Error(\"invalid public key\");\r\n}\r\n\r\nexport function tryParsePublicKey(v: string): PublicKey | string {\r\n  try {\r\n    return new PublicKey(v);\r\n  } catch (e) {\r\n    return v;\r\n  }\r\n}\r\n\r\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\r\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\r\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\r\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\r\n\r\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\r\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\r\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\r\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\r\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\r\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\r\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\r\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\r\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\r\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\r\nexport const SOLMint = PublicKey.default;\r\n\r\nexport function solToWSol(mint: PublicKeyish): PublicKey {\r\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\r\n}\r\n","import { SOL_INFO } from \"../raydium/token/constant\";\r\n\r\nimport { Token } from \"./token\";\r\n\r\ninterface CurrencyProps {\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n/**\r\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n * The only instance of the base class `Currency` is SOL.\r\n */\r\nexport class Currency {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\r\n   * @param decimals - decimals of the currency\r\n   * @param symbol - symbol of the currency\r\n   * @param name - name of the currency\r\n   */\r\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { Rounding } from \"../common\";\r\nimport { Fraction } from \"./fraction\";\r\n\r\nexport const _100_PERCENT = new Fraction(new BN(100));\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { Rounding } from \"../common\";\r\nimport { BigNumberish, tenExponential } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_price\");\r\n\r\ninterface PriceProps {\r\n  baseToken: Token;\r\n  denominator: BigNumberish;\r\n  quoteToken: Token;\r\n  numerator: BigNumberish;\r\n}\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseToken: Token; // input i.e. denominator\r\n  public readonly quoteToken: Token; // output i.e. numerator\r\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n  public readonly scalar: Fraction;\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(params: PriceProps) {\r\n    const { baseToken, quoteToken, numerator, denominator } = params;\r\n    super(numerator, denominator);\r\n\r\n    this.baseToken = baseToken;\r\n    this.quoteToken = quoteToken;\r\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.mul(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price({\r\n      baseToken: this.quoteToken,\r\n      quoteToken: this.baseToken,\r\n      denominator: this.numerator,\r\n      numerator: this.denominator,\r\n    });\r\n  }\r\n\r\n  public mul(other: Price): Price {\r\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\r\n\r\n    const fraction = super.mul(other);\r\n    return new Price({\r\n      baseToken: this.baseToken,\r\n      quoteToken: other.quoteToken,\r\n      denominator: fraction.denominator,\r\n      numerator: fraction.numerator,\r\n    });\r\n  }\r\n\r\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","/**\r\n * https://youmightnotneed.com/lodash/\r\n */\r\n\r\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\r\n  const tmp = [...arr];\r\n  if (chunkSize <= 0) return cache;\r\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\r\n  return cache;\r\n}\r\n\r\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\r\n}\r\n\r\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\r\n}\r\n\r\nexport function uniq<T>(arr: T[]): T[] {\r\n  return [...new Set(arr)];\r\n}\r\n","import { Keypair, PublicKey, Signer } from \"@solana/web3.js\";\r\n\r\ntype _Owner = Keypair | PublicKey;\r\n\r\nexport class Owner {\r\n  private readonly _owner: _Owner;\r\n\r\n  constructor(owner: _Owner) {\r\n    this._owner = owner;\r\n  }\r\n\r\n  get publicKey(): PublicKey {\r\n    if (Owner.isKeyPair(this._owner)) {\r\n      return this._owner.publicKey;\r\n    }\r\n\r\n    return this._owner;\r\n  }\r\n\r\n  get signer(): Signer | undefined {\r\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\r\n  }\r\n\r\n  get isKeyPair(): boolean {\r\n    return Owner.isKeyPair(this._owner);\r\n  }\r\n\r\n  get isPublicKey(): boolean {\r\n    return Owner.isPublicKey(this._owner);\r\n  }\r\n\r\n  static isKeyPair(owner: _Owner): owner is Keypair {\r\n    return (owner as Keypair).secretKey !== undefined;\r\n  }\r\n\r\n  static isPublicKey(owner: _Owner): owner is PublicKey {\r\n    return !Owner.isKeyPair(owner);\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { findProgramAddress } from \"./txTool/txUtils\";\r\n\r\nexport function getATAAddress(\r\n  owner: PublicKey,\r\n  mint: PublicKey,\r\n  programId?: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\r\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\r\n  );\r\n}\r\n","import {\r\n  Commitment,\r\n  ComputeBudgetProgram,\r\n  Connection,\r\n  EpochInfo,\r\n  Keypair,\r\n  PublicKey,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"../logger\";\r\nimport { CacheLTA } from \"./lookupTable\";\r\nimport { InstructionType } from \"./txType\";\r\n\r\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst logger = createLogger(\"Raydium_txUtil\");\r\n\r\nexport const MAX_BASE64_SIZE = 1644;\r\n\r\nexport function addComputeBudget(config: ComputeBudgetConfig): {\r\n  instructions: TransactionInstruction[];\r\n  instructionTypes: string[];\r\n} {\r\n  const ins: TransactionInstruction[] = [];\r\n  const insTypes: string[] = [];\r\n  if (config.microLamports) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\r\n    insTypes.push(InstructionType.SetComputeUnitPrice);\r\n  }\r\n  if (config.units) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\r\n    insTypes.push(InstructionType.SetComputeUnitLimit);\r\n  }\r\n\r\n  return {\r\n    instructions: ins,\r\n    instructionTypes: insTypes,\r\n  };\r\n}\r\n\r\nexport async function getRecentBlockHash(connection: Connection, propsCommitment?: Commitment): Promise<string> {\r\n  const commitment = propsCommitment ?? \"confirmed\";\r\n  return (await connection.getLatestBlockhash?.({ commitment }))?.blockhash;\r\n}\r\n\r\nexport async function confirmTransaction(connection: Connection, txId: string): Promise<string> {\r\n  connection.getSignatureStatuses([txId]);\r\n  return new Promise((resolve, reject) => {\r\n    const id = setTimeout(reject, 60 * 1000);\r\n    connection.onSignature(\r\n      txId,\r\n      (signatureResult) => {\r\n        clearTimeout(id);\r\n        if (!signatureResult.err) {\r\n          resolve(\"\");\r\n          return;\r\n        }\r\n        reject(Object.assign(signatureResult.err, { txId }));\r\n      },\r\n      \"confirmed\",\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Forecast transaction size\r\n */\r\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\r\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\r\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\r\n\r\n  const transaction = new Transaction();\r\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\r\n  transaction.feePayer = signers[0];\r\n  transaction.add(...instructions);\r\n\r\n  try {\r\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Simulates multiple instruction\r\n */\r\n/**\r\n * Simulates multiple instruction\r\n */\r\nexport async function simulateMultipleInstruction(\r\n  connection: Connection,\r\n  instructions: TransactionInstruction[],\r\n  keyword: string,\r\n  batchRequest = true,\r\n): Promise<string[]> {\r\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\r\n\r\n  const transactions: Transaction[] = [];\r\n\r\n  let transaction = new Transaction();\r\n  transaction.feePayer = feePayer;\r\n\r\n  for (const instruction of instructions) {\r\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\r\n      transactions.push(transaction);\r\n      transaction = new Transaction();\r\n      transaction.feePayer = feePayer;\r\n    }\r\n    transaction.add(instruction);\r\n  }\r\n  if (transaction.instructions.length > 0) {\r\n    transactions.push(transaction);\r\n  }\r\n\r\n  let results: SimulatedTransactionResponse[] = [];\r\n\r\n  try {\r\n    results = await simulateTransaction(connection, transactions, batchRequest);\r\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  const logs: string[] = [];\r\n  for (const result of results) {\r\n    logger.debug(\"simulate result:\", result);\r\n\r\n    if (result.logs) {\r\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\r\n      logger.debug(\"filteredLog:\", logs);\r\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\r\n      logs.push(...filteredLog);\r\n    }\r\n  }\r\n\r\n  return logs;\r\n}\r\n\r\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\r\n  const results = log.match(/{[\"\\w:,]+}/g);\r\n  if (!results || results.length !== 1) {\r\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\r\n  }\r\n\r\n  return results[0];\r\n}\r\n\r\nexport function parseSimulateValue(log: string, key: string): any {\r\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\r\n\r\n  const results = reg.exec(log);\r\n  if (!results || results.length !== 2) {\r\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\r\n  }\r\n\r\n  return results[1];\r\n}\r\n\r\nexport interface ProgramAddress {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n}\r\nexport function findProgramAddress(\r\n  seeds: Array<Buffer | Uint8Array>,\r\n  programId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\r\n  return { publicKey, nonce };\r\n}\r\n\r\nexport async function simulateTransaction(\r\n  connection: Connection,\r\n  transactions: Transaction[],\r\n  batchRequest?: boolean,\r\n): Promise<any[]> {\r\n  let results: any[] = [];\r\n  if (batchRequest) {\r\n    const getLatestBlockhash = await connection.getLatestBlockhash();\r\n\r\n    const encodedTransactions: string[] = [];\r\n    for (const transaction of transactions) {\r\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\r\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const message = transaction._compile();\r\n      const signData = message.serialize();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const wireTransaction = transaction._serialize(signData);\r\n      const encodedTransaction = wireTransaction.toString(\"base64\");\r\n\r\n      encodedTransactions.push(encodedTransaction);\r\n    }\r\n\r\n    const batch = encodedTransactions.map((keys) => {\r\n      const args = connection._buildArgs([keys], undefined, \"base64\");\r\n      return {\r\n        methodName: \"simulateTransaction\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const reqData: { methodName: string; args: any[] }[][] = [];\r\n    const itemReqIndex = 20;\r\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\r\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    results = await (\r\n      await Promise.all(\r\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\r\n      )\r\n    ).flat();\r\n  } else {\r\n    try {\r\n      results = await Promise.all(\r\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function checkLegacyTxSize({\r\n  instructions,\r\n  payer,\r\n  signers,\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  signers: PublicKey[];\r\n}): boolean {\r\n  return forecastTransactionSize(instructions, [payer, ...signers]);\r\n}\r\n\r\nexport function checkV0TxSize({\r\n  instructions,\r\n  payer,\r\n  lookupTableAddressAccount,\r\n  recentBlockhash = Keypair.generate().publicKey.toString(),\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  lookupTableAddressAccount?: CacheLTA;\r\n  recentBlockhash?: string;\r\n}): boolean {\r\n  const transactionMessage = new TransactionMessage({\r\n    payerKey: payer,\r\n    recentBlockhash,\r\n    instructions,\r\n  });\r\n\r\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\r\n  try {\r\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\r\n    return buildLength < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\r\n  time: 0,\r\n  data: undefined,\r\n};\r\n\r\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\r\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\r\n    const data = await connection.getEpochInfo();\r\n    epochInfoCache = {\r\n      time: Date.now(),\r\n      data,\r\n    };\r\n    return data;\r\n  } else {\r\n    return epochInfoCache.data;\r\n  }\r\n}\r\n\r\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\r\n  if (Buffer.isBuffer(arr)) {\r\n    return arr;\r\n  } else if (arr instanceof Uint8Array) {\r\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\r\n  } else {\r\n    return Buffer.from(arr);\r\n  }\r\n};\r\n\r\nexport const txToBase64 = (transaction: Transaction | VersionedTransaction): string => {\r\n  let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  try {\r\n    return serialized instanceof Buffer ? serialized.toString(\"base64\") : Buffer.from(serialized).toString(\"base64\");\r\n  } catch {\r\n    return serialized.toString(\"base64\");\r\n  }\r\n};\r\n\r\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\r\n  const allBase64: string[] = [];\r\n  transactions.forEach((transaction) => {\r\n    if (transaction instanceof Transaction) {\r\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\r\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\r\n    }\r\n    allBase64.push(txToBase64(transaction));\r\n  });\r\n  console.log(\"simulate tx string:\", allBase64);\r\n\r\n  return allBase64;\r\n}\r\n\r\nexport function transformTxToBase64(tx: Transaction | VersionedTransaction): string {\r\n  let serialized = tx.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (tx instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  return serialized.toString(\"base64\");\r\n}\r\n","export enum TxVersion {\r\n  \"V0\",\r\n  \"LEGACY\",\r\n}\r\n\r\nexport const InstructionType = {\r\n  CreateAccount: \"CreateAccount\",\r\n  InitAccount: \"InitAccount\",\r\n  CreateATA: \"CreateATA\",\r\n  CloseAccount: \"CloseAccount\",\r\n  TransferAmount: \"TransferAmount\",\r\n  InitMint: \"InitMint\",\r\n  MintTo: \"MintTo\",\r\n\r\n  InitMarket: \"InitMarket\", // create market main ins\r\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\r\n\r\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\r\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\r\n\r\n  // CLMM\r\n  ClmmCreatePool: \"ClmmCreatePool\",\r\n  ClmmOpenPosition: \"ClmmOpenPosition\",\r\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\r\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\r\n  ClmmClosePosition: \"ClmmClosePosition\",\r\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\r\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\r\n  ClmmInitReward: \"ClmmInitReward\",\r\n  ClmmSetReward: \"ClmmSetReward\",\r\n  ClmmCollectReward: \"ClmmCollectReward\",\r\n  ClmmLockPosition: \"ClmmLockPosition\",\r\n  ClmmHarvestLockPosition: \"ClmmHarvestLockPosition\",\r\n\r\n  AmmV4Swap: \"AmmV4Swap\",\r\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\r\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\r\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\r\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\r\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\r\n  AmmV4CreatePool: \"AmmV4CreatePool\",\r\n  AmmV4InitPool: \"AmmV4InitPool\",\r\n\r\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\r\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\r\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\r\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\r\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\r\n\r\n  RouteSwap: \"RouteSwap\",\r\n  RouteSwap1: \"RouteSwap1\",\r\n  RouteSwap2: \"RouteSwap2\",\r\n\r\n  FarmV3Deposit: \"FarmV3Deposit\",\r\n  FarmV3Withdraw: \"FarmV3Withdraw\",\r\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\r\n\r\n  FarmV4Withdraw: \"FarmV4Withdraw\",\r\n\r\n  FarmV5Deposit: \"FarmV5Deposit\",\r\n  FarmV5Withdraw: \"FarmV5Withdraw\",\r\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\r\n\r\n  FarmV6Deposit: \"FarmV6Deposit\",\r\n  FarmV6Withdraw: \"FarmV6Withdraw\",\r\n  FarmV6Create: \"FarmV6Create\",\r\n  FarmV6Restart: \"FarmV6Restart\",\r\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\r\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\r\n\r\n  CpmmCreatePool: \"CpmmCreatePool\",\r\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\r\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\r\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\r\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\r\n\r\n  CpmmLockLp: \"CpmmLockLp\",\r\n  CpmmCollectLockFee: \"CpmmCollectLockFee\",\r\n  TransferTip: \"TransferTip\",\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\n// raydium\r\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\r\n// temp fusion\r\nexport const FARM_PROGRAM_ID_V4 = new PublicKey(\"CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T\");\r\n// \"fusion\"\r\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\r\n// echosystem\r\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\r\n\r\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\r\n\r\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\r\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\r\n\r\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\r\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\r\nexport const LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\r\nexport const CLMM_LOCK_PROGRAM_ID = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const CLMM_LOCK_AUTH_ID = new PublicKey(\"kN1kEznaF5Xbd8LYuqtEFcxzWSBk5Fv6ygX6SqEGJVy\");\r\n\r\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\n\r\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\r\nexport const FEE_DESTINATION_ID = new PublicKey(\"7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5\");\r\n\r\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\r\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\r\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\r\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\r\n\r\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C\");\r\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL\");\r\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8\");\r\n\r\nexport const LOCK_CPMM_PROGRAM = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\n\r\nexport const LOCK_CPMM_AUTH = new PublicKey(\"3f7GcQFG397GAaEnv51zR6tsTVihYRydnydDD1cXekxH\");\r\n\r\nexport const LAUNCHPAD_PROGRAM = new PublicKey(\"LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj\");\r\nexport const LAUNCHPAD_AUTH = new PublicKey(\"WLHv2UAZm6z4KyaaELi5pjdbJh6RESMva1Rnn8pJVVh\");\r\n\r\nexport const DEV_LAUNCHPAD_PROGRAM = new PublicKey(\"DRay6fNdQ5J82H7xV6uq2aV3mNrUZ1J4PgSKsWgptcm6\");\r\nexport const DEV_LAUNCHPAD_AUTH = new PublicKey(\"5xqNaZXX5eUi4p5HU4oz9i5QnwRNT2y6oN7yyn4qENeq\");\r\n\r\nexport const LAUNCHPAD_PLATFORM = new PublicKey(\"4Bu96XjU84XjPDSpveTVf6LYGCkfW5FK7SNkREWcEfV4\");\r\n\r\nexport const LAUNCHPAD_CONFIG = new PublicKey(\"6s1xP3hpbAfFoNtUNF8mfHsjr2Bd97JxFJRWLbL6aHuX\");\r\n\r\nexport const IDO_ALL_PROGRAM = {\r\n  IDO_PROGRAM_ID_V1,\r\n  IDO_PROGRAM_ID_V2,\r\n  IDO_PROGRAM_ID_V3,\r\n  IDO_PROGRAM_ID_V4,\r\n};\r\n\r\nexport const ALL_PROGRAM_ID = {\r\n  AMM_V4,\r\n  AMM_STABLE,\r\n\r\n  CLMM_PROGRAM_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_LOCK_AUTH_ID,\r\n\r\n  FARM_PROGRAM_ID_V3,\r\n  FARM_PROGRAM_ID_V4,\r\n  FARM_PROGRAM_ID_V5,\r\n  FARM_PROGRAM_ID_V6,\r\n\r\n  OPEN_BOOK_PROGRAM,\r\n  SERUM_PROGRAM_ID_V3,\r\n\r\n  UTIL1216,\r\n\r\n  Router,\r\n\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  LOCK_CPMM_PROGRAM,\r\n  LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH,\r\n\r\n  LAUNCHPAD_PLATFORM,\r\n  LAUNCHPAD_CONFIG,\r\n\r\n  FEE_DESTINATION_ID,\r\n\r\n  MODEL_DATA_PUBKEY,\r\n};\r\n\r\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\r\n\r\nexport const DEVNET_PROGRAM_ID: typeof ALL_PROGRAM_ID = {\r\n  OPEN_BOOK_PROGRAM: new PublicKey(\"EoTcMgcDRTJVZDMZWBoU6rhYHZfkNTVEAfz3uUJRcYGj\"),\r\n  SERUM_PROGRAM_ID_V3: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n  AMM_V4: new PublicKey(\"DRaya7Kj3aMWQSy19kSjvmuwq9docCHofyP9kanQGaav\"),\r\n  AMM_STABLE: new PublicKey(\"DRayDdXc1NZQ9C3hRWmoSf8zK4iapgMnjdNZWrfwsP8m\"),\r\n\r\n  CLMM_PROGRAM_ID: new PublicKey(\"DRayAUgENGQBKVaX8owNhgzkEDyoHTGVEGHVJT1E9pfH\"),\r\n  CLMM_LOCK_PROGRAM_ID: new PublicKey(\"DRay25Usp3YJAi7beckgpGUC7mGJ2cR1AVPxhYfwVCUX\"),\r\n  CLMM_LOCK_AUTH_ID: new PublicKey(\"6Aoh8h2Lw2m5UGxYR8AdAL87jTWYeKoxM52mJRzfYwN\"),\r\n\r\n  CREATE_CPMM_POOL_PROGRAM: new PublicKey(\"DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb\"),\r\n  CREATE_CPMM_POOL_AUTH: new PublicKey(\"CXniRufdq5xL8t8jZAPxsPZDpuudwuJSPWnbcD5Y5Nxq\"),\r\n  CREATE_CPMM_POOL_FEE_ACC: new PublicKey(\"3oE58BKVt8KuYkGxx8zBojugnymWmBiyafWgMrnb6eYy\"),\r\n\r\n  LOCK_CPMM_PROGRAM: new PublicKey(\"DRay25Usp3YJAi7beckgpGUC7mGJ2cR1AVPxhYfwVCUX\"),\r\n  LOCK_CPMM_AUTH: new PublicKey(\"7qWVV8UY2bRJfDLP4s37YzBPKUkVB46DStYJBpYbQzu3\"),\r\n\r\n  UTIL1216: PublicKey.default,\r\n\r\n  Router: new PublicKey(\"DRaybByLpbUL57LJARs3j8BitTxVfzBg351EaMr5UTCd\"),\r\n\r\n  FARM_PROGRAM_ID_V3: new PublicKey(\"DRayWyrLmEW5KEeqs8kdTMMaBabapqagaBC7KWpGtJeZ\"),\r\n  FARM_PROGRAM_ID_V4: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n  FARM_PROGRAM_ID_V5: new PublicKey(\"DRayiCGSZgku1GTK6rXD6mVDdingXy6APAH1R6R5L2LC\"),\r\n  FARM_PROGRAM_ID_V6: new PublicKey(\"DRayzbYakXs45ELHkzH6vC3fuhQqTAnv5A68gdFuvZyZ\"),\r\n\r\n  LAUNCHPAD_PROGRAM: new PublicKey(\"DRay6fNdQ5J82H7xV6uq2aV3mNrUZ1J4PgSKsWgptcm6\"),\r\n  LAUNCHPAD_AUTH: new PublicKey(\"5xqNaZXX5eUi4p5HU4oz9i5QnwRNT2y6oN7yyn4qENeq\"),\r\n\r\n  LAUNCHPAD_PLATFORM: new PublicKey(\"2Jx4KTDrVSdWNazuGpcA8n3ZLTRGGBDxAWhuKe2Xcj2a\"),\r\n  LAUNCHPAD_CONFIG: new PublicKey(\"7ZR4zD7PYfY2XxoG1Gxcy2EgEeGYrpxrwzPuwdUBssEt\"),\r\n\r\n  FEE_DESTINATION_ID: new PublicKey(\"9y8ENuuZ3b19quffx9hQvRVygG5ky6snHfRvGpuSfeJy\"),\r\n\r\n  MODEL_DATA_PUBKEY: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n};\r\n","import { EpochInfo } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { TransferFee, TransferFeeConfig } from \"@solana/spl-token\";\r\n\r\nimport { TransferFeeDataBaseType } from \"../api/type\";\r\nimport { GetTransferAmountFee } from \"../raydium/type\";\r\n\r\nconst POINT = 10_000;\r\nexport function getTransferAmountFee(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function getTransferAmountFeeV2(\r\n  amount: BN,\r\n  _feeConfig: TransferFeeDataBaseType | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (_feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const feeConfig = {\r\n    ..._feeConfig,\r\n    olderTransferFee: {\r\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\r\n    },\r\n    newerTransferFee: {\r\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\r\n    },\r\n  };\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function minExpirationTime(\r\n  expirationTime1: number | undefined,\r\n  expirationTime2: number | undefined,\r\n): number | undefined {\r\n  if (expirationTime1 === undefined) return expirationTime2;\r\n  if (expirationTime2 === undefined) return expirationTime1;\r\n\r\n  return Math.min(expirationTime1, expirationTime2);\r\n}\r\n\r\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\r\n  const { div, mod } = bn1.divmod(bn2);\r\n\r\n  if (mod.gt(new BN(0))) {\r\n    return div.add(new BN(1));\r\n  } else {\r\n    return div;\r\n  }\r\n}\r\n\r\nexport function ceilDivBN(amountA: BN, amountB: BN): BN {\r\n  if (amountA.isZero()) return new BN(0);\r\n\r\n  const quotient = amountA.div(amountB);\r\n\r\n  if (quotient.isZero()) return new BN(1);\r\n\r\n  const remainder = amountA.mod(amountB);\r\n  if (remainder.gt(new BN(0))) {\r\n    return quotient.add(new BN(1));\r\n  }\r\n  return quotient;\r\n}\r\n\r\nexport function getTransferAmountFeeFromPre(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  slot: number,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const epoch = Math.floor(slot / 432000);\r\n  const nowFeeConfig: TransferFee =\r\n    epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * 432000 - slot) * 400) / 1000\r\n      : undefined;\r\n  const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n  const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n  return {\r\n    amount,\r\n    fee,\r\n    expirationTime,\r\n  };\r\n}\r\nexport function getTransferAmountFeeFromPost(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  slot: number,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const epoch = Math.floor(slot / 432000);\r\n  const nowFeeConfig: TransferFee =\r\n    epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * 432000 - slot) * 400) / 1000\r\n      : undefined;\r\n  if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n    const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n    return {\r\n      amount: amount.add(nowMaxFee),\r\n      fee: nowMaxFee,\r\n      expirationTime,\r\n    };\r\n  } else {\r\n    const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n    const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n    const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n    const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n    return {\r\n      amount: TAmount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\n\r\nimport { tryParsePublicKey } from \"./pubKey\";\r\n\r\nexport async function sleep(ms: number): Promise<void> {\r\n  new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function getTimestamp(): number {\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function notInnerObject(v: unknown): v is Record<string, any> {\r\n  return (\r\n    typeof v === \"object\" &&\r\n    v !== null &&\r\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\r\n  );\r\n}\r\n\r\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\r\n  // @ts-expect-error no need type for inner code\r\n  return typeof jsonInfo === \"string\"\r\n    ? tryParsePublicKey(jsonInfo)\r\n    : Array.isArray(jsonInfo)\r\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\r\n    : notInnerObject(jsonInfo)\r\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\r\n    : jsonInfo;\r\n}\r\n","import BN from \"bn.js\";\r\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\r\n","import { Keypair, PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger, Logger } from \"../common/logger\";\r\nimport { TxBuilder } from \"../common/txTool/txTool\";\r\n\r\nimport { Raydium } from \"./\";\r\nimport { Owner } from \"@/common\";\r\n\r\nexport interface ModuleBaseProps {\r\n  scope: Raydium;\r\n  moduleName: string;\r\n}\r\n\r\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\r\n  args\r\n    .map((arg) => {\r\n      try {\r\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\r\n      } catch {\r\n        return arg;\r\n      }\r\n    })\r\n    .join(\", \");\r\nexport default class ModuleBase {\r\n  public scope: Raydium;\r\n  private disabled = false;\r\n  protected logger: Logger;\r\n\r\n  constructor({ scope, moduleName }: ModuleBaseProps) {\r\n    this.scope = scope;\r\n    this.logger = createLogger(moduleName);\r\n  }\r\n\r\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\r\n    this.scope.checkOwner();\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer || this.scope.ownerPubKey,\r\n      cluster: this.scope.cluster,\r\n      owner: this.scope.owner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      loopMultiTxStatus: this.scope.loopMultiTxStatus,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  protected createSniperTxBuilder(owner: Keypair, feePayer: PublicKey): TxBuilder {\r\n    const sniperOwner = new Owner(owner);\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer,\r\n      cluster: this.scope.cluster,\r\n      owner: sniperOwner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      loopMultiTxStatus: this.scope.loopMultiTxStatus,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.debug(joinMsg(args));\r\n  }\r\n\r\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.info(joinMsg(args));\r\n  }\r\n\r\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\r\n    const message = joinMsg(args);\r\n    throw new Error(message);\r\n  }\r\n\r\n  public checkDisabled(): void {\r\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"../../api/type\";\r\nimport {\r\n  CLMM_LOCK_AUTH_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_PROGRAM_ID,\r\n  InstructionType,\r\n  WSOLMint,\r\n  fetchMultipleMintInfos,\r\n  getATAAddress,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n} from \"@/common\";\r\nimport {\r\n  AccountLayout,\r\n  createAssociatedTokenAccountIdempotentInstruction,\r\n  TOKEN_2022_PROGRAM_ID,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { toApiV3Token, toFeeConfig } from \"../../raydium/token/utils\";\r\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos, TxTipConfig } from \"../../raydium/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { MakeTransaction } from \"../type\";\r\nimport { ClmmInstrument } from \"./instrument\";\r\nimport {\r\n  ClmmConfigLayout,\r\n  ClmmPositionLayout,\r\n  LockClPositionLayoutV2,\r\n  OperationLayout,\r\n  PoolInfoLayout,\r\n  PositionInfoLayout,\r\n} from \"./layout\";\r\nimport {\r\n  ClmmParsedRpcData,\r\n  ClosePositionExtInfo,\r\n  CollectRewardParams,\r\n  CollectRewardsParams,\r\n  ComputeClmmPoolInfo,\r\n  CreateConcentratedPool,\r\n  DecreaseLiquidity,\r\n  HarvestAllRewardsParams,\r\n  HarvestLockPosition,\r\n  IncreasePositionFromBase,\r\n  IncreasePositionFromLiquidity,\r\n  InitRewardExtInfo,\r\n  InitRewardParams,\r\n  InitRewardsParams,\r\n  LockPosition,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBase,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidity,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  SetRewardParams,\r\n  SetRewardsParams,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport { MAX_SQRT_PRICE_X64, MIN_SQRT_PRICE_X64, mockV3CreatePoolInfo, ZERO } from \"./utils/constants\";\r\nimport { MathUtil, SqrtPriceMath } from \"./utils/math\";\r\nimport {\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaTickArrayAddress,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaExBitmapAccount,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils, clmmComputeInfoToApiInfo } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\n\r\nexport class Clmm extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async getClmmPoolKeys(poolId: string): Promise<ClmmKeys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as ClmmKeys[])[0];\r\n  }\r\n\r\n  public async createPool<T extends TxVersion>(\r\n    props: CreateConcentratedPool<T>,\r\n  ): Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>> {\r\n    const {\r\n      programId,\r\n      owner = this.scope.owner?.publicKey || PublicKey.default,\r\n      mint1,\r\n      mint2,\r\n      ammConfig,\r\n      initialPrice,\r\n      computeBudgetConfig,\r\n      forerunCreate,\r\n      getObserveState,\r\n      txVersion,\r\n      txTipConfig,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const [mintA, mintB, initPrice] = new BN(new PublicKey(mint1.address).toBuffer()).gt(\r\n      new BN(new PublicKey(mint2.address).toBuffer()),\r\n    )\r\n      ? [mint2, mint1, new Decimal(1).div(initialPrice)]\r\n      : [mint1, mint2, initialPrice];\r\n\r\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\r\n\r\n    const extendMintAccount: PublicKey[] = [];\r\n    const fetchAccounts: PublicKey[] = [];\r\n    if (mintA.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintA.address)).publicKey);\r\n    if (mintB.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintB.address)).publicKey);\r\n    const extMintRes = await this.scope.connection.getMultipleAccountsInfo(fetchAccounts);\r\n\r\n    extMintRes.forEach((r, idx) => {\r\n      if (r) extendMintAccount.push(fetchAccounts[idx]);\r\n    });\r\n\r\n    const insInfo = await ClmmInstrument.createPoolInstructions({\r\n      connection: this.scope.connection,\r\n      programId,\r\n      owner,\r\n      mintA,\r\n      mintB,\r\n      ammConfigId: ammConfig.id,\r\n      initialPriceX64,\r\n      forerunCreate: !getObserveState && forerunCreate,\r\n      extendMintAccount,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{\r\n      mockPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n      address: ClmmKeys;\r\n      forerunCreate?: boolean;\r\n    }>({\r\n      txVersion,\r\n      extInfo: {\r\n        address: {\r\n          ...insInfo.address,\r\n          observationId: insInfo.address.observationId.toBase58(),\r\n          exBitmapAccount: insInfo.address.exBitmapAccount.toBase58(),\r\n          programId: programId.toString(),\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          openTime: \"0\",\r\n          vault: { A: insInfo.address.mintAVault.toString(), B: insInfo.address.mintBVault.toString() },\r\n          rewardInfos: [],\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        },\r\n        mockPoolInfo: {\r\n          type: \"Concentrated\",\r\n          rewardDefaultPoolInfos: \"Clmm\",\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          feeRate: ammConfig.tradeFeeRate,\r\n          openTime: \"0\",\r\n          programId: programId.toString(),\r\n          price: initPrice.toNumber(),\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          burnPercent: 0,\r\n          ...mockV3CreatePoolInfo,\r\n        },\r\n        forerunCreate,\r\n      },\r\n    }) as Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>>;\r\n  }\r\n\r\n  public async openPositionFromBase<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    getEphemeralSigners,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: OpenPositionFromBase<T>): Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>> {\r\n    if (this.scope.availability.addConcentratedPosition === false)\r\n      this.logAndCreateError(\"add position feature disabled in your region\");\r\n\r\n    this.scope.checkOwner();\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const [amountA, amountB] = base === \"MintA\" ? [baseAmount, otherAmountMax] : [otherAmountMax, baseAmount];\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountA,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountB,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", {\r\n        ownerTokenAccountA: ownerTokenAccountA?.toBase58(),\r\n        ownerTokenAccountB: ownerTokenAccountB?.toBase58(),\r\n      });\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n    const insInfo = await ClmmInstrument.openPositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        ...ownerInfo,\r\n        feePayer: this.scope.ownerPubKey,\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromBaseExtInfo>({\r\n      txVersion,\r\n      extInfo: { ...insInfo.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>>;\r\n  }\r\n\r\n  public async openPositionFromLiquidity<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n    feePayer,\r\n  }: OpenPositionFromLiquidity<T>): Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>> {\r\n    if (this.scope.availability.createConcentratedPosition === false)\r\n      this.logAndCreateError(\"open position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountMaxA,\r\n              }\r\n            : undefined,\r\n\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountMaxB,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (ownerTokenAccountA === undefined || ownerTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n\r\n    const makeOpenPositionInstructions = await ClmmInstrument.openPositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n    txBuilder.addInstruction(makeOpenPositionInstructions);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: makeOpenPositionInstructions.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromLiquidity<T extends TxVersion>(\r\n    props: IncreasePositionFromLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      liquidity,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountMaxA,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountMaxB,\r\n              }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.increasePositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromBase<T extends TxVersion>(\r\n    props: IncreasePositionFromBase<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      ownerPosition,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || (base === \"MintA\" ? baseAmount : otherAmountMax).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || (base === \"MintA\" ? otherAmountMax : baseAmount).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n              }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const ins = ClmmInstrument.increasePositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async decreaseLiquidity<T extends TxVersion>(\r\n    props: DecreaseLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo & Partial<ClosePositionExtInfo>>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      ownerInfo,\r\n      amountMinA,\r\n      amountMinB,\r\n      liquidity,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount: PublicKey | undefined;\r\n\r\n      if (itemReward.mint.address === poolInfo.mintA.address) ownerRewardAccount = ownerTokenAccountA;\r\n      else if (itemReward.mint.address === poolInfo.mintB.address) ownerRewardAccount = ownerTokenAccountB;\r\n      else {\r\n        const { account: _ownerRewardAccount, instructionParams: ownerRewardAccountInstructions } =\r\n          await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            createInfo: {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n        ownerRewardAccount = _ownerRewardAccount;\r\n        ownerRewardAccountInstructions && txBuilder.addInstruction(ownerRewardAccountInstructions);\r\n      }\r\n\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\r\n        \"cannot found target token accounts\",\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccountRawInfos,\r\n      );\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const nft2022 = (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(\r\n      TOKEN_2022_PROGRAM_ID,\r\n    );\r\n    const decreaseInsInfo = await ClmmInstrument.decreaseLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n        rewardAccounts,\r\n      },\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: decreaseInsInfo.instructions,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n    });\r\n\r\n    let extInfo = { ...decreaseInsInfo.address };\r\n    if (ownerInfo.closePosition) {\r\n      const closeInsInfo = await ClmmInstrument.closePositionInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: { wallet: this.scope.ownerPubKey },\r\n        ownerPosition,\r\n        nft2022,\r\n      });\r\n      txBuilder.addInstruction({\r\n        endInstructions: closeInsInfo.instructions,\r\n        endInstructionTypes: closeInsInfo.instructionTypes,\r\n      });\r\n      extInfo = { ...extInfo, ...closeInsInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: extInfo },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async lockPosition<T extends TxVersion>(props: LockPosition<T>): Promise<MakeTxData<ClmmLockAddress>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      poolProgramId = CLMM_PROGRAM_ID,\r\n      ownerPosition,\r\n      payer,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      getEphemeralSigners,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const lockIns = await ClmmInstrument.makeLockPositions({\r\n      programId,\r\n      authProgramId,\r\n      poolProgramId,\r\n      wallet: this.scope.ownerPubKey,\r\n      payer: payer ?? this.scope.ownerPubKey,\r\n      nftMint: ownerPosition.nftMint,\r\n      getEphemeralSigners,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n\r\n    txBuilder.addInstruction(lockIns);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: lockIns.address,\r\n    }) as Promise<MakeTxData<ClmmLockAddress>>;\r\n  }\r\n\r\n  public async harvestLockPosition<T extends TxVersion>(props: HarvestLockPosition<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      clmmProgram = CLMM_PROGRAM_ID,\r\n      poolKeys: propPoolKeys,\r\n      lockData,\r\n      ownerInfo = { useSOLBalance: true },\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(lockData.poolId.toString()));\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const positionData = await this.scope.connection.getAccountInfo(lockData.positionId);\r\n    if (!positionData) this.logger.logWithError(\"position not found\", lockData.positionId);\r\n    const position = PositionInfoLayout.decode(positionData!.data);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintA.programId,\r\n        mint: new PublicKey(poolKeys.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintB.programId,\r\n        mint: new PublicKey(poolKeys.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolKeys.rewardInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n      if (!ownerRewardAccount) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(itemReward.mint.programId),\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n        });\r\n        ownerRewardAccount = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockData.lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(this.scope.ownerPubKey, lockData.lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickLower,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickUpper,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayLowerStartIndex,\r\n    );\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayUpperStartIndex,\r\n    );\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      position.tickLower,\r\n      position.tickUpper,\r\n    );\r\n\r\n    const rewardAccountsFullInfo: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n      rewardAccountsFullInfo.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const harvestLockIns = await ClmmInstrument.harvestLockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      lockPositionId,\r\n      clmmProgram,\r\n      lockOwner: this.scope.ownerPubKey,\r\n      lockNftMint: lockData.lockNftMint,\r\n      lockNftAccount,\r\n      positionNftAccount: lockData.nftAccount,\r\n      positionId: lockData.positionId,\r\n      poolId: lockData.poolId,\r\n      protocolPosition,\r\n      vaultA: new PublicKey(poolKeys.vault.A),\r\n      vaultB: new PublicKey(poolKeys.vault.B),\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      userVaultA: ownerTokenAccountA!,\r\n      userVaultB: ownerTokenAccountB!,\r\n      mintA: new PublicKey(poolKeys.mintA.address),\r\n      mintB: new PublicKey(poolKeys.mintB.address),\r\n      rewardAccounts: rewardAccountsFullInfo,\r\n      exTickArrayBitmap: getPdaExBitmapAccount(clmmProgram, lockData.poolId).publicKey,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [harvestLockIns],\r\n      instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async closePosition<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerPosition,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    txVersion: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T, ClosePositionExtInfo>> {\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.closePositionInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: { wallet: this.scope.ownerPubKey },\r\n      ownerPosition,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.addInstruction(ins).versionBuild<ClosePositionExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ClosePositionExtInfo>>;\r\n  }\r\n\r\n  public async initReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardParams<T>): Promise<MakeTxData<T, InitRewardExtInfo>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const rewardMintUseSOLBalance =\r\n      ownerInfo.useSOLBalance && rewardInfo.mint.address.toString() === WSOLMint.toString();\r\n    const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo.mint.address),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                  ? _baseRewardAmount.toFixed(0)\r\n                  : _baseRewardAmount.add(1).toFixed(0),\r\n              ),\r\n            }\r\n          : undefined,\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.initRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        programId: new PublicKey(rewardInfo.mint.programId),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<InitRewardExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, InitRewardExtInfo>>;\r\n  }\r\n\r\n  public async initRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n    }\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardInfo of rewardInfos) {\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: new BN(\r\n                  new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                    ? _baseRewardAmount.toFixed(0)\r\n                    : _baseRewardAmount.add(1).toFixed(0),\r\n                ),\r\n              }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.initRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          programId: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n      txBuilder.addInstruction(insInfo);\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: rewardInfo.programId,\r\n        mint: rewardInfo.mint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                  rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n                )\r\n                  ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                  : rewardInfo.perSecond\r\n                      .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                      .add(1)\r\n                      .toFixed(0),\r\n              ),\r\n            }\r\n          : undefined,\r\n\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.setRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        mint: rewardInfo.mint,\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: new BN(\r\n                  new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                    rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n                  )\r\n                    ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                    : rewardInfo.perSecond\r\n                        .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                        .add(1)\r\n                        .toFixed(0),\r\n                ),\r\n              }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.setRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMint,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: CollectRewardParams<T>): Promise<MakeTxData<{ address: Record<string, PublicKey> }>> {\r\n    const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n    if (!rewardInfo) this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo!.mint.programId),\r\n        mint: rewardMint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.collectRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardMint,\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<{ address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectRewards({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMints,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CollectRewardsParams): Promise<MakeTransaction> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardMint of rewardMints) {\r\n      const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n      if (!rewardInfo) {\r\n        this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n        continue;\r\n      }\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: rewardMint,\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n      const insInfo = ClmmInstrument.collectRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n\r\n        rewardMint,\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = { ...address, ...insInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address });\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    inputMint: string | PublicKey;\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = inputMint.toString() === poolInfo.mintA.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = baseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? amountIn : 0,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? 0 : amountIn,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        inputMint: new PublicKey(inputMint),\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swapBaseOut<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    outputMint: string | PublicKey;\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = outputMint.toString() === poolInfo.mintB.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 =\r\n        outputMint.toString() === poolInfo.mintB.address\r\n          ? MIN_SQRT_PRICE_X64.add(new BN(1))\r\n          : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? amountInMax : 0,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? 0 : amountInMax,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseOutInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        outputMint: new PublicKey(outputMint),\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>({\r\n    allPoolInfo,\r\n    allPositions,\r\n    lockInfo,\r\n    ownerInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    programId,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n    lockProgram = CLMM_LOCK_PROGRAM_ID,\r\n    lockAuth = CLMM_LOCK_AUTH_ID,\r\n    clmmProgram = CLMM_PROGRAM_ID,\r\n  }: HarvestAllRewardsParams<T>): Promise<MakeMultiTxData<T>> {\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccountRawInfos) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, programId).publicKey;\r\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      } else {\r\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      }\r\n    }\r\n    const allNftMints = Object.values(allPositions)\r\n      .flat()\r\n      .map((p) => p.nftMint);\r\n\r\n    const mintData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      allNftMints.map((n) => ({ pubkey: n })),\r\n    );\r\n    const record: Record<string, PublicKey | null> = {};\r\n    mintData.forEach((data) => {\r\n      record[data.pubkey.toBase58()] = data?.accountInfo?.owner ?? null;\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    for (const itemInfo of Object.values(allPoolInfo)) {\r\n      if (allPositions[itemInfo.id] === undefined) continue;\r\n      if (\r\n        !allPositions[itemInfo.id].find(\r\n          (i) => !i.liquidity.isZero() || i.rewardInfos.find((ii) => !ii.rewardAmountOwed.isZero()),\r\n        )\r\n      )\r\n        continue;\r\n\r\n      const poolInfo = itemInfo;\r\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n      let ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.address];\r\n      if (!ownerTokenAccountA) {\r\n        if (mintAUseSOLBalance) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: poolInfo.mintA.programId,\r\n            mint: new PublicKey(poolInfo.mintA.address),\r\n            notUseTokenAccount: mintAUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !mintAUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n          ownerTokenAccountA = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        } else {\r\n          const mint = new PublicKey(poolInfo.mintA.address);\r\n          ownerTokenAccountA = this.scope.account.getAssociatedTokenAccount(\r\n            mint,\r\n            new PublicKey(poolInfo.mintA.programId),\r\n          );\r\n          txBuilder.addInstruction({\r\n            instructions: [\r\n              createAssociatedTokenAccountIdempotentInstruction(\r\n                this.scope.ownerPubKey,\r\n                ownerTokenAccountA,\r\n                this.scope.ownerPubKey,\r\n                mint,\r\n                new PublicKey(poolInfo.mintA.programId),\r\n              ),\r\n            ],\r\n          });\r\n        }\r\n      }\r\n\r\n      let ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.address];\r\n      if (!ownerTokenAccountB) {\r\n        if (mintBUseSOLBalance) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: poolInfo.mintB.programId,\r\n            mint: new PublicKey(poolInfo.mintB.address),\r\n            notUseTokenAccount: mintBUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !mintBUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n          ownerTokenAccountB = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        } else {\r\n          const mint = new PublicKey(poolInfo.mintB.address);\r\n          ownerTokenAccountB = this.scope.account.getAssociatedTokenAccount(\r\n            mint,\r\n            new PublicKey(poolInfo.mintB.programId),\r\n          );\r\n          txBuilder.addInstruction({\r\n            instructions: [\r\n              createAssociatedTokenAccountIdempotentInstruction(\r\n                this.scope.ownerPubKey,\r\n                ownerTokenAccountB,\r\n                this.scope.ownerPubKey,\r\n                mint,\r\n                new PublicKey(poolInfo.mintB.programId),\r\n              ),\r\n            ],\r\n          });\r\n        }\r\n      }\r\n\r\n      ownerMintToAccount[poolInfo.mintA.address] = ownerTokenAccountA;\r\n      ownerMintToAccount[poolInfo.mintB.address] = ownerTokenAccountB;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n\r\n      for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          });\r\n          ownerRewardAccount = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount!);\r\n      }\r\n\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n\r\n      const rewardAccountsFullInfo: {\r\n        poolRewardVault: PublicKey;\r\n        ownerRewardVault: PublicKey;\r\n        rewardMint: PublicKey;\r\n      }[] = [];\r\n      for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n        rewardAccountsFullInfo.push({\r\n          poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n          ownerRewardVault: rewardAccounts[i],\r\n          rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n        });\r\n      }\r\n\r\n      for (const itemPosition of allPositions[itemInfo.id]) {\r\n        const lockData = lockInfo?.[itemInfo.id]?.[itemPosition.nftMint.toBase58()];\r\n        if (lockData) {\r\n          const lockNftAccount = getATAAddress(\r\n            this.scope.ownerPubKey,\r\n            lockData.lockNftMint,\r\n            TOKEN_PROGRAM_ID,\r\n          ).publicKey;\r\n\r\n          const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickLower,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickUpper,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayLowerStartIndex,\r\n          );\r\n          const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayUpperStartIndex,\r\n          );\r\n          const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            itemPosition.tickLower,\r\n            itemPosition.tickUpper,\r\n          );\r\n          const lockPositionId = getPdaLockClPositionIdV2(lockProgram, lockData.lockNftMint).publicKey;\r\n          const harvestLockIns = ClmmInstrument.harvestLockPositionInstructionV2({\r\n            programId: lockProgram,\r\n            auth: lockAuth,\r\n            lockPositionId,\r\n            clmmProgram,\r\n            lockOwner: this.scope.ownerPubKey,\r\n            lockNftMint: lockData.lockNftMint,\r\n            lockNftAccount,\r\n            positionNftAccount: lockData.nftAccount,\r\n            positionId: lockData.positionId,\r\n            poolId: lockData.poolId,\r\n            protocolPosition,\r\n            vaultA: new PublicKey(poolKeys.vault.A),\r\n            vaultB: new PublicKey(poolKeys.vault.B),\r\n            tickArrayLower,\r\n            tickArrayUpper,\r\n            userVaultA: ownerTokenAccountA!,\r\n            userVaultB: ownerTokenAccountB!,\r\n            mintA: new PublicKey(poolKeys.mintA.address),\r\n            mintB: new PublicKey(poolKeys.mintB.address),\r\n            rewardAccounts: rewardAccountsFullInfo,\r\n            exTickArrayBitmap: getPdaExBitmapAccount(clmmProgram, lockData.poolId).publicKey,\r\n          });\r\n          txBuilder.addInstruction({\r\n            instructions: [harvestLockIns],\r\n            instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n            lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n          });\r\n        } else {\r\n          const insData = ClmmInstrument.decreaseLiquidityInstructions({\r\n            poolInfo,\r\n            poolKeys,\r\n            ownerPosition: itemPosition,\r\n            ownerInfo: {\r\n              wallet: this.scope.ownerPubKey,\r\n              tokenAccountA: ownerTokenAccountA,\r\n              tokenAccountB: ownerTokenAccountB,\r\n              rewardAccounts,\r\n            },\r\n            liquidity: new BN(0),\r\n            amountMinA: new BN(0),\r\n            amountMinB: new BN(0),\r\n            nft2022: record[itemPosition.nftMint.toBase58()]?.equals(TOKEN_2022_PROGRAM_ID),\r\n          });\r\n          txBuilder.addInstruction(insData);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async getWhiteListMint({ programId }: { programId: PublicKey }): Promise<PublicKey[]> {\r\n    const accountInfo = await this.scope.connection.getAccountInfo(getPdaOperationAccount(programId).publicKey);\r\n    if (!accountInfo) return [];\r\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data);\r\n    return whitelistMintsInfo.whitelistMints.filter((i) => !i.equals(PublicKey.default));\r\n  }\r\n\r\n  public async getOwnerPositionInfo({\r\n    programId = CLMM_PROGRAM_ID,\r\n  }: {\r\n    programId?: string | PublicKey;\r\n  }): Promise<ReturnType<typeof PositionInfoLayout.decode>[]> {\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\r\n    const allPositionKey = balanceMints.map(\r\n      (acc) => getPdaPersonalPositionAddress(new PublicKey(programId), acc.accountInfo.mint).publicKey,\r\n    );\r\n\r\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\r\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\r\n    accountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = PositionInfoLayout.decode(positionRes.data);\r\n      allPosition.push(position);\r\n    });\r\n\r\n    return allPosition;\r\n  }\r\n\r\n  public async getOwnerLockedPositionInfo({\r\n    programId = CLMM_LOCK_PROGRAM_ID,\r\n  }: {\r\n    programId?: string | PublicKey;\r\n  }): Promise<\r\n    {\r\n      position: ReturnType<typeof PositionInfoLayout.decode>;\r\n      lockInfo: ReturnType<typeof LockClPositionLayoutV2.decode>;\r\n    }[]\r\n  > {\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\r\n    const allPositionKey = balanceMints.map(\r\n      (acc) => getPdaLockClPositionIdV2(new PublicKey(programId), acc.accountInfo.mint).publicKey,\r\n    );\r\n\r\n    const lockAccountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\r\n    const allLockPosition: ReturnType<typeof LockClPositionLayoutV2.decode>[] = [];\r\n    lockAccountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = LockClPositionLayoutV2.decode(positionRes.data);\r\n      allLockPosition.push(position);\r\n    });\r\n\r\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allLockPosition.map((p) => p.positionId));\r\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\r\n    accountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = PositionInfoLayout.decode(positionRes.data);\r\n      allPosition.push(position);\r\n    });\r\n\r\n    return allLockPosition.map((data, idx) => ({\r\n      position: allPosition[idx],\r\n      lockInfo: data,\r\n    }));\r\n  }\r\n\r\n  public async getRpcClmmPoolInfo({ poolId }: { poolId: string | PublicKey }): Promise<ClmmParsedRpcData> {\r\n    return (await this.getRpcClmmPoolInfos({ poolIds: [poolId] }))[String(poolId)];\r\n  }\r\n\r\n  public async getRpcClmmPoolInfos({\r\n    poolIds,\r\n    config,\r\n  }: {\r\n    poolIds: (string | PublicKey)[];\r\n    config?: { batchRequest?: boolean; chunkCount?: number };\r\n  }): Promise<{\r\n    [poolId: string]: ClmmParsedRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n    const returnData: {\r\n      [poolId: string]: ClmmParsedRpcData;\r\n    } = {};\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = PoolInfoLayout.decode(item.accountInfo.data);\r\n      const currentPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n        rpc.sqrtPriceX64,\r\n        rpc.mintDecimalsA,\r\n        rpc.mintDecimalsB,\r\n      ).toNumber();\r\n\r\n      returnData[String(poolIds[i])] = {\r\n        ...rpc,\r\n        currentPrice,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  public async getComputeClmmPoolInfos({\r\n    clmmPoolsRpcInfo,\r\n    mintInfos,\r\n  }: {\r\n    clmmPoolsRpcInfo: Record<\r\n      string,\r\n      ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number; programId: PublicKey }\r\n    >;\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n  }): Promise<{\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const configSet = new Set(Object.keys(clmmPoolsRpcInfo).map((p) => clmmPoolsRpcInfo[p].ammConfig.toBase58()));\r\n    const res = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      Array.from(configSet).map((s) => ({ pubkey: new PublicKey(s) })),\r\n    );\r\n    const clmmConfigs: Record<string, ReturnType<typeof ClmmConfigLayout.decode>> = {};\r\n    res.forEach((acc) => {\r\n      if (!acc.accountInfo) return;\r\n      clmmConfigs[acc.pubkey.toBase58()] = ClmmConfigLayout.decode(acc.accountInfo.data);\r\n    });\r\n    const computeClmmPoolInfo = await PoolUtils.fetchComputeMultipleClmmInfo({\r\n      connection: this.scope.connection,\r\n      rpcDataMap: clmmPoolsRpcInfo,\r\n      poolList: Object.keys(clmmPoolsRpcInfo).map((poolId) => {\r\n        const [mintA, mintB] = [clmmPoolsRpcInfo[poolId].mintA.toBase58(), clmmPoolsRpcInfo[poolId].mintB.toBase58()];\r\n        return {\r\n          id: poolId,\r\n          programId: clmmPoolsRpcInfo[poolId].programId.toBase58(),\r\n          mintA: toApiV3Token({\r\n            address: mintA,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsA,\r\n            programId: mintInfos[mintA].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          mintB: toApiV3Token({\r\n            address: mintB,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsB,\r\n            programId: mintInfos[mintB].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          price: clmmPoolsRpcInfo[poolId].currentPrice,\r\n          config: {\r\n            ...clmmConfigs[clmmPoolsRpcInfo[poolId].ammConfig.toBase58()],\r\n            id: clmmPoolsRpcInfo[poolId].ammConfig.toBase58(),\r\n\r\n            fundFeeRate: 0,\r\n            description: \"\",\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        };\r\n      }),\r\n    });\r\n\r\n    const computePoolTickData = await PoolUtils.fetchMultiplePoolTickArrays({\r\n      connection: this.scope.connection,\r\n      poolKeys: Object.values(computeClmmPoolInfo),\r\n    });\r\n\r\n    return {\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n    };\r\n  }\r\n\r\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    computePoolInfo: ComputeClmmPoolInfo;\r\n    tickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const rpcData = await this.getRpcClmmPoolInfo({ poolId });\r\n\r\n    const mintSet = new Set([rpcData.mintA.toBase58(), rpcData.mintB.toBase58()]);\r\n\r\n    const mintInfos = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo: { [poolId]: rpcData },\r\n      mintInfos,\r\n    });\r\n    const vaultData = await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, [\r\n      { pubkey: rpcData.vaultA },\r\n      { pubkey: rpcData.vaultB },\r\n    ]);\r\n\r\n    const poolInfo = clmmComputeInfoToApiInfo(computeClmmPoolInfo[poolId]);\r\n\r\n    if (!vaultData[0].accountInfo || !vaultData[1].accountInfo) throw new Error(\"pool vault data not found\");\r\n    poolInfo.mintAmountA = Number(AccountLayout.decode(vaultData[0].accountInfo.data).amount.toString());\r\n    poolInfo.mintAmountB = Number(AccountLayout.decode(vaultData[1].accountInfo?.data).amount.toString());\r\n\r\n    const poolKeys: ClmmKeys = {\r\n      ...computeClmmPoolInfo[poolId],\r\n      exBitmapAccount: computeClmmPoolInfo[poolId].exBitmapAccount.toBase58(),\r\n      observationId: computeClmmPoolInfo[poolId].observationId.toBase58(),\r\n      id: poolId,\r\n      programId: rpcData.programId.toBase58(),\r\n      openTime: rpcData.startTime.toString(),\r\n      vault: {\r\n        A: rpcData.vaultA.toBase58(),\r\n        B: rpcData.vaultB.toBase58(),\r\n      },\r\n      config: poolInfo.config,\r\n      rewardInfos: computeClmmPoolInfo[poolId].rewardInfos\r\n        .filter((r) => !r.tokenVault.equals(PublicKey.default))\r\n        .map((r) => ({\r\n          mint: toApiV3Token({ address: r.tokenMint.toBase58(), programId: TOKEN_PROGRAM_ID.toBase58(), decimals: 10 }),\r\n          vault: r.tokenVault.toBase58(),\r\n        })),\r\n    };\r\n    return { poolInfo, poolKeys, computePoolInfo: computeClmmPoolInfo[poolId], tickData: computePoolTickData };\r\n  }\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { MintLayout, RawMint, TOKEN_PROGRAM_ID, TransferFeeConfigLayout } from \"@solana/spl-token\";\r\nimport { BigNumberish } from \"@/common/bignumber\";\r\nimport { Token, TokenAmount } from \"../../module\";\r\nimport { SOL_INFO, TOKEN_WSOL } from \"./constant\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nimport { ApiV3Token } from \"../../api\";\r\nimport { solToWSol } from \"@/common\";\r\n\r\nexport const parseTokenInfo = async ({\r\n  connection,\r\n  mint,\r\n}: {\r\n  connection: Connection;\r\n  mint: PublicKey | string;\r\n}): Promise<RawMint | undefined> => {\r\n  const accountData = await connection.getAccountInfo(new PublicKey(mint));\r\n  if (!accountData || accountData.data.length !== MintLayout.span) return;\r\n  const tokenInfo = MintLayout.decode(accountData.data);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n  return tokenInfo;\r\n};\r\n\r\nexport const toTokenInfo = ({\r\n  mint,\r\n  decimals,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  logoURI = \"\",\r\n  priority = 3,\r\n}: {\r\n  mint: PublicKey;\r\n  decimals: number;\r\n  programId?: PublicKey | string;\r\n  priority?: number;\r\n  logoURI?: string;\r\n}): TokenInfo => {\r\n  const pubStr = mint.toBase58().substring(0, 6);\r\n  return {\r\n    address: mint.toBase58(),\r\n    decimals,\r\n    symbol: pubStr,\r\n    logoURI,\r\n    extensions: {},\r\n    chainId: 101,\r\n    programId: programId.toString(),\r\n    name: pubStr,\r\n    tags: [],\r\n    priority,\r\n  };\r\n};\r\n\r\nexport const toToken = (props: Omit<TokenInfo, \"priority\">): Token =>\r\n  new Token({\r\n    mint: props.address,\r\n    decimals: props.decimals,\r\n    symbol: props.symbol,\r\n    name: props.name,\r\n  });\r\n\r\nexport const toTokenAmount = ({\r\n  amount,\r\n  isRaw,\r\n  name,\r\n  ...props\r\n}: Omit<TokenInfo, \"priority\"> & {\r\n  amount: BigNumberish;\r\n  isRaw?: boolean;\r\n  name?: string;\r\n}): TokenAmount =>\r\n  new TokenAmount(\r\n    new Token({\r\n      mint: solToWSol(props.address).toBase58(),\r\n      decimals: props.decimals,\r\n      symbol: props.symbol,\r\n      name,\r\n    }),\r\n    amount,\r\n    isRaw,\r\n    name,\r\n  );\r\n\r\nexport function solToWSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === SOL_INFO.address) return TOKEN_WSOL as T;\r\n  return token;\r\n}\r\n\r\nexport function wSolToSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === TOKEN_WSOL.address) return SOL_INFO as T;\r\n  return token;\r\n}\r\n\r\nexport const toApiV3Token = ({\r\n  address,\r\n  programId,\r\n  decimals,\r\n  ...props\r\n}: {\r\n  address: string;\r\n  programId: string;\r\n  decimals: number;\r\n} & Partial<ApiV3Token>): ApiV3Token => ({\r\n  chainId: 101,\r\n  address: solToWSol(address).toBase58(),\r\n  programId,\r\n  logoURI: \"\",\r\n  symbol: \"\",\r\n  name: \"\",\r\n  decimals,\r\n  tags: [],\r\n  extensions: props.extensions || {},\r\n  ...props,\r\n});\r\n\r\nexport const toFeeConfig = (\r\n  config?: ReturnType<typeof TransferFeeConfigLayout.decode> | undefined | null,\r\n): ApiV3Token[\"extensions\"][\"feeConfig\"] | undefined =>\r\n  config\r\n    ? {\r\n        ...config,\r\n        transferFeeConfigAuthority: config.transferFeeConfigAuthority.toBase58(),\r\n        withdrawWithheldAuthority: config.withdrawWithheldAuthority.toBase58(),\r\n        withheldAmount: config.withheldAmount.toString(),\r\n        olderTransferFee: {\r\n          ...config.olderTransferFee,\r\n          epoch: config.olderTransferFee.epoch.toString(),\r\n          maximumFee: config.olderTransferFee.maximumFee.toString(),\r\n        },\r\n        newerTransferFee: {\r\n          ...config.newerTransferFee,\r\n          epoch: config.newerTransferFee.epoch.toString(),\r\n          maximumFee: config.newerTransferFee.maximumFee.toString(),\r\n        },\r\n      }\r\n    : undefined;\r\n","import { Connection, Keypair, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token, ClmmKeys } from \"@/api/type\";\r\nimport {\r\n  InstructionType,\r\n  MEMO_PROGRAM_ID,\r\n  MEMO_PROGRAM_ID2,\r\n  METADATA_PROGRAM_ID,\r\n  RENT_PROGRAM_ID,\r\n  createLogger,\r\n  getATAAddress,\r\n  parseBigNumberish,\r\n} from \"@/common\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { bool, s32, struct, u128, u64, u8 } from \"@/marshmallow\";\r\nimport { ClmmPositionLayout, ObservationInfoLayout } from \"./layout\";\r\nimport {\r\n  ClmmPoolPersonalPosition,\r\n  ClosePositionExtInfo,\r\n  InitRewardExtInfo,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport {\r\n  getPdaExBitmapAccount,\r\n  getPdaLockPositionId,\r\n  getPdaMetadataKey,\r\n  getPdaObservationAccount,\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaPoolId,\r\n  getPdaPoolRewardVaulId,\r\n  getPdaPoolVaultId,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaTickArrayAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\nimport { ZERO } from \"./utils/constants\";\r\nObservationInfoLayout.span; // do not delete this line\r\n\r\nconst logger = createLogger(\"Raydium_Clmm\");\r\n\r\nconst anchorDataBuf = {\r\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\r\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\r\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\r\n  openPosition: [77, 184, 74, 214, 112, 86, 241, 199],\r\n  openPositionWithTokenEx: [77, 255, 174, 82, 125, 29, 201, 46],\r\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\r\n  increaseLiquidity: [133, 29, 89, 223, 69, 238, 176, 10],\r\n  decreaseLiquidity: [58, 127, 188, 62, 79, 82, 196, 96],\r\n  swap: [43, 4, 237, 11, 26, 201, 30, 98], // [248, 198, 158, 145, 225, 117, 135, 200],\r\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\r\n};\r\n\r\nconst lockInsDataBuf = [188, 37, 179, 131, 82, 150, 84, 73];\r\nconst lockHarvestInsDataBuf = [16, 72, 250, 198, 14, 162, 212, 19];\r\n\r\ninterface CreatePoolInstruction {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  ammConfigId: PublicKey;\r\n  initialPriceX64: BN;\r\n  forerunCreate?: boolean;\r\n  extendMintAccount?: PublicKey[];\r\n}\r\n\r\nexport class ClmmInstrument {\r\n  static createPoolInstruction(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    poolCreator: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    observationId: PublicKey,\r\n    mintA: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintProgramIdA: PublicKey,\r\n    mintB: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintProgramIdB: PublicKey,\r\n    exTickArrayBitmap: PublicKey,\r\n    sqrtPriceX64: BN,\r\n    extendMintAccount?: PublicKey[],\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"sqrtPriceX64\"), u64(\"zero\")]);\r\n\r\n    const keys = [\r\n      { pubkey: poolCreator, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n      { pubkey: exTickArrayBitmap, isSigner: false, isWritable: true },\r\n      { pubkey: mintProgramIdA, isSigner: false, isWritable: false },\r\n      { pubkey: mintProgramIdB, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      ...(extendMintAccount?.map((k) => ({ pubkey: k, isSigner: false, isWritable: false })) || []),\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        sqrtPriceX64,\r\n        zero: ZERO,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async createPoolInstructions(props: CreatePoolInstruction): Promise<\r\n    ReturnTypeMakeInstructions<{\r\n      poolId: PublicKey;\r\n      observationId: PublicKey;\r\n      exBitmapAccount: PublicKey;\r\n      mintAVault: PublicKey;\r\n      mintBVault: PublicKey;\r\n    }>\r\n  > {\r\n    const { programId, owner, mintA, mintB, ammConfigId, initialPriceX64, extendMintAccount } = props;\r\n    const [mintAAddress, mintBAddress] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\r\n\r\n    const { publicKey: poolId } = getPdaPoolId(programId, ammConfigId, mintAAddress, mintBAddress);\r\n    const { publicKey: observationId } = getPdaObservationAccount(programId, poolId);\r\n    const { publicKey: mintAVault } = getPdaPoolVaultId(programId, poolId, mintAAddress);\r\n    const { publicKey: mintBVault } = getPdaPoolVaultId(programId, poolId, mintBAddress);\r\n    const exBitmapAccount = getPdaExBitmapAccount(programId, poolId).publicKey;\r\n\r\n    const ins = [\r\n      this.createPoolInstruction(\r\n        programId,\r\n        poolId,\r\n        owner,\r\n        ammConfigId,\r\n        observationId,\r\n        mintAAddress,\r\n        mintAVault,\r\n        new PublicKey(mintA.programId || TOKEN_PROGRAM_ID),\r\n        mintBAddress,\r\n        mintBVault,\r\n        new PublicKey(mintB.programId || TOKEN_PROGRAM_ID),\r\n        exBitmapAccount,\r\n        initialPriceX64,\r\n        extendMintAccount,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.CreateAccount, InstructionType.ClmmCreatePool],\r\n      address: { poolId, observationId, exBitmapAccount, mintAVault, mintBVault },\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      signers,\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n    };\r\n  }\r\n\r\n  static async openPositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromBaseExtInfo>> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromBaseInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromBaseInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromLiquidityExtInfo[\"address\"]>> {\r\n    let nftMintAccount: PublicKey;\r\n    const signers: Keypair[] = [];\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static closePositionInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n    nft2022?: boolean,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([]);\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({}, data);\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static closePositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    ownerPosition,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n    };\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ClosePositionExtInfo[\"address\"]> {\r\n    const programId = new PublicKey(poolInfo.programId);\r\n    // const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    ins.push(\r\n      this.closePositionInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        ownerPosition.nftMint,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        nft2022,\r\n      ),\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        positionNftAccount,\r\n        personalPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmClosePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        optionBaseFlag: 0,\r\n        baseFlag: false,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const ins = this.increasePositionFromLiquidityInstruction(\r\n      programId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(programId, id).publicKey\r\n        : undefined,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPoolPersonalPosition;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [\r\n        this.increasePositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          positionNftAccount,\r\n          personalPosition,\r\n          id,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        ),\r\n      ],\r\n      signers: [],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[],\r\n\r\n    liquidity: BN,\r\n    amountMinA: BN,\r\n    amountMinB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"liquidity\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMinA,\r\n        amountMinB,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMinA,\r\n    amountMinB,\r\n    programId,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n      rewardAccounts: PublicKey[];\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMinA: BN;\r\n    amountMinB: BN;\r\n    programId?: PublicKey;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [poolProgramId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, id, tickArrayUpperStartIndex);\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, programId);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolProgramId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolInfo.rewardDefaultInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: ownerInfo.rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolInfo.rewardDefaultInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    const decreaseIns = this.decreaseLiquidityInstruction(\r\n      poolProgramId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n      rewardAccounts,\r\n\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(poolProgramId, id).publicKey\r\n        : undefined,\r\n    );\r\n    ins.push(decreaseIns);\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static swapInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    inputTokenAccount: PublicKey,\r\n    outputTokenAccount: PublicKey,\r\n    inputVault: PublicKey,\r\n    outputVault: PublicKey,\r\n    inputMint: PublicKey,\r\n    outputMint: PublicKey,\r\n    tickArray: PublicKey[],\r\n    observationId: PublicKey,\r\n\r\n    amount: BN,\r\n    otherAmountThreshold: BN,\r\n    sqrtPriceLimitX64: BN,\r\n    isBaseInput: boolean,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u64(\"amount\"),\r\n      u64(\"otherAmountThreshold\"),\r\n      u128(\"sqrtPriceLimitX64\"),\r\n      bool(\"isBaseInput\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...tickArray.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: false },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: inputVault, isSigner: false, isWritable: true },\r\n      { pubkey: outputVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: inputMint, isSigner: false, isWritable: false },\r\n      { pubkey: outputMint, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        amount,\r\n        otherAmountThreshold,\r\n        sqrtPriceLimitX64,\r\n        isBaseInput,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static makeSwapBaseInInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    inputMint: PublicKey;\r\n\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const isInputMintA = poolInfo.mintA.address === inputMint.toString();\r\n\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n\r\n        isInputMintA ? mintAVault : mintBVault,\r\n        isInputMintA ? mintBVault : mintAVault,\r\n\r\n        isInputMintA ? mintA : mintB,\r\n        isInputMintA ? mintB : mintA,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        true,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseIn],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static makeSwapBaseOutInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    outputMint: PublicKey;\r\n\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n    const isInputMintA = poolInfo.mintA.address === outputMint.toBase58();\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n\r\n        isInputMintA ? mintBVault : mintAVault,\r\n        isInputMintA ? mintAVault : mintBVault,\r\n\r\n        isInputMintA ? mintB : mintA,\r\n        isInputMintA ? mintA : mintB,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        false,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseOut],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static initRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardProgramId: PublicKey,\r\n    rewardMint: PublicKey,\r\n    rewardVault: PublicKey,\r\n\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u64(\"openTime\"), u64(\"endTime\"), u128(\"emissionsPerSecondX64\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: rewardProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n        emissionsPerSecondX64,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static initRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      programId: PublicKey;\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions<InitRewardExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const poolRewardVault = getPdaPoolRewardVaulId(programId, id, rewardInfo.mint).publicKey;\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n    const ins = [\r\n      this.initRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardInfo.programId,\r\n        rewardInfo.mint,\r\n        poolRewardVault,\r\n\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { poolRewardVault, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmInitReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static setRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\"), u128(\"emissionsPerSecondX64\"), u64(\"openTime\"), u64(\"endTime\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: true },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n        emissionsPerSecondX64,\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static setRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    let rewardMint: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardInfo.mint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n        rewardMint = new PublicKey(poolKeys.rewardInfos[index].mint.address);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n\r\n    const ins = [\r\n      this.setRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint!,\r\n\r\n        rewardIndex!,\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault!, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSetReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static collectRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static collectRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardMint,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardMint: PublicKey;\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardMint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const ins = [\r\n      this.collectRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint,\r\n\r\n        rewardIndex!,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault! },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmCollectReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static async makeLockPositions({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    payer,\r\n    wallet,\r\n    nftMint,\r\n    nft2022,\r\n    getEphemeralSigners,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    wallet: PublicKey;\r\n    payer: PublicKey;\r\n    nftMint: PublicKey;\r\n    nft2022?: boolean;\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<ReturnTypeMakeInstructions<ClmmLockAddress>> {\r\n    const signers: Signer[] = [];\r\n    let lockNftMint: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      lockNftMint = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      lockNftMint = _k.publicKey;\r\n    }\r\n\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(wallet, nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(wallet, nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, nftMint);\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(wallet, lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const metadataAccount = getPdaMetadataKey(lockNftMint).publicKey;\r\n\r\n    const ins = ClmmInstrument.lockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      payer,\r\n      positionOwner: wallet,\r\n      lockOwner: wallet,\r\n      positionNftAccount,\r\n      positionId,\r\n      lockPositionId,\r\n      lockNftMint,\r\n      lockNftAccount,\r\n      metadataAccount,\r\n      withMetadata: true,\r\n      nft2022,\r\n\r\n      positionNftMint: nftMint,\r\n      authPositionNftAccount: getATAAddress(authProgramId, nftMint, nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID)\r\n        .publicKey,\r\n      positionNftProgram: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n    });\r\n\r\n    return {\r\n      address: {\r\n        positionId,\r\n        lockPositionId,\r\n        lockNftAccount,\r\n        lockNftMint,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmLockPosition],\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static lockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    payer,\r\n    positionOwner,\r\n    lockOwner,\r\n    positionNftAccount,\r\n    positionId,\r\n    positionNftMint,\r\n    authPositionNftAccount,\r\n    positionNftProgram,\r\n    lockPositionId,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    metadataAccount,\r\n    withMetadata,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    payer: PublicKey;\r\n    positionOwner: PublicKey;\r\n    lockOwner: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    positionNftMint: PublicKey;\r\n    authPositionNftAccount: PublicKey;\r\n    positionNftProgram: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    metadataAccount: PublicKey;\r\n    withMetadata: boolean;\r\n    nft2022?: boolean;\r\n  }): TransactionInstruction {\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionOwner, isSigner: true, isWritable: true },\r\n      { pubkey: lockOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: authPositionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: true },\r\n      { pubkey: lockNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftProgram, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    const dataLayout = struct([bool(\"withMetadata\")]);\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        withMetadata,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...lockInsDataBuf, ...data]);\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static lockPositionInstruction({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    owner,\r\n    positionNft,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    owner: PublicKey;\r\n    positionNft: PublicKey;\r\n  }): TransactionInstruction {\r\n    const { publicKey: nftAccount } = getATAAddress(owner, positionNft, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, positionNft);\r\n\r\n    const keys = [\r\n      { pubkey: authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(programId, positionId).publicKey, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstruction(props: {\r\n    poolKeys: ClmmKeys;\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    ownerPosition: ClmmPositionLayout;\r\n    owner: PublicKey;\r\n    ownerRewardAccounts: PublicKey[];\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n  }): TransactionInstruction {\r\n    const [poolProgramId, poolId] = [new PublicKey(props.poolKeys.programId), new PublicKey(props.poolKeys.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickLower,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickUpper,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayUpperStartIndex);\r\n    const { publicKey: nftAccount } = getATAAddress(props.owner, props.ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, props.ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      poolId,\r\n      props.ownerPosition.tickLower,\r\n      props.ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n\r\n    for (let i = 0; i < props.poolKeys.rewardInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(props.poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: props.ownerRewardAccounts[i],\r\n        rewardMint: new PublicKey(props.poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const remainingAccounts = [\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: props.authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(props.programId, positionId).publicKey, isSigner: false, isWritable: false },\r\n      { pubkey: poolProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: props.owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.A), isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.B), isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintA.address), isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintB.address), isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId: props.programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    lockPositionId,\r\n    clmmProgram,\r\n    lockOwner,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    positionNftAccount,\r\n    positionId,\r\n    poolId,\r\n    protocolPosition,\r\n    vaultA,\r\n    vaultB,\r\n    tickArrayLower,\r\n    tickArrayUpper,\r\n    userVaultA,\r\n    userVaultB,\r\n    mintA,\r\n    mintB,\r\n    rewardAccounts,\r\n    exTickArrayBitmap,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    clmmProgram: PublicKey;\r\n    lockOwner: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    poolId: PublicKey;\r\n    protocolPosition: PublicKey;\r\n    vaultA: PublicKey;\r\n    vaultB: PublicKey;\r\n    tickArrayLower: PublicKey;\r\n    tickArrayUpper: PublicKey;\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n    mintA: PublicKey;\r\n    mintB: PublicKey;\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[];\r\n\r\n    exTickArrayBitmap?: PublicKey;\r\n  }): TransactionInstruction {\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: lockOwner, isSigner: true, isWritable: false },\r\n      // { pubkey: lockNftMint, isSigner: false, isWritable: false },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: false },\r\n      { pubkey: clmmProgram, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: vaultA, isSigner: false, isWritable: true },\r\n      { pubkey: vaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN, { isBN } from \"bn.js\";\r\n\r\nimport {\r\n  bits,\r\n  blob,\r\n  Blob,\r\n  Layout,\r\n  offset as _offset,\r\n  seq as _seq,\r\n  Structure as _Structure,\r\n  u32 as _u32,\r\n  u8 as _u8,\r\n  UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n} from \"./buffer-layout\";\r\n\r\nexport * from \"./buffer-layout\";\r\nexport { blob };\r\n\r\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\r\n  blob: Layout<Buffer>;\r\n  signed: boolean;\r\n\r\n  constructor(span: number, signed: boolean, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\r\n    super(span, property);\r\n    this.blob = blob(span);\r\n    this.signed = signed;\r\n  }\r\n\r\n  /** @override */\r\n  decode(b: Buffer, offset = 0): BN {\r\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\r\n    if (this.signed) {\r\n      return num.fromTwos(this.span * 8).clone();\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /** @override */\r\n  encode(src: BN, b: Buffer, offset = 0): number {\r\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\r\n    if (this.signed) {\r\n      src = src.toTwos(this.span * 8);\r\n    }\r\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\r\n  }\r\n}\r\n\r\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\r\n  _lower: any;\r\n  _upper: any;\r\n  // TODO: unknown\r\n  constructor(property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(8, property);\r\n    this._lower = bits(_u32(), false);\r\n    this._upper = bits(_u32(), false);\r\n  }\r\n\r\n  addBoolean(property: string): void {\r\n    if (this._lower.fields.length < 32) {\r\n      this._lower.addBoolean(property);\r\n    } else {\r\n      this._upper.addBoolean(property);\r\n    }\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\r\n    const lowerDecoded = this._lower.decode(b, offset);\r\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\r\n    return { ...lowerDecoded, ...upperDecoded };\r\n  }\r\n\r\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\r\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\r\n  }\r\n}\r\n\r\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(1, property);\r\n}\r\n\r\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(4, property);\r\n}\r\n\r\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, false, property);\r\n}\r\n\r\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, false, property);\r\n}\r\n\r\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(1, true, property);\r\n}\r\n\r\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, true, property);\r\n}\r\n\r\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, true, property);\r\n}\r\n\r\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\r\n  layout: Layout<T>;\r\n  decoder: (data: T) => U;\r\n  encoder: (src: U) => T;\r\n\r\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(layout.span, property);\r\n    this.layout = layout;\r\n    this.decoder = decoder;\r\n    this.encoder = encoder;\r\n  }\r\n\r\n  decode(b: Buffer, offset?: number): U {\r\n    return this.decoder(this.layout.decode(b, offset));\r\n  }\r\n\r\n  encode(src: U, b: Buffer, offset?: number): number {\r\n    return this.layout.encode(this.encoder(src), b, offset);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset?: number): number {\r\n    return this.layout.getSpan(b, offset);\r\n  }\r\n}\r\n\r\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\r\n  return new WrappedLayout(\r\n    blob(32),\r\n    (b: Buffer) => new PublicKey(b),\r\n    (key: PublicKey) => key.toBuffer(),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\r\n  layout: Layout<T>;\r\n  discriminator: Layout<number>;\r\n\r\n  constructor(layout: Layout<T>, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(-1, property);\r\n    this.layout = layout;\r\n    this.discriminator = _u8();\r\n  }\r\n\r\n  encode(src: T | null, b: Buffer, offset = 0): number {\r\n    if (src === null || src === undefined) {\r\n      return this.discriminator.encode(0, b, offset);\r\n    }\r\n    this.discriminator.encode(1, b, offset);\r\n    return this.layout.encode(src, b, offset + 1) + 1;\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): T | null {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return null;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.decode(b, offset + 1);\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset = 0): number {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return 1;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.getSpan(b, offset + 1) + 1;\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n}\r\n\r\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\r\n  return new OptionLayout<T, P>(layout, property);\r\n}\r\n\r\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\r\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\r\n}\r\n\r\nexport function decodeBool(value: number): boolean {\r\n  if (value === 0) {\r\n    return false;\r\n  } else if (value === 1) {\r\n    return true;\r\n  }\r\n  throw new Error(\"Invalid bool: \" + value);\r\n}\r\n\r\nexport function encodeBool(value: boolean): number {\r\n  return value ? 1 : 0;\r\n}\r\n\r\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ values: T[] }> = struct([\r\n    length,\r\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\r\n  ]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\r\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\r\n\r\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\r\n    if (!receivedTag.eq(tag)) {\r\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\r\n}\r\n\r\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ data }) => data,\r\n    (data) => ({ data }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\r\n  return new WrappedLayout(\r\n    vecU8(),\r\n    (data) => data.toString(\"utf-8\"),\r\n    (s) => Buffer.from(s, \"utf-8\"),\r\n    property,\r\n  );\r\n}\r\n\r\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\r\n  registry: Record<string, Layout<any>>;\r\n}\r\n\r\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\r\n  const unionLayout = _union(_u8(), property);\r\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\r\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\r\n}\r\n\r\nexport function array<T, P extends string = \"\">(\r\n  elementLayout: Layout<T>,\r\n  length: number,\r\n  property?: P,\r\n): Layout<T[], P> {\r\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class Structure<T, P, D extends { [key: string]: any; }> extends _Structure<T, P, D> {\r\n  /** @override */\r\n  decode(b: Buffer, offset?: number): D {\r\n    return super.decode(b, offset);\r\n  }\r\n}\r\n\r\nexport function struct<T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n): T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n    Value,\r\n    P,\r\n    {\r\n      [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n      ? V\r\n      : any;\r\n    }\r\n  >\r\n  : any {\r\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\r\n  return new Structure(fields, property, decodePrefixes);\r\n}\r\n\r\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\r\n  ? S\r\n  : any;\r\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any; }> = Structure<any, any, S>;\r\n\r\nexport class Union<Schema extends { [key: string]: any; }> extends _Union<Schema> {\r\n  encodeInstruction(instruction: any): Buffer {\r\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\r\n    const b = Buffer.alloc(instructionMaxSpan);\r\n    return b.slice(0, this.encode(instruction, b));\r\n  }\r\n\r\n  decodeInstruction(instruction: any): Partial<Schema> {\r\n    return this.decode(instruction);\r\n  }\r\n}\r\nexport function union<UnionSchema extends { [key: string]: any } = any>(\r\n  discr: any,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n): Union<UnionSchema> {\r\n  return new Union(discr, defaultLayout, property);\r\n}\r\n\r\nclass Zeros extends Blob {\r\n  decode(b: Buffer, offset: number): Buffer {\r\n    const slice = super.decode(b, offset);\r\n    if (!slice.every((v) => v === 0)) {\r\n      throw new Error(\"nonzero padding bytes\");\r\n    }\r\n    return slice;\r\n  }\r\n}\r\n\r\nexport function zeros(length: number): Zeros {\r\n  return new Zeros(length);\r\n}\r\n\r\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\r\n  elementLayout: Layout<T, P>,\r\n  count: number | BN | Layout<BN | number, P>,\r\n  property?: AnotherP,\r\n): Layout<T[], AnotherP> {\r\n  let parsedCount: number;\r\n  const superCount =\r\n    typeof count === \"number\"\r\n      ? count\r\n      : isBN(count)\r\n        ? count.toNumber()\r\n        : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\r\n          get(target, property): any {\r\n            if (!parsedCount) {\r\n              // get count in targetLayout. note that count may be BN\r\n              const countProperty = Reflect.get(target, \"count\");\r\n\r\n              // let targetLayout's  property:count be a number\r\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\r\n\r\n              // record the count\r\n              Reflect.set(target, \"count\", parsedCount);\r\n            }\r\n            return Reflect.get(target, property);\r\n          },\r\n          set(target, property, value): any {\r\n            if (property === \"count\") {\r\n              parsedCount = value;\r\n            }\r\n            return Reflect.set(target, property, value);\r\n          },\r\n        });\r\n\r\n  // @ts-expect-error force type\r\n  return _seq(elementLayout, superCount, property);\r\n}\r\n","import {\r\n  bits as _bits,\r\n  BitStructure as _BitStructure,\r\n  blob as _blob,\r\n  Blob as _Blob,\r\n  cstr as _cstr,\r\n  f32 as _f32,\r\n  f32be as _f32be,\r\n  f64 as _f64,\r\n  f64be as _f64be,\r\n  greedy as _greedy,\r\n  Layout as _Layout,\r\n  ns64 as _ns64,\r\n  ns64be as _ns64be,\r\n  nu64 as _nu64,\r\n  nu64be as _nu64be,\r\n  offset as _offset,\r\n  s16 as _s16,\r\n  s16be as _s16be,\r\n  s24 as _s24,\r\n  s24be as _s24be,\r\n  s32 as _s32,\r\n  s32be as _s32be,\r\n  s40 as _s40,\r\n  s40be as _s40be,\r\n  s48 as _s48,\r\n  s48be as _s48be,\r\n  s8 as _s8,\r\n  seq as _seq,\r\n  struct as _struct,\r\n  Structure as _Structure,\r\n  u16 as _u16,\r\n  u16be as _u16be,\r\n  u24 as _u24,\r\n  u24be as _u24be,\r\n  u32 as _u32,\r\n  u32be as _u32be,\r\n  u40 as _u40,\r\n  u40be as _u40be,\r\n  u48 as _u48,\r\n  u48be as _u48be,\r\n  u8 as _u8,\r\n  UInt as _UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\r\n  utf8 as _utf8,\r\n} from \"@solana/buffer-layout\";\r\n\r\n//#region ------------------- Layout -------------------\r\nexport interface Layout<T = any, P = \"\"> {\r\n  span: number;\r\n  property?: P;\r\n  decode(b: Buffer, offset?: number): T;\r\n  encode(src: T, b: Buffer, offset?: number): number;\r\n  getSpan(b: Buffer, offset?: number): number;\r\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\r\n}\r\nexport interface LayoutConstructor {\r\n  new <T, P>(): Layout<T, P>; // for class extends syntex\r\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\r\n  readonly prototype: Layout;\r\n}\r\nexport const Layout = _Layout as unknown as LayoutConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Structure -------------------\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\r\n  extends Layout<DecodeSchema, P> {\r\n  span: number;\r\n  decode(b: Buffer, offset?: number): DecodeSchema;\r\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\r\n  offsetOf<AP extends string>(property: AP): number;\r\n}\r\ninterface StructureConstructor {\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\r\n    fields: T,\r\n    property?: P,\r\n    decodePrefixes?: boolean,\r\n  ): Structure<T, P, DecodeSchema>;\r\n}\r\nexport const Structure = _Structure as unknown as StructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Union -------------------\r\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\r\n  registry: object;\r\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\r\n  addVariant(\r\n    variant: number,\r\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\r\n    property?: string,\r\n  ): any /* TEMP: code in Layout.js 1809 */;\r\n}\r\ninterface UnionConstructor {\r\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\r\n  new <UnionSchema extends { [key: string]: any } = any>(\r\n    discr: Layout<any, any>,\r\n    defaultLayout: Layout<any, any>,\r\n    property?: string,\r\n  ): Union<UnionSchema>;\r\n}\r\nexport const Union = _Union as unknown as UnionConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- BitStructure -------------------\r\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\r\ninterface BitStructureConstructor {\r\n  new (...params: any[]): BitStructure;\r\n}\r\nexport const BitStructure = _BitStructure as BitStructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- UInt -------------------\r\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\r\ninterface UIntConstructor {\r\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\r\n}\r\nexport const UInt = _UInt as UIntConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Blob -------------------\r\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\r\ninterface BlobConstructor {\r\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\r\n}\r\nexport const Blob = _Blob as unknown as BlobConstructor;\r\n//#endregion\r\n\r\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\r\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\n\r\nexport const struct = _struct as <T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n) => T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any;\r\n\r\nexport const seq = _seq as unknown as <T, P>(\r\n  elementLayout: Layout<T, string>,\r\n  count: number | Layout<number, string>,\r\n  property?: P,\r\n) => Layout<T[]>;\r\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\r\n  discr: Layout<any, any>,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n) => Union<UnionSchema>;\r\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\r\n  layout: Layout<any, P>,\r\n  property?: P,\r\n) => any;\r\nexport const blob = _blob as unknown as <P extends string = \"\">(\r\n  length: number | Layout<number, P>,\r\n  property?: P,\r\n) => Blob<P>;\r\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\r\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\r\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\r\n  word: Layout<T>,\r\n  msb?: boolean,\r\n  property?: P,\r\n) => BitStructure<T, P>; // TODO: not quite sure\r\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\r\n  layout: Layout<T, P>,\r\n  offset?: number,\r\n  property?: P,\r\n) => Layout<T, P>;\r\n\r\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { ClmmPoolInfo } from \"../type\";\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { SqrtPriceMath, TickMath } from \"./math\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { TickArrayBitmapExtensionLayout } from \"../layout\";\r\n\r\nexport const TICK_ARRAY_SIZE = 60;\r\nexport const TICK_ARRAY_BITMAP_SIZE = 512;\r\n\r\nexport interface ReturnTypeGetTickPrice {\r\n  tick: number;\r\n  price: Decimal;\r\n  tickSqrtPriceX64: BN;\r\n}\r\n\r\nexport interface ReturnTypeGetPriceAndTick {\r\n  tick: number;\r\n  price: Decimal;\r\n}\r\n\r\nexport type Tick = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  rewardGrowthsOutsideX64: BN[];\r\n};\r\n\r\nexport type TickArray = {\r\n  address: PublicKey;\r\n  poolId: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: Tick[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport type TickState = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  tickCumulativeOutside: BN;\r\n  secondsPerLiquidityOutsideX64: BN;\r\n  secondsOutside: number;\r\n  rewardGrowthsOutside: BN[];\r\n};\r\n\r\nexport type TickArrayState = {\r\n  ammPool: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: TickState[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport class TickUtils {\r\n  public static getTickArrayAddressByTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n  ): PublicKey {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return tickArrayAddress;\r\n  }\r\n\r\n  public static getTickOffsetInArray(tickIndex: number, tickSpacing: number): number {\r\n    if (tickIndex % tickSpacing != 0) {\r\n      throw new Error(\"tickIndex % tickSpacing not equal 0\");\r\n    }\r\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing);\r\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\r\n      throw new Error(\"tick offset in array overflow\");\r\n    }\r\n    return offsetInArray;\r\n  }\r\n\r\n  public static getTickArrayBitIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = TickQuery.tickCount(tickSpacing);\r\n\r\n    let startIndex: number = tickIndex / ticksInArray;\r\n    if (tickIndex < 0 && tickIndex % ticksInArray != 0) {\r\n      startIndex = Math.ceil(startIndex) - 1;\r\n    } else {\r\n      startIndex = Math.floor(startIndex);\r\n    }\r\n    return startIndex;\r\n  }\r\n\r\n  public static getTickArrayStartIndexByTick(tickIndex: number, tickSpacing: number): number {\r\n    return this.getTickArrayBitIndex(tickIndex, tickSpacing) * TickQuery.tickCount(tickSpacing);\r\n  }\r\n\r\n  public static getTickArrayOffsetInBitmapByTick(tick: number, tickSpacing: number): number {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    return Math.abs(compressed);\r\n  }\r\n\r\n  public static checkTickArrayIsInitialized(\r\n    bitmap: BN,\r\n    tick: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    isInitialized: boolean;\r\n    startIndex: number;\r\n  } {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    const bitPos = Math.abs(compressed);\r\n    return {\r\n      isInitialized: bitmap.testn(bitPos),\r\n      startIndex: (bitPos - 512) * multiplier,\r\n    };\r\n  }\r\n\r\n  public static getNextTickArrayStartIndex(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): number {\r\n    return zeroForOne\r\n      ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE\r\n      : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE;\r\n  }\r\n\r\n  public static mergeTickArrayBitmap(bns: BN[]): BN {\r\n    let b = new BN(0);\r\n    for (let i = 0; i < bns.length; i++) {\r\n      b = b.add(bns[i].shln(64 * i));\r\n    }\r\n    return b;\r\n  }\r\n\r\n  public static getInitializedTickArrayInRange(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    tickSpacing: number,\r\n    tickArrayStartIndex: number,\r\n    expectedCount: number,\r\n  ): number[] {\r\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE));\r\n    return [\r\n      // find right of currenct offset\r\n      ...TickUtils.searchLowBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset - 1,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n\r\n      // find left of current offset\r\n      ...TickUtils.searchHightBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public static getAllInitializedTickArrayStartIndex(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    // find from offset 0 to 1024\r\n    return TickUtils.searchHightBitFromStart(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      -7680,\r\n      TICK_ARRAY_BITMAP_SIZE,\r\n      tickSpacing,\r\n    );\r\n  }\r\n\r\n  public static getAllInitializedTickArrayInfo(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    tickSpacing: number,\r\n  ): {\r\n    tickArrayStartIndex: number;\r\n    tickArrayAddress: PublicKey;\r\n  }[] {\r\n    const result: {\r\n      tickArrayStartIndex: number;\r\n      tickArrayAddress: PublicKey;\r\n    }[] = [];\r\n    const allInitializedTickArrayIndex: number[] = TickUtils.getAllInitializedTickArrayStartIndex(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n    );\r\n    for (const startIndex of allInitializedTickArrayIndex) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n      result.push({\r\n        tickArrayStartIndex: startIndex,\r\n        tickArrayAddress: address,\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static getAllInitializedTickInTickArray(tickArray: TickArrayState): TickState[] {\r\n    return tickArray.ticks.filter((i) => i.liquidityGross.gtn(0));\r\n  }\r\n\r\n  public static searchLowBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex >= -7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex--;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static searchHightBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex < 7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex++;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static checkIsOutOfBoundary(tick: number): boolean {\r\n    return tick < MIN_TICK || tick > MAX_TICK;\r\n  }\r\n\r\n  public static nextInitTick(\r\n    tickArrayCurrent: TickArray,\r\n    currentTickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    t: boolean,\r\n  ): Tick | null {\r\n    const currentTickArrayStartIndex = TickQuery.getArrayStartIndex(currentTickIndex, tickSpacing);\r\n    if (currentTickArrayStartIndex != tickArrayCurrent.startTickIndex) {\r\n      return null;\r\n    }\r\n    let offsetInArray = Math.floor((currentTickIndex - tickArrayCurrent.startTickIndex) / tickSpacing);\r\n\r\n    if (zeroForOne) {\r\n      while (offsetInArray >= 0) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray - 1;\r\n      }\r\n    } else {\r\n      if (!t) offsetInArray = offsetInArray + 1;\r\n      while (offsetInArray < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray + 1;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static firstInitializedTick(tickArrayCurrent: TickArray, zeroForOne: boolean): Tick {\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n\r\n    throw Error(`firstInitializedTick check error: ${tickArrayCurrent} - ${zeroForOne}`);\r\n  }\r\n\r\n  public static _getTickPriceLegacy({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static _getPriceAndTickLegacy({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.ammConfig.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n\r\n  public static getTickPrice({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static getPriceAndTick({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.config.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nexport const ZERO = new BN(0);\r\nexport const ONE = new BN(1);\r\nexport const NEGATIVE_ONE = new BN(-1);\r\n\r\nexport const Q64 = new BN(1).shln(64);\r\nexport const Q128 = new BN(1).shln(128);\r\n\r\nexport const MaxU64 = Q64.sub(ONE);\r\n\r\nexport const U64Resolution = 64;\r\n\r\nexport const MaxUint128 = Q128.subn(1);\r\n\r\nexport const MIN_TICK = -443636;\r\nexport const MAX_TICK = -MIN_TICK;\r\n\r\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"4295048016\");\r\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"79226673521066979257578248091\");\r\n\r\nexport const MIN_SQRT_PRICE_X64_ADD_ONE: BN = new BN(\"4295048017\");\r\nexport const MAX_SQRT_PRICE_X64_SUB_ONE: BN = new BN(\"79226673521066979257578248090\");\r\n\r\n// export const MIN_TICK_ARRAY_START_INDEX = -307200;\r\n// export const MAX_TICK_ARRAY_START_INDEX = 306600;\r\n\r\nexport const BIT_PRECISION = 16;\r\nexport const LOG_B_2_X32 = \"59543866431248\";\r\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\r\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\r\n\r\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\r\n\r\nexport enum Fee {\r\n  rate_500 = 500, //  500 / 10e6 = 0.0005\r\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\r\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\r\n}\r\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\r\n  [Fee.rate_500]: 10,\r\n  [Fee.rate_3000]: 60,\r\n  [Fee.rate_10000]: 200,\r\n};\r\n\r\nexport const mockCreatePoolInfo = {\r\n  version: 6,\r\n  liquidity: ZERO,\r\n  tickCurrent: 0,\r\n  feeGrowthGlobalX64A: ZERO,\r\n  feeGrowthGlobalX64B: ZERO,\r\n  protocolFeesTokenA: ZERO,\r\n  protocolFeesTokenB: ZERO,\r\n  swapInAmountTokenA: ZERO,\r\n  swapOutAmountTokenB: ZERO,\r\n  swapInAmountTokenB: ZERO,\r\n  swapOutAmountTokenA: ZERO,\r\n  tickArrayBitmap: [],\r\n\r\n  rewardInfos: [],\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  tvl: 0,\r\n};\r\n\r\nexport const mockV3CreatePoolInfo = {\r\n  tvl: 0,\r\n  volumeQuote: 0,\r\n  mintAmountA: 0,\r\n  mintAmountB: 0,\r\n  rewardDefaultInfos: [],\r\n  farmUpcomingCount: 0,\r\n  farmOngoingCount: 0,\r\n  farmFinishedCount: 0,\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  pooltype: [],\r\n};\r\n\r\nexport const U64_IGNORE_RANGE = new BN(\"18446744073700000000\");\r\n","import { EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common/transfer\";\r\nimport { ReturnTypeGetLiquidityAmountOut } from \"../type\";\r\nimport {\r\n  BIT_PRECISION,\r\n  Fee,\r\n  FEE_RATE_DENOMINATOR,\r\n  LOG_B_2_X32,\r\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\r\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\r\n  MAX_SQRT_PRICE_X64,\r\n  MAX_TICK,\r\n  MaxU64,\r\n  MaxUint128,\r\n  MIN_SQRT_PRICE_X64,\r\n  MIN_TICK,\r\n  NEGATIVE_ONE,\r\n  ONE,\r\n  Q128,\r\n  Q64,\r\n  U64Resolution,\r\n  ZERO,\r\n} from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { PoolUtils } from \"./pool\";\r\nimport { Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { TickArrayBitmapExtensionLayout } from \"../layout\";\r\n\r\nexport class MathUtil {\r\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\r\n    const numerator = a.mul(b);\r\n    let result = numerator.div(denominator);\r\n    if (!numerator.mod(denominator).eq(ZERO)) {\r\n      result = result.add(ONE);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    return a.mul(b).div(denominator);\r\n  }\r\n\r\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    const numerator = a.mul(b).add(denominator.sub(ONE));\r\n    return numerator.div(denominator);\r\n  }\r\n\r\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\r\n    return new Decimal(num.toString()).div(Decimal.pow(2, 64)).toDecimalPlaces(decimalPlaces);\r\n  }\r\n\r\n  public static decimalToX64(num: Decimal): BN {\r\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\r\n  }\r\n\r\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\r\n    return n0.add(Q128).sub(n1).mod(Q128);\r\n  }\r\n}\r\n\r\n// sqrt price math\r\nfunction mulRightShift(val: BN, mulBy: BN): BN {\r\n  return signedRightShift(val.mul(mulBy), 64, 256);\r\n}\r\n\r\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\r\n  twosN0.imaskn(bitWidth + 1);\r\n  return twosN0.fromTwos(bitWidth);\r\n}\r\n\r\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\r\n  twoN0.imaskn(bitWidth - shiftBy + 1);\r\n  return twoN0.fromTwos(bitWidth - shiftBy);\r\n}\r\n\r\nexport class SqrtPriceMath {\r\n  public static sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\r\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\r\n      .pow(2)\r\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\r\n  }\r\n\r\n  public static priceToSqrtPriceX64(price: Decimal, decimalsA: number, decimalsB: number): BN {\r\n    return MathUtil.decimalToX64(price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt());\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromInput(sqrtPriceX64: BN, liquidity: BN, amountIn: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountIn, true)\r\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountIn, true);\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromOutput(sqrtPriceX64: BN, liquidity: BN, amountOut: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountOut, false)\r\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountOut, false);\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    if (amount.eq(ZERO)) return sqrtPriceX64;\r\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\r\n\r\n    if (add) {\r\n      const numerator1 = liquidityLeftShift;\r\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\r\n      if (denominator.gte(numerator1)) {\r\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\r\n      }\r\n      return MathUtil.mulDivRoundingUp(numerator1, ONE, numerator1.div(sqrtPriceX64).add(amount));\r\n    } else {\r\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\r\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\");\r\n      }\r\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\r\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\r\n    }\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    const deltaY = amount.shln(U64Resolution);\r\n    if (add) {\r\n      return sqrtPriceX64.add(deltaY.div(liquidity));\r\n    } else {\r\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(deltaY, ONE, liquidity);\r\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\");\r\n      }\r\n      return sqrtPriceX64.sub(amountDivLiquidity);\r\n    }\r\n  }\r\n\r\n  public static getSqrtPriceX64FromTick(tick: number): BN {\r\n    if (!Number.isInteger(tick)) {\r\n      throw new Error(\"tick must be integer\");\r\n    }\r\n    if (tick < MIN_TICK || tick > MAX_TICK) {\r\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\r\n    }\r\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\r\n\r\n    let ratio: BN = (tickAbs & 0x1) != 0 ? new BN(\"18445821805675395072\") : new BN(\"18446744073709551616\");\r\n    if ((tickAbs & 0x2) != 0) ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\r\n    if ((tickAbs & 0x4) != 0) ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\r\n    if ((tickAbs & 0x8) != 0) ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\r\n    if ((tickAbs & 0x10) != 0) ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\r\n    if ((tickAbs & 0x20) != 0) ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\r\n    if ((tickAbs & 0x40) != 0) ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\r\n    if ((tickAbs & 0x80) != 0) ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\r\n    if ((tickAbs & 0x100) != 0) ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\r\n    if ((tickAbs & 0x200) != 0) ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\r\n    if ((tickAbs & 0x400) != 0) ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\r\n    if ((tickAbs & 0x800) != 0) ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\r\n    if ((tickAbs & 0x1000) != 0) ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\r\n    if ((tickAbs & 0x2000) != 0) ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\r\n    if ((tickAbs & 0x4000) != 0) ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\r\n    if ((tickAbs & 0x8000) != 0) ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\r\n    if ((tickAbs & 0x10000) != 0) ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\r\n    if ((tickAbs & 0x20000) != 0) ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\r\n    if ((tickAbs & 0x40000) != 0) ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\r\n\r\n    if (tick > 0) ratio = MaxUint128.div(ratio);\r\n    return ratio;\r\n  }\r\n\r\n  public static getTickFromPrice(price: Decimal, decimalsA: number, decimalsB: number): number {\r\n    return SqrtPriceMath.getTickFromSqrtPriceX64(SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB));\r\n  }\r\n\r\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\r\n    if (sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) || sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)) {\r\n      throw new Error(\"Provided sqrtPrice is not within the supported sqrtPrice range.\");\r\n    }\r\n\r\n    const msb = sqrtPriceX64.bitLength() - 1;\r\n    const adjustedMsb = new BN(msb - 64);\r\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\r\n\r\n    let bit = new BN(\"8000000000000000\", \"hex\");\r\n    let precision = 0;\r\n    let log2pFractionX64 = new BN(0);\r\n\r\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\r\n\r\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\r\n      r = r.mul(r);\r\n      const rMoreThanTwo = r.shrn(127);\r\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\r\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\r\n      bit = bit.shrn(1);\r\n      precision += 1;\r\n    }\r\n\r\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\r\n\r\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\r\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\r\n\r\n    const tickLow = signedRightShift(logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)), 64, 128).toNumber();\r\n    const tickHigh = signedRightShift(logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)), 64, 128).toNumber();\r\n\r\n    if (tickLow == tickHigh) {\r\n      return tickLow;\r\n    } else {\r\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh);\r\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow;\r\n    }\r\n  }\r\n}\r\n\r\n// tick math\r\nexport class TickMath {\r\n  public static getTickWithPriceAndTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): number {\r\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\r\n      SqrtPriceMath.priceToSqrtPriceX64(price, mintDecimalsA, mintDecimalsB),\r\n    );\r\n    let result = tick / tickSpacing;\r\n    if (result < 0) {\r\n      result = Math.floor(result);\r\n    } else {\r\n      result = Math.ceil(result);\r\n    }\r\n    return result * tickSpacing;\r\n  }\r\n\r\n  public static roundPriceWithTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): Decimal {\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(price, tickSpacing, mintDecimalsA, mintDecimalsB);\r\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    return SqrtPriceMath.sqrtPriceX64ToPrice(sqrtPriceX64, mintDecimalsA, mintDecimalsB);\r\n  }\r\n}\r\n\r\nexport class LiquidityMath {\r\n  public static addDelta(x: BN, y: BN): BN {\r\n    return x.add(y);\r\n  }\r\n\r\n  public static getTokenAmountAFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    const numerator1 = liquidity.ushln(U64Resolution);\r\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivRoundingUp(MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B), ONE, sqrtPriceX64A)\r\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(sqrtPriceX64A);\r\n  }\r\n\r\n  public static getTokenAmountBFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\r\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountA(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountA: BN, roundUp: boolean): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\r\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n    const result = numerator.div(denominator);\r\n\r\n    if (roundUp) {\r\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\r\n    } else {\r\n      return result.shrn(U64Resolution);\r\n    }\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountB(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountB: BN): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    return MathUtil.mulDivFloor(amountB, MaxU64, sqrtPriceX64B.sub(sqrtPriceX64A));\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmounts(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    amountA: BN,\r\n    amountB: BN,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, amountA, false);\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceCurrentX64, sqrtPriceX64B, amountA, false);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceCurrentX64, amountB);\r\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\r\n    } else {\r\n      return LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, amountB);\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidity(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): { amountA: BN; amountB: BN } {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return {\r\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n        amountB: new BN(0),\r\n      };\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\r\n        sqrtPriceCurrentX64,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\r\n        sqrtPriceX64A,\r\n        sqrtPriceCurrentX64,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      return { amountA, amountB };\r\n    } else {\r\n      return {\r\n        amountA: new BN(0),\r\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n      };\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidityWithSlippage(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    amountMax: boolean,\r\n    roundUp: boolean,\r\n    amountSlippage: number,\r\n  ): { amountSlippageA: BN; amountSlippageB: BN } {\r\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n      sqrtPriceCurrentX64,\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      roundUp,\r\n    );\r\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\r\n\r\n    const amount0Slippage = new BN(new Decimal(amountA.toString()).mul(coefficient).toFixed(0));\r\n    const amount1Slippage = new BN(new Decimal(amountB.toString()).mul(coefficient).toFixed(0));\r\n    return {\r\n      amountSlippageA: amount0Slippage,\r\n      amountSlippageB: amount1Slippage,\r\n    };\r\n  }\r\n\r\n  public static getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n\r\n    epochInfo: EpochInfo;\r\n    amountAddFee: boolean;\r\n  }): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, amountAddFee),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, amountAddFee),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n\r\n// swap math\r\n\r\ntype SwapStep = {\r\n  sqrtPriceX64Next: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n};\r\n\r\nexport interface StepComputations {\r\n  sqrtPriceStartX64: BN;\r\n  tickNext: number;\r\n  initialized: boolean;\r\n  sqrtPriceNextX64: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n}\r\n\r\nexport abstract class SwapMath {\r\n  public static swapCompute(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickArrayBitmap: BN[],\r\n    tickarrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    zeroForOne: boolean,\r\n    fee: number,\r\n    liquidity: BN,\r\n    currentTick: number,\r\n    tickSpacing: number,\r\n    currentSqrtPriceX64: BN,\r\n    amountSpecified: BN,\r\n    lastSavedTickArrayStartIndex: number,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    amountSpecifiedRemaining: BN;\r\n    amountCalculated: BN;\r\n    feeAmount: BN;\r\n    sqrtPriceX64: BN;\r\n    liquidity: BN;\r\n    tickCurrent: number;\r\n    accounts: PublicKey[];\r\n  } {\r\n    if (amountSpecified.eq(ZERO)) {\r\n      throw new Error(\"amountSpecified must not be 0\");\r\n    }\r\n    if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n    if (zeroForOne) {\r\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n      }\r\n    } else {\r\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than current\");\r\n      }\r\n    }\r\n    const baseInput = amountSpecified.gt(ZERO);\r\n\r\n    const state = {\r\n      amountSpecifiedRemaining: amountSpecified,\r\n      amountCalculated: ZERO,\r\n      sqrtPriceX64: currentSqrtPriceX64,\r\n      tick:\r\n        currentTick > lastSavedTickArrayStartIndex\r\n          ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n          : lastSavedTickArrayStartIndex,\r\n      accounts: [] as PublicKey[],\r\n      liquidity,\r\n      feeAmount: new BN(0),\r\n    };\r\n    let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n    let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n    let loopCount = 0;\r\n    let t = !zeroForOne && tickArrayCurrent.startTickIndex === state.tick;\r\n    while (\r\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n      !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n      // state.tick < MAX_TICK &&\r\n      // state.tick > MIN_TICK\r\n    ) {\r\n      if (loopCount > 10) {\r\n        // throw Error('liquidity limit')\r\n      }\r\n      const step: Partial<StepComputations> = {};\r\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n      const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne, t);\r\n\r\n      let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n      let tickArrayAddress: null | PublicKey = null;\r\n\r\n      if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n        const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n          {\r\n            tickCurrent: state.tick,\r\n            tickSpacing,\r\n            tickArrayBitmap,\r\n            exBitmapInfo: tickarrayBitmapExtension,\r\n          },\r\n          tickAarrayStartIndex,\r\n          zeroForOne,\r\n        );\r\n        if (!nextInitTickArrayIndex.isExist) {\r\n          if (catchLiquidityInsufficient) {\r\n            return {\r\n              allTrade: false,\r\n              amountSpecifiedRemaining: state.amountSpecifiedRemaining,\r\n              amountCalculated: state.amountCalculated,\r\n              feeAmount: state.feeAmount,\r\n              sqrtPriceX64: state.sqrtPriceX64,\r\n              liquidity: state.liquidity,\r\n              tickCurrent: state.tick,\r\n              accounts: state.accounts,\r\n            };\r\n          }\r\n          throw Error(\"swapCompute LiquidityInsufficient\");\r\n        }\r\n        tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n        const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n          programId,\r\n          poolId,\r\n          tickAarrayStartIndex,\r\n        );\r\n        tickArrayAddress = expectedNextTickArrayAddress;\r\n        tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n        try {\r\n          nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n        } catch (e) {\r\n          throw Error(\"not found next tick info\");\r\n        }\r\n      }\r\n\r\n      step.tickNext = nextInitTick.tick;\r\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n      if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n        state.accounts.push(tickArrayAddress);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n      if (step.tickNext < MIN_TICK) {\r\n        step.tickNext = MIN_TICK;\r\n      } else if (step.tickNext > MAX_TICK) {\r\n        step.tickNext = MAX_TICK;\r\n      }\r\n\r\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n      let targetPrice: BN;\r\n      if (\r\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n      ) {\r\n        targetPrice = sqrtPriceLimitX64;\r\n      } else {\r\n        targetPrice = step.sqrtPriceNextX64;\r\n      }\r\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n        state.sqrtPriceX64,\r\n        targetPrice,\r\n        state.liquidity,\r\n        state.amountSpecifiedRemaining,\r\n        fee,\r\n        zeroForOne,\r\n      );\r\n\r\n      state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n      if (baseInput) {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n      } else {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n        state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n      }\r\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n        if (step.initialized) {\r\n          let liquidityNet = nextInitTick.liquidityNet;\r\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n        }\r\n\r\n        t = step.tickNext != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === step.tickNext;\r\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext; //\r\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n        const _T = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n        t = _T != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === _T;\r\n        state.tick = _T;\r\n      }\r\n      ++loopCount;\r\n    }\r\n\r\n    try {\r\n      const { nextStartIndex: tickAarrayStartIndex, isExist } = TickQuery.nextInitializedTickArray(\r\n        state.tick,\r\n        tickSpacing,\r\n        zeroForOne,\r\n        tickArrayBitmap,\r\n        tickarrayBitmapExtension,\r\n      );\r\n      if (isExist && lastSavedTickArrayStartIndex !== tickAarrayStartIndex) {\r\n        state.accounts.push(getPdaTickArrayAddress(programId, poolId, tickAarrayStartIndex).publicKey);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    return {\r\n      allTrade: true,\r\n      amountSpecifiedRemaining: ZERO,\r\n      amountCalculated: state.amountCalculated,\r\n      feeAmount: state.feeAmount,\r\n      sqrtPriceX64: state.sqrtPriceX64,\r\n      liquidity: state.liquidity,\r\n      tickCurrent: state.tick,\r\n      accounts: state.accounts,\r\n    };\r\n  }\r\n  // public static swapCompute(\r\n  //   programId: PublicKey,\r\n  //   poolId: PublicKey,\r\n  //   tickArrayCache: { [key: string]: TickArray },\r\n  //   tickArrayBitmap: BN[],\r\n  //   tickarrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  //   zeroForOne: boolean,\r\n  //   fee: number,\r\n  //   liquidity: BN,\r\n  //   currentTick: number,\r\n  //   tickSpacing: number,\r\n  //   currentSqrtPriceX64: BN,\r\n  //   amountSpecified: BN,\r\n  //   lastSavedTickArrayStartIndex: number,\r\n  //   sqrtPriceLimitX64?: BN,\r\n  // ): {\r\n  //   amountCalculated: BN;\r\n  //   feeAmount: BN;\r\n  //   sqrtPriceX64: BN;\r\n  //   liquidity: BN;\r\n  //   tickCurrent: number;\r\n  //   accounts: PublicKey[];\r\n  // } {\r\n  //   if (amountSpecified.eq(ZERO)) {\r\n  //     throw new Error(\"amountSpecified must not be 0\");\r\n  //   }\r\n  //   if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n  //   if (zeroForOne) {\r\n  //     if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n  //     }\r\n  //   } else {\r\n  //     if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than current\");\r\n  //     }\r\n  //   }\r\n  //   const baseInput = amountSpecified.gt(ZERO);\r\n\r\n  //   const state = {\r\n  //     amountSpecifiedRemaining: amountSpecified,\r\n  //     amountCalculated: ZERO,\r\n  //     sqrtPriceX64: currentSqrtPriceX64,\r\n  //     tick:\r\n  //       currentTick > lastSavedTickArrayStartIndex\r\n  //         ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n  //         : lastSavedTickArrayStartIndex,\r\n  //     accounts: [] as PublicKey[],\r\n  //     liquidity,\r\n  //     feeAmount: new BN(0),\r\n  //   };\r\n  //   let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n  //   let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n  //   let loopCount = 0;\r\n  //   while (\r\n  //     !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n  //     !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n  //     // state.tick < MAX_TICK &&\r\n  //     // state.tick > MIN_TICK\r\n  //   ) {\r\n  //     if (loopCount > 10) {\r\n  //       throw Error(\"liquidity limit\");\r\n  //     }\r\n  //     const step: Partial<StepComputations> = {};\r\n  //     step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n  //     const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne);\r\n\r\n  //     let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n  //     let tickArrayAddress: PublicKey | null = null;\r\n\r\n  //     if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n  //       const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n  //         {\r\n  //           tickCurrent: state.tick,\r\n  //           tickSpacing,\r\n  //           tickArrayBitmap,\r\n  //           exBitmapInfo: tickarrayBitmapExtension,\r\n  //         },\r\n  //         tickAarrayStartIndex,\r\n  //         zeroForOne,\r\n  //       );\r\n  //       if (!nextInitTickArrayIndex.isExist) {\r\n  //         throw Error(\"swapCompute LiquidityInsufficient\");\r\n  //       }\r\n  //       tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n  //       const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n  //         programId,\r\n  //         poolId,\r\n  //         tickAarrayStartIndex,\r\n  //       );\r\n  //       tickArrayAddress = expectedNextTickArrayAddress;\r\n  //       tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n  //       nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n  //     }\r\n\r\n  //     step.tickNext = nextInitTick.tick;\r\n  //     step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n  //     if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n  //       state.accounts.push(tickArrayAddress);\r\n  //       lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //     }\r\n  //     if (step.tickNext < MIN_TICK) {\r\n  //       step.tickNext = MIN_TICK;\r\n  //     } else if (step.tickNext > MAX_TICK) {\r\n  //       step.tickNext = MAX_TICK;\r\n  //     }\r\n\r\n  //     step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n  //     let targetPrice: BN;\r\n  //     if (\r\n  //       (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n  //       (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n  //     ) {\r\n  //       targetPrice = sqrtPriceLimitX64;\r\n  //     } else {\r\n  //       targetPrice = step.sqrtPriceNextX64;\r\n  //     }\r\n  //     [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n  //       state.sqrtPriceX64,\r\n  //       targetPrice,\r\n  //       state.liquidity,\r\n  //       state.amountSpecifiedRemaining,\r\n  //       fee,\r\n  //     );\r\n\r\n  //     state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n  //     if (baseInput) {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n  //       state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n  //     } else {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n  //       state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n  //     }\r\n  //     if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n  //       if (step.initialized) {\r\n  //         let liquidityNet = nextInitTick.liquidityNet;\r\n  //         if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n  //         state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n  //       }\r\n  //       state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\r\n  //     } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n  //       state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n  //     }\r\n  //     ++loopCount;\r\n  //   }\r\n\r\n  //   // try {\r\n  //   //   console.log('state.tick', state.tick)\r\n  //   //   const { nextStartIndex: tickAarrayStartIndex } = TickQuery.nextInitializedTickArray(\r\n  //   //     state.tick,\r\n  //   //     tickSpacing,\r\n  //   //     zeroForOne,\r\n  //   //     tickArrayBitmap,\r\n  //   //     tickarrayBitmapExtension,\r\n  //   //   );\r\n  //   //   if (\r\n  //   //     lastSavedTickArrayStartIndex !== tickAarrayStartIndex\r\n  //   //   ) {\r\n  //   //     state.accounts.push(getPdaTickArrayAddress(\r\n  //   //       programId,\r\n  //   //       poolId,\r\n  //   //       tickAarrayStartIndex,\r\n  //   //     ).publicKey)\r\n  //   //     lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //   //   }\r\n  //   // } catch (e) { /* empty */ }\r\n\r\n  //   return {\r\n  //     amountCalculated: state.amountCalculated,\r\n  //     feeAmount: state.feeAmount,\r\n  //     sqrtPriceX64: state.sqrtPriceX64,\r\n  //     liquidity: state.liquidity,\r\n  //     tickCurrent: state.tick,\r\n  //     accounts: state.accounts,\r\n  //   };\r\n  // }\r\n\r\n  private static swapStepCompute(\r\n    sqrtPriceX64Current: BN,\r\n    sqrtPriceX64Target: BN,\r\n    liquidity: BN,\r\n    amountRemaining: BN,\r\n    feeRate: Fee,\r\n    zeroForOne: boolean,\r\n  ): [BN, BN, BN, BN] {\r\n    const swapStep: SwapStep = {\r\n      sqrtPriceX64Next: new BN(0),\r\n      amountIn: new BN(0),\r\n      amountOut: new BN(0),\r\n      feeAmount: new BN(0),\r\n    };\r\n\r\n    const baseInput = amountRemaining.gte(ZERO);\r\n\r\n    if (baseInput) {\r\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\r\n        amountRemaining,\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\r\n        FEE_RATE_DENOMINATOR,\r\n      );\r\n      swapStep.amountIn = zeroForOne\r\n        ? LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, true)\r\n        : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, true);\r\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemainingSubtractFee,\r\n          zeroForOne,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountOut = zeroForOne\r\n        ? LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, false)\r\n        : LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, false);\r\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemaining.mul(NEGATIVE_ONE),\r\n          zeroForOne,\r\n        );\r\n      }\r\n    }\r\n\r\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\r\n\r\n    if (zeroForOne) {\r\n      if (!(reachTargetPrice && baseInput)) {\r\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          true,\r\n        );\r\n      }\r\n\r\n      if (!(reachTargetPrice && !baseInput)) {\r\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          false,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountIn =\r\n        reachTargetPrice && baseInput\r\n          ? swapStep.amountIn\r\n          : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, swapStep.sqrtPriceX64Next, liquidity, true);\r\n      swapStep.amountOut =\r\n        reachTargetPrice && !baseInput\r\n          ? swapStep.amountOut\r\n          : LiquidityMath.getTokenAmountAFromLiquidity(\r\n              sqrtPriceX64Current,\r\n              swapStep.sqrtPriceX64Next,\r\n              liquidity,\r\n              false,\r\n            );\r\n    }\r\n\r\n    if (!baseInput && swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))) {\r\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\r\n    }\r\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\r\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\r\n    } else {\r\n      swapStep.feeAmount = MathUtil.mulDivCeil(\r\n        swapStep.amountIn,\r\n        new BN(feeRate),\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate)),\r\n      );\r\n    }\r\n    return [swapStep.sqrtPriceX64Next, swapStep.amountIn, swapStep.amountOut, swapStep.feeAmount];\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { findProgramAddress, METADATA_PROGRAM_ID } from \"../../../common\";\r\n\r\nimport { i32ToBytes, u16ToBytes } from \"./util\";\r\n\r\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\r\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\r\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\r\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\r\nexport const POOL_TICK_ARRAY_BITMAP_SEED = Buffer.from(\"pool_tick_array_bitmap_extension\", \"utf8\");\r\nexport const OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\r\n\r\nexport function getPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolVaultId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  vaultMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolRewardVaulId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  rewardMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaTickArrayAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  startIndex: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)], programId);\r\n}\r\n\r\nexport function getPdaProtocolPositionAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  tickLower: number,\r\n  tickUpper: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [POSITION_SEED, poolId.toBuffer(), i32ToBytes(tickLower), i32ToBytes(tickUpper)],\r\n    programId,\r\n  );\r\n}\r\n\r\nexport function getPdaPersonalPositionAddress(\r\n  programId: PublicKey,\r\n  nftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POSITION_SEED, nftMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaMetadataKey(mint: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [Buffer.from(\"metadata\", \"utf8\"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    METADATA_PROGRAM_ID,\r\n  );\r\n}\r\n\r\nexport function getPdaOperationAccount(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OPERATION_SEED], programId);\r\n}\r\n\r\nexport function getPdaExBitmapAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_TICK_ARRAY_BITMAP_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaObservationAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport const POOL_LOCK_ID_SEED = Buffer.from(\"locked_position\", \"utf8\");\r\nexport function getPdaLockPositionId(\r\n  programId: PublicKey,\r\n  positionId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, positionId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLockClPositionIdV2(\r\n  programId: PublicKey,\r\n  lockNftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, lockNftMint.toBuffer()], programId);\r\n}\r\n\r\nexport const SUPPORT_MINT_SEED = Buffer.from(\"support_mint\", \"utf8\");\r\nexport function getPdaMintExAccount(\r\n  programId: PublicKey,\r\n  mintAddress: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([SUPPORT_MINT_SEED, mintAddress.toBuffer()], programId);\r\n}\r\n","import { Connection, EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  ClmmPoolInfo,\r\n  ClmmPoolRewardInfo,\r\n  ComputeClmmPoolInfo,\r\n  ReturnTypeComputeAmountOut,\r\n  ReturnTypeComputeAmountOutBaseOut,\r\n  ReturnTypeComputeAmountOutFormat,\r\n  ReturnTypeFetchExBitmaps,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  ReturnTypeGetLiquidityAmountOut,\r\n  SDKParsedConcentratedInfo,\r\n} from \"../type\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token } from \"@/api/type\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport {\r\n  getMultipleAccountsInfo,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getTransferAmountFeeV2,\r\n  minExpirationTime,\r\n  solToWSol,\r\n} from \"@/common\";\r\nimport { Percent, Price, Token, TokenAmount } from \"@/module\";\r\nimport { TokenAccountRaw } from \"@/raydium/account/types\";\r\nimport {\r\n  PoolInfoLayout,\r\n  PositionInfoLayout,\r\n  RewardInfo,\r\n  TickArrayBitmapExtensionLayout,\r\n  TickArrayLayout,\r\n} from \"../layout\";\r\nimport { MAX_SQRT_PRICE_X64, MAX_TICK, MIN_SQRT_PRICE_X64, MIN_TICK, NEGATIVE_ONE, Q64, ZERO } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath, SwapMath } from \"./math\";\r\nimport { getPdaExBitmapAccount, getPdaPersonalPositionAddress, getPdaTickArrayAddress } from \"./pda\";\r\nimport { PositionUtils } from \"./position\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickArrayBitmap, TickArrayBitmapExtensionUtils } from \"./tickarrayBitmap\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class PoolUtils {\r\n  public static getOutputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    inputTokenMint: PublicKey,\r\n    inputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    expectedAmountOut: BN;\r\n    remainingAccounts: PublicKey[];\r\n    executionPrice: BN;\r\n    feeAmount: BN;\r\n  } {\r\n    const zeroForOne = inputTokenMint.toBase58() === poolInfo.mintA.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    // try {\r\n    //   const preTick = this.preInitializedTickArrayStartIndex(poolInfo, !zeroForOne)\r\n    //   if (preTick.isExist) {\r\n    //     const { publicKey: address } = getPdaTickArrayAddress(\r\n    //       poolInfo.programId,\r\n    //       poolInfo.id,\r\n    //       preTick.nextStartIndex\r\n    //     );\r\n    //     allNeededAccounts.push(address)\r\n    //   }\r\n    // } catch (e) { /* empty */ }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      allTrade,\r\n      amountCalculated: outputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      inputAmount,\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return {\r\n      allTrade,\r\n      expectedAmountOut: outputAmount.mul(NEGATIVE_ONE),\r\n      remainingAccounts: allNeededAccounts,\r\n      executionPrice,\r\n      feeAmount,\r\n    };\r\n  }\r\n\r\n  public static getInputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    outputTokenMint: PublicKey,\r\n    outputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n  ): { expectedAmountIn: BN; remainingAccounts: PublicKey[]; executionPrice: BN; feeAmount: BN } {\r\n    const zeroForOne = outputTokenMint.toBase58() === poolInfo.mintB.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    try {\r\n      const preTick = this.preInitializedTickArrayStartIndex(poolInfo, zeroForOne);\r\n      if (preTick.isExist) {\r\n        const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, preTick.nextStartIndex);\r\n        allNeededAccounts.push(address);\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      amountCalculated: inputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      outputAmount.mul(NEGATIVE_ONE),\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return { expectedAmountIn: inputAmount, remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\r\n  }\r\n\r\n  public static getFirstInitializedTickArray(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ):\r\n    | { isExist: true; startIndex: number; nextAccountMeta: PublicKey }\r\n    | { isExist: false; startIndex: undefined; nextAccountMeta: undefined } {\r\n    const { isInitialized, startIndex } = PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.tickSpacing, [\r\n      poolInfo.tickCurrent,\r\n    ])\r\n      ? TickArrayBitmapExtensionUtils.checkTickArrayIsInit(\r\n          TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n          poolInfo.tickSpacing,\r\n          poolInfo.exBitmapInfo,\r\n        )\r\n      : TickUtils.checkTickArrayIsInitialized(\r\n          TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n          poolInfo.tickCurrent,\r\n          poolInfo.tickSpacing,\r\n        );\r\n\r\n    if (isInitialized) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, startIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(\r\n      poolInfo,\r\n      TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n      zeroForOne,\r\n    );\r\n    if (isExist) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, nextStartIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex: nextStartIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined };\r\n  }\r\n\r\n  public static preInitializedTickArrayStartIndex(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    const currentOffset = Math.floor(poolInfo.tickCurrent / TickQuery.tickCount(poolInfo.tickSpacing));\r\n\r\n    const result: number[] = !zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(\r\n          poolInfo.tickArrayBitmap,\r\n          poolInfo.exBitmapInfo,\r\n          currentOffset - 1,\r\n          1,\r\n          poolInfo.tickSpacing,\r\n        )\r\n      : TickUtils.searchHightBitFromStart(\r\n          poolInfo.tickArrayBitmap,\r\n          poolInfo.exBitmapInfo,\r\n          currentOffset + 1,\r\n          1,\r\n          poolInfo.tickSpacing,\r\n        );\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    poolInfo:\r\n      | {\r\n          tickCurrent: number;\r\n          tickSpacing: number;\r\n          tickArrayBitmap: BN[];\r\n          exBitmapInfo: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>;\r\n        }\r\n      | ClmmPoolInfo,\r\n    lastTickArrayStartIndex: number,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    lastTickArrayStartIndex = TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing);\r\n\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const { isInit: startIsInit, tickIndex: startIndex } = TickArrayBitmap.nextInitializedTickArrayStartIndex(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n      );\r\n      if (startIsInit) {\r\n        return { isExist: true, nextStartIndex: startIndex };\r\n      }\r\n      lastTickArrayStartIndex = startIndex;\r\n\r\n      const { isInit, tickIndex } = TickArrayBitmapExtensionUtils.nextInitializedTickArrayFromOneBitmap(\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n        poolInfo.exBitmapInfo,\r\n      );\r\n      if (isInit) return { isExist: true, nextStartIndex: tickIndex };\r\n\r\n      lastTickArrayStartIndex = tickIndex;\r\n\r\n      if (lastTickArrayStartIndex < MIN_TICK || lastTickArrayStartIndex > MAX_TICK)\r\n        return { isExist: false, nextStartIndex: 0 };\r\n    }\r\n\r\n    // const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\r\n    //   poolInfo.tickArrayBitmap\r\n    // );\r\n    // const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\r\n    //   poolInfo.tickCurrent,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n    // const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset - 1,\r\n    //   0,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // ) : TickUtils.searchHightBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset,\r\n    //   1024,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n\r\n    // return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\r\n  }\r\n\r\n  public static async updatePoolRewardInfos({\r\n    connection,\r\n    apiPoolInfo,\r\n    chainTime,\r\n    poolLiquidity,\r\n    rewardInfos,\r\n  }: {\r\n    connection: Connection;\r\n    apiPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n    chainTime: number;\r\n    poolLiquidity: BN;\r\n    rewardInfos: ReturnType<typeof RewardInfo.decode>[];\r\n  }): Promise<ClmmPoolRewardInfo[]> {\r\n    const nRewardInfo: ClmmPoolRewardInfo[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      const _itemReward = rewardInfos[i];\r\n      const apiRewardProgram =\r\n        apiPoolInfo.rewardDefaultInfos[i]?.mint.programId ??\r\n        (await connection.getAccountInfo(_itemReward.tokenMint))?.owner;\r\n      if (apiRewardProgram === undefined) throw Error(\"get new reward mint info error\");\r\n\r\n      const itemReward: ClmmPoolRewardInfo = {\r\n        ..._itemReward,\r\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\r\n        remainingRewards: undefined,\r\n        tokenProgramId: new PublicKey(apiRewardProgram),\r\n      };\r\n\r\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue;\r\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\r\n        nRewardInfo.push(itemReward);\r\n        continue;\r\n      }\r\n\r\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime));\r\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime);\r\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, poolLiquidity);\r\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64);\r\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, Q64);\r\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta);\r\n      nRewardInfo.push({\r\n        ...itemReward,\r\n        rewardGrowthGlobalX64,\r\n        rewardTotalEmissioned,\r\n        lastUpdateTime: latestUpdateTime,\r\n      });\r\n    }\r\n    return nRewardInfo;\r\n  }\r\n\r\n  public static isOverflowDefaultTickarrayBitmap(tickSpacing: number, tickarrayStartIndexs: number[]): boolean {\r\n    const { maxTickBoundary, minTickBoundary } = this.tickRange(tickSpacing);\r\n\r\n    for (const tickIndex of tickarrayStartIndexs) {\r\n      const tickarrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n\r\n      if (tickarrayStartIndex >= maxTickBoundary || tickarrayStartIndex < minTickBoundary) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public static tickRange(tickSpacing: number): {\r\n    maxTickBoundary: number;\r\n    minTickBoundary: number;\r\n  } {\r\n    let maxTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let minTickBoundary = -maxTickBoundary;\r\n\r\n    if (maxTickBoundary > MAX_TICK) {\r\n      maxTickBoundary = TickQuery.getArrayStartIndex(MAX_TICK, tickSpacing) + TickQuery.tickCount(tickSpacing);\r\n    }\r\n    if (minTickBoundary < MIN_TICK) {\r\n      minTickBoundary = TickQuery.getArrayStartIndex(MIN_TICK, tickSpacing);\r\n    }\r\n    return { maxTickBoundary, minTickBoundary };\r\n  }\r\n\r\n  public static get_tick_array_offset(tickarrayStartIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickarrayStartIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n\r\n    return (tickarrayStartIndex / TickQuery.tickCount(tickSpacing)) * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  static async fetchExBitmaps({\r\n    connection,\r\n    exBitmapAddress,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    exBitmapAddress: PublicKey[];\r\n    batchRequest: boolean;\r\n  }): Promise<ReturnTypeFetchExBitmaps> {\r\n    const fetchedBitmapAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n      connection,\r\n      exBitmapAddress.map((i) => ({ pubkey: i })),\r\n      { batchRequest },\r\n    );\r\n\r\n    const returnTypeFetchExBitmaps: ReturnTypeFetchExBitmaps = {};\r\n    for (const item of fetchedBitmapAccount) {\r\n      if (item.accountInfo === null) continue;\r\n\r\n      returnTypeFetchExBitmaps[item.pubkey.toString()] = TickArrayBitmapExtensionLayout.decode(item.accountInfo.data);\r\n    }\r\n    return returnTypeFetchExBitmaps;\r\n  }\r\n\r\n  static async fetchMultiplePoolTickArrays({\r\n    connection,\r\n    poolKeys,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    poolKeys: Omit<ComputeClmmPoolInfo, \"ammConfig\">[];\r\n    batchRequest?: boolean;\r\n  }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\r\n    const tickArraysToPoolId: { [key: string]: PublicKey } = {};\r\n    const tickArrays: { pubkey: PublicKey }[] = [];\r\n    for (const itemPoolInfo of poolKeys) {\r\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n        itemPoolInfo.tickCurrent,\r\n        itemPoolInfo.tickSpacing,\r\n      );\r\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n        itemPoolInfo.tickArrayBitmap,\r\n        itemPoolInfo.exBitmapInfo,\r\n        itemPoolInfo.tickSpacing,\r\n        currentTickArrayStartIndex,\r\n        7,\r\n      );\r\n      for (const itemIndex of startIndexArray) {\r\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\r\n          itemPoolInfo.programId,\r\n          itemPoolInfo.id,\r\n          itemIndex,\r\n        );\r\n        tickArrays.push({ pubkey: tickArrayAddress });\r\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id;\r\n      }\r\n    }\r\n\r\n    const fetchedTickArrays = await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest });\r\n\r\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {};\r\n\r\n    for (const itemAccountInfo of fetchedTickArrays) {\r\n      if (!itemAccountInfo.accountInfo) continue;\r\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()];\r\n      if (!poolId) continue;\r\n      if (tickArrayCache[poolId.toString()] === undefined) tickArrayCache[poolId.toString()] = {};\r\n\r\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data);\r\n\r\n      tickArrayCache[poolId.toString()][accountLayoutData.startTickIndex] = {\r\n        ...accountLayoutData,\r\n        address: itemAccountInfo.pubkey,\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  // deprecated, new api doesn't need\r\n  static async fetchPoolsAccountPosition({\r\n    pools,\r\n    connection,\r\n    ownerInfo,\r\n    batchRequest = false,\r\n    updateOwnerRewardAndFee = true,\r\n  }: {\r\n    pools: SDKParsedConcentratedInfo[];\r\n    connection: Connection;\r\n    ownerInfo: { wallet: PublicKey; tokenAccounts: TokenAccountRaw[] };\r\n    batchRequest?: boolean;\r\n    updateOwnerRewardAndFee?: boolean;\r\n  }): Promise<SDKParsedConcentratedInfo[]> {\r\n    const programIds: PublicKey[] = [];\r\n\r\n    for (let index = 0; index < pools.length; index++) {\r\n      const accountInfo = pools[index];\r\n\r\n      if (accountInfo === null) continue;\r\n\r\n      if (!programIds.find((i) => i.equals(accountInfo.state.programId))) programIds.push(accountInfo.state.programId);\r\n    }\r\n\r\n    if (ownerInfo) {\r\n      const allMint = ownerInfo.tokenAccounts.map((i) => i.accountInfo.mint);\r\n      const allPositionKey: PublicKey[] = [];\r\n      for (const itemMint of allMint) {\r\n        for (const itemProgramId of programIds) {\r\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey);\r\n        }\r\n      }\r\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest });\r\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {};\r\n      for (const itemAccountInfo of positionAccountInfos) {\r\n        if (itemAccountInfo === null) continue;\r\n        // TODO: add check\r\n\r\n        const position = PositionInfoLayout.decode(itemAccountInfo.data);\r\n        const itemPoolId = position.poolId.toString();\r\n        const poolInfoA = pools.find((pool) => pool.state.id.toBase58() === itemPoolId);\r\n        if (poolInfoA === undefined) continue;\r\n\r\n        const poolInfo = poolInfoA.state;\r\n\r\n        const priceLower = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickLower,\r\n          baseIn: true,\r\n        });\r\n        const priceUpper = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickUpper,\r\n          baseIn: true,\r\n        });\r\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n          poolInfo.sqrtPriceX64,\r\n          priceLower.tickSqrtPriceX64,\r\n          priceUpper.tickSqrtPriceX64,\r\n          position.liquidity,\r\n          false,\r\n        );\r\n\r\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())));\r\n\r\n        poolInfoA.positionAccount = [\r\n          ...(poolInfoA.positionAccount ?? []),\r\n          {\r\n            poolId: position.poolId,\r\n            nftMint: position.nftMint,\r\n\r\n            priceLower: priceLower.price,\r\n            priceUpper: priceUpper.price,\r\n            amountA,\r\n            amountB,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper,\r\n            liquidity: position.liquidity,\r\n            feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\r\n            feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\r\n            tokenFeesOwedA: position.tokenFeesOwedA,\r\n            tokenFeesOwedB: position.tokenFeesOwedB,\r\n            rewardInfos: position.rewardInfos.map((i) => ({\r\n              ...i,\r\n              pendingReward: new BN(0),\r\n            })),\r\n\r\n            leverage,\r\n            tokenFeeAmountA: new BN(0),\r\n            tokenFeeAmountB: new BN(0),\r\n          },\r\n        ];\r\n\r\n        const tickArrayLowerAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickLower,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        const tickArrayUpperAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickUpper,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`\r\n        ] = tickArrayLowerAddress;\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`\r\n        ] = tickArrayUpperAddress;\r\n      }\r\n\r\n      if (updateOwnerRewardAndFee) {\r\n        const tickArrayKeys = Object.values(keyToTickArrayAddress);\r\n        const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest });\r\n        const tickArrayLayout = {};\r\n        for (let index = 0; index < tickArrayKeys.length; index++) {\r\n          const tickArrayData = tickArrayDatas[index];\r\n          if (tickArrayData === null) continue;\r\n          const key = tickArrayKeys[index].toString();\r\n          tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data);\r\n        }\r\n\r\n        for (const { state, positionAccount } of pools) {\r\n          if (!positionAccount) continue;\r\n          for (const itemPA of positionAccount) {\r\n            const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`;\r\n            const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`;\r\n            const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()];\r\n            const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()];\r\n            const tickLowerState: Tick =\r\n              tickArrayLower.ticks[TickUtils.getTickOffsetInArray(itemPA.tickLower, state.tickSpacing)];\r\n            const tickUpperState: Tick =\r\n              tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(itemPA.tickUpper, state.tickSpacing)];\r\n            const { tokenFeeAmountA, tokenFeeAmountB } = await PositionUtils.GetPositionFees(\r\n              state,\r\n              itemPA,\r\n              tickLowerState,\r\n              tickUpperState,\r\n            );\r\n            const rewardInfos = await PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState);\r\n            itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(new BN(0)) ? tokenFeeAmountA : new BN(0);\r\n            itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(new BN(0)) ? tokenFeeAmountB : new BN(0);\r\n            for (let i = 0; i < rewardInfos.length; i++) {\r\n              itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(new BN(0)) ? rewardInfos[i] : new BN(0);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return pools;\r\n  }\r\n\r\n  static computeAmountOut({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountIn,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountIn: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n    catchLiquidityInsufficient: boolean;\r\n  }): ReturnTypeComputeAmountOut {\r\n    let sqrtPriceLimitX64: BN;\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const [baseFeeConfig, outFeeConfig] = isBaseIn\r\n      ? [poolInfo.mintA.extensions.feeConfig, poolInfo.mintB.extensions.feeConfig]\r\n      : [poolInfo.mintB.extensions.feeConfig, poolInfo.mintA.extensions.feeConfig];\r\n\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountIn = getTransferAmountFeeV2(amountIn, baseFeeConfig, epochInfo, false);\r\n\r\n    const {\r\n      allTrade,\r\n      expectedAmountOut: _expectedAmountOut,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getOutputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountIn.amount.sub(realAmountIn.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n\r\n    const amountOut = getTransferAmountFeeV2(_expectedAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _minAmountOut = _expectedAmountOut\r\n      .mul(new BN(Math.floor((1 - slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    const minAmountOut = getTransferAmountFeeV2(_minAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime: minExpirationTime(realAmountIn.expirationTime, amountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n      remainingAccounts,\r\n      executionPriceX64: _executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountOutFormat({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    amountIn,\r\n    tokenOut: _tokenOut,\r\n    slippage,\r\n    epochInfo,\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    amountIn: BN;\r\n    tokenOut: ApiV3Token;\r\n    slippage: number;\r\n    epochInfo: EpochInfo;\r\n    catchLiquidityInsufficient?: boolean;\r\n  }): ReturnTypeComputeAmountOutFormat {\r\n    const baseIn = _tokenOut.address === poolInfo.mintB.address;\r\n    const [inputMint, outMint] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n    const [baseToken, outToken] = [\r\n      new Token({\r\n        ...inputMint,\r\n        mint: inputMint.address,\r\n        isToken2022: inputMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n      new Token({\r\n        ...outMint,\r\n        mint: outMint.address,\r\n        isToken2022: outMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n    ];\r\n\r\n    const {\r\n      allTrade,\r\n      realAmountIn: _realAmountIn,\r\n      amountOut: _amountOut,\r\n      minAmountOut: _minAmountOut,\r\n      expirationTime,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    } = PoolUtils.computeAmountOut({\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint: new PublicKey(inputMint.address),\r\n      amountIn,\r\n      slippage,\r\n      epochInfo,\r\n      catchLiquidityInsufficient,\r\n    });\r\n\r\n    const realAmountIn = {\r\n      ..._realAmountIn,\r\n      amount: new TokenAmount(baseToken, _realAmountIn.amount),\r\n      fee: _realAmountIn.fee === undefined ? undefined : new TokenAmount(baseToken, _realAmountIn.fee),\r\n    };\r\n\r\n    const amountOut = {\r\n      ..._amountOut,\r\n      amount: new TokenAmount(outToken, _amountOut.amount),\r\n      fee: _amountOut.fee === undefined ? undefined : new TokenAmount(outToken, _amountOut.fee),\r\n    };\r\n    const minAmountOut = {\r\n      ..._minAmountOut,\r\n      amount: new TokenAmount(outToken, _minAmountOut.amount),\r\n      fee: _minAmountOut.fee === undefined ? undefined : new TokenAmount(outToken, _minAmountOut.fee),\r\n    };\r\n\r\n    const _currentPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: currentPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _executionPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: executionPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _fee = new TokenAmount(baseToken, fee);\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime,\r\n      currentPrice: _currentPrice,\r\n      executionPrice: _executionPrice,\r\n      priceImpact,\r\n      fee: _fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountIn({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountOut,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountOut: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n  }): ReturnTypeComputeAmountOutBaseOut {\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const feeConfigs = {\r\n      [poolInfo.mintA.address]: poolInfo.mintA.extensions.feeConfig,\r\n      [poolInfo.mintB.address]: poolInfo.mintB.extensions.feeConfig,\r\n    };\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = !isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountOut = getTransferAmountFeeV2(amountOut, feeConfigs[baseMint.toString()], epochInfo, true);\r\n\r\n    const {\r\n      expectedAmountIn: _expectedAmountIn,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getInputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountOut.amount.sub(realAmountOut.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n    );\r\n\r\n    const inMint = isBaseIn ? poolInfo.mintB.address : poolInfo.mintA.address;\r\n\r\n    const amountIn = getTransferAmountFeeV2(_expectedAmountIn, feeConfigs[inMint], epochInfo, false);\r\n    // const amountIn = getTransferAmountFee(\r\n    //   _expectedAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _maxAmountIn = _expectedAmountIn\r\n      .mul(new BN(Math.floor((1 + slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    // const maxAmountIn = getTransferAmountFee(\r\n    //   _maxAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n    const maxAmountIn = getTransferAmountFeeV2(_maxAmountIn, feeConfigs[inMint], epochInfo, true);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      amountIn,\r\n      maxAmountIn,\r\n      realAmountOut,\r\n      expirationTime: minExpirationTime(amountIn.expirationTime, realAmountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n\r\n      remainingAccounts,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeMultiplier({\r\n    poolInfo,\r\n    aprType,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprInfo = poolInfo[aprType];\r\n\r\n    const priceLower = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickLowerIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n    const priceUpper = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickUpperIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n\r\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin);\r\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax);\r\n\r\n    const sub = _maxPrice - _minPrice;\r\n\r\n    const userRange = priceUpper - priceLower;\r\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin;\r\n\r\n    let p: number;\r\n\r\n    if (sub <= 0) p = 0;\r\n    else if (userRange === sub) p = tradeRange / sub;\r\n    else if (tradeRange === sub) p = sub / userRange;\r\n    else p = (sub / tradeRange) * (sub / userRange);\r\n\r\n    return {\r\n      feeApr: aprInfo.feeApr * p,\r\n      rewardsApr: [(aprInfo.rewardApr[0] ?? 0) * p, (aprInfo.rewardApr[1] ?? 0) * p, (aprInfo.rewardApr[2] ?? 0) * p],\r\n      apr: aprInfo.apr * p,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeDelta({\r\n    poolInfo,\r\n    poolLiquidity,\r\n    aprType,\r\n    mintPrice,\r\n    liquidity,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n    chainTime,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolLiquidity: BN;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    mintPrice: { [mint: string]: { value: number } };\r\n\r\n    liquidity: BN;\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n\r\n    chainTime: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprTypeDay = aprType === \"day\" ? 1 : aprType === \"week\" ? 7 : aprType === \"month\" ? 30 : 0;\r\n    const aprInfo = poolInfo[aprType];\r\n    const mintPriceA = mintPrice[solToWSol(poolInfo.mintA.address).toString()];\r\n    const mintPriceB = mintPrice[solToWSol(poolInfo.mintB.address).toString()];\r\n    const mintDecimalsA = poolInfo.mintA.decimals;\r\n    const mintDecimalsB = poolInfo.mintB.decimals;\r\n\r\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 };\r\n\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex);\r\n\r\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        poolLiquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const poolTvl = new Decimal(poolLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n    const userTvl = new Decimal(userLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n\r\n    const p = new Decimal(1).div(poolTvl.add(userTvl));\r\n\r\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\r\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\r\n\r\n    const SECONDS_PER_YEAR = 3600 * 24 * 365;\r\n\r\n    const rewardsApr = poolInfo.rewardDefaultInfos.map((i) => {\r\n      const iDecimal = i.mint.decimals;\r\n      const iPrice = mintPrice[i.mint.address];\r\n\r\n      if (\r\n        chainTime < ((i as any).startTime ?? 0) ||\r\n        chainTime > ((i as any).endTime ?? 0) ||\r\n        !i.perSecond ||\r\n        !iPrice ||\r\n        iDecimal === undefined\r\n      )\r\n        return 0;\r\n\r\n      return new Decimal(iPrice.value)\r\n        .mul(new Decimal(i.perSecond).mul(SECONDS_PER_YEAR))\r\n        .div(new Decimal(10).pow(iDecimal))\r\n        .mul(p)\r\n        .mul(100)\r\n        .toNumber();\r\n    });\r\n\r\n    return {\r\n      feeApr,\r\n      rewardsApr,\r\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0),\r\n    };\r\n  }\r\n\r\n  static async getLiquidityAmountOutFromAmountIn({\r\n    poolInfo,\r\n    inputA,\r\n    tickLower,\r\n    tickUpper,\r\n    amount,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountHasFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    inputA: boolean;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n    epochInfo: EpochInfo;\r\n    amountHasFee: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    // const coefficient = add ? 1 - slippage : 1 + slippage;\r\n    const addFeeAmount = getTransferAmountFeeV2(\r\n      amount,\r\n      poolInfo[inputA ? \"mintA\" : \"mintB\"].extensions?.feeConfig,\r\n      epochInfo,\r\n      !amountHasFee,\r\n    );\r\n    const _amount = new BN(\r\n      new Decimal(addFeeAmount.amount.sub(addFeeAmount.fee ?? ZERO).toString()).toFixed(0), // .mul(coefficient).toFixed(0),\r\n    );\r\n\r\n    let liquidity: BN;\r\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\r\n      liquidity = inputA\r\n        ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add)\r\n        : new BN(0);\r\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\r\n      liquidity = inputA ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = inputA\r\n        ? new BN(0)\r\n        : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\r\n    }\r\n\r\n    const amountFromLiquidity = await PoolUtils.getAmountsFromLiquidity({\r\n      epochInfo,\r\n      poolInfo,\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      slippage,\r\n      add,\r\n    });\r\n    return {\r\n      liquidity,\r\n      amountA: inputA ? addFeeAmount : amountFromLiquidity.amountA,\r\n      amountB: inputA ? amountFromLiquidity.amountB : addFeeAmount,\r\n      amountSlippageA: inputA ? addFeeAmount : amountFromLiquidity.amountSlippageA,\r\n      amountSlippageB: inputA ? amountFromLiquidity.amountSlippageB : addFeeAmount,\r\n      expirationTime: amountFromLiquidity.expirationTime,\r\n    };\r\n  }\r\n\r\n  static async getAmountsFromLiquidity({\r\n    epochInfo,\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n  }: {\r\n    epochInfo: EpochInfo;\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(\r\n      SqrtPriceMath.priceToSqrtPriceX64(new Decimal(poolInfo.price), poolInfo.mintA.decimals, poolInfo.mintB.decimals),\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      add,\r\n    );\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        amounts.amountA.muln(coefficientRe),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        amounts.amountB.muln(coefficientRe),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n\r\n  static async fetchComputeMultipleClmmInfo({\r\n    connection,\r\n    poolList,\r\n    rpcDataMap = {},\r\n  }: {\r\n    rpcDataMap?: Record<string, ReturnType<typeof PoolInfoLayout.decode>>;\r\n    connection: Connection;\r\n    poolList: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">[];\r\n  }): Promise<Record<string, ComputeClmmPoolInfo>> {\r\n    const fetchRpcList = poolList.filter((p) => !rpcDataMap[p.id]).map((p) => new PublicKey(p.id));\r\n    const rpcRes = await getMultipleAccountsInfo(connection, fetchRpcList);\r\n    rpcRes.forEach((r, idx) => {\r\n      if (!r) return;\r\n      rpcDataMap[fetchRpcList[idx].toBase58()] = PoolInfoLayout.decode(r.data);\r\n    });\r\n\r\n    const pdaList = poolList.map(\r\n      (poolInfo) => getPdaExBitmapAccount(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n    );\r\n\r\n    const exBitData = await PoolUtils.fetchExBitmaps({\r\n      connection,\r\n      exBitmapAddress: pdaList,\r\n      batchRequest: false,\r\n    });\r\n\r\n    return poolList.reduce(\r\n      (acc, cur) => ({\r\n        ...acc,\r\n        [cur.id]: {\r\n          ...rpcDataMap[cur.id],\r\n          id: new PublicKey(cur.id),\r\n          version: 6,\r\n          programId: new PublicKey(cur.programId),\r\n          mintA: cur.mintA,\r\n          mintB: cur.mintB,\r\n          ammConfig: {\r\n            ...cur.config,\r\n            id: new PublicKey(cur.config.id),\r\n            fundOwner: \"\",\r\n          },\r\n          currentPrice: new Decimal(cur.price),\r\n          exBitmapAccount: getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey,\r\n          exBitmapInfo:\r\n            exBitData[getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey.toBase58()],\r\n          startTime: rpcDataMap[cur.id].startTime.toNumber(),\r\n          rewardInfos: rpcDataMap[cur.id].rewardInfos,\r\n        },\r\n      }),\r\n      {} as Record<string, ComputeClmmPoolInfo>,\r\n    );\r\n  }\r\n\r\n  static async fetchComputeClmmInfo({\r\n    connection,\r\n    poolInfo,\r\n    rpcData,\r\n  }: {\r\n    connection: Connection;\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">;\r\n    rpcData?: ReturnType<typeof PoolInfoLayout.decode>;\r\n  }): Promise<ComputeClmmPoolInfo> {\r\n    return (\r\n      await this.fetchComputeMultipleClmmInfo({\r\n        connection,\r\n        rpcDataMap: rpcData ? { [poolInfo.id]: rpcData } : undefined,\r\n        poolList: [poolInfo],\r\n      })\r\n    )[poolInfo.id];\r\n  }\r\n}\r\n\r\nexport function getLiquidityFromAmounts({\r\n  poolInfo,\r\n  tickLower,\r\n  tickUpper,\r\n  amountA,\r\n  amountB,\r\n  slippage,\r\n  add,\r\n  epochInfo,\r\n  amountHasFee,\r\n}: {\r\n  poolInfo: ApiV3PoolInfoConcentratedItem;\r\n  tickLower: number;\r\n  tickUpper: number;\r\n  amountA: BN;\r\n  amountB: BN;\r\n  slippage: number;\r\n  add: boolean;\r\n  epochInfo: EpochInfo;\r\n  amountHasFee: boolean;\r\n}): ReturnTypeGetLiquidityAmountOut {\r\n  const [_tickLower, _tickUpper, _amountA, _amountB] =\r\n    tickLower < tickUpper ? [tickLower, tickUpper, amountA, amountB] : [tickUpper, tickLower, amountB, amountA];\r\n  const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n    new Decimal(poolInfo.price),\r\n    poolInfo.mintA.decimals,\r\n    poolInfo.mintB.decimals,\r\n  );\r\n  const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(_tickLower);\r\n  const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(_tickUpper);\r\n\r\n  const [amountFeeA, amountFeeB] = [\r\n    getTransferAmountFeeV2(_amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n    getTransferAmountFeeV2(_amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n  ];\r\n\r\n  const liquidity = LiquidityMath.getLiquidityFromTokenAmounts(\r\n    sqrtPriceX64,\r\n    sqrtPriceX64A,\r\n    sqrtPriceX64B,\r\n    amountFeeA.amount.sub(amountFeeA.fee ?? ZERO),\r\n    amountFeeB.amount.sub(amountFeeB.fee ?? ZERO),\r\n  );\r\n\r\n  return LiquidityMath.getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee: !amountHasFee,\r\n  });\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport function clmmComputeInfoToApiInfo(pool: ComputeClmmPoolInfo): ApiV3PoolInfoConcentratedItem {\r\n  return {\r\n    ...pool,\r\n    type: \"Concentrated\",\r\n    programId: pool.programId.toString(),\r\n    id: pool.id.toString(),\r\n    rewardDefaultInfos: [],\r\n    rewardDefaultPoolInfos: \"Clmm\",\r\n    price: pool.currentPrice.toNumber(),\r\n    mintAmountA: 0,\r\n    mintAmountB: 0,\r\n    feeRate: pool.ammConfig.tradeFeeRate,\r\n    openTime: pool.startTime.toString(),\r\n    tvl: 0,\r\n\r\n    day: mockRewardData,\r\n    week: mockRewardData,\r\n    month: mockRewardData,\r\n    pooltype: [],\r\n\r\n    farmUpcomingCount: 0,\r\n    farmOngoingCount: 0,\r\n    farmFinishedCount: 0,\r\n    burnPercent: 0,\r\n    config: {\r\n      ...pool.ammConfig,\r\n      id: pool.ammConfig.id.toString(),\r\n      defaultRange: 0,\r\n      defaultRangePoint: [],\r\n    },\r\n  };\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common\";\r\nimport { ClmmPositionLayout } from \"../layout\";\r\nimport { ClmmPoolInfo, ClmmPoolPersonalPosition, ClmmPoolRewardInfo, GetAmountParams, ReturnTypeGetLiquidityAmountOut } from \"../type\";\r\nimport { Q64 } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath } from \"./math\";\r\nimport { Tick } from \"./tick\";\r\n\r\nexport class PositionUtils {\r\n  static getfeeGrowthInside(\r\n    poolState: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { feeGrowthInsideX64A: BN; feeGrowthInsideBX64: BN } {\r\n    let feeGrowthBelowX64A = new BN(0);\r\n    let feeGrowthBelowX64B = new BN(0);\r\n    if (poolState.tickCurrent >= tickLowerState.tick) {\r\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\r\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(tickLowerState.feeGrowthOutsideX64A);\r\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(tickLowerState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    let feeGrowthAboveX64A = new BN(0);\r\n    let feeGrowthAboveX64B = new BN(0);\r\n    if (poolState.tickCurrent < tickUpperState.tick) {\r\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\r\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(tickUpperState.feeGrowthOutsideX64A);\r\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(tickUpperState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\r\n      feeGrowthAboveX64A,\r\n    );\r\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\r\n      feeGrowthAboveX64B,\r\n    );\r\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\r\n  }\r\n\r\n  static GetPositionFees(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionFeesV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionRewardsV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64B\"> & {\r\n      rewardInfos: { rewardGrowthGlobalX64: BN }[];\r\n    },\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInsideV2(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static GetPositionRewards(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInside(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static getRewardGrowthInside(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: ClmmPoolRewardInfo[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getRewardGrowthInsideV2(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: Pick<ClmmPoolRewardInfo, \"rewardGrowthGlobalX64\">[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getAmountsFromLiquidity({\r\n    poolInfo,\r\n    ownerPosition,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n  }: GetAmountParams): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, TICK_ARRAY_SIZE, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { isZero, leadingZeros, leastSignificantBit, mostSignificantBit, trailingZeros } from \"./util\";\r\nimport { TickArrayBitmapExtensionLayout } from \"../layout\";\r\n\r\nexport const EXTENSION_TICKARRAY_BITMAP_SIZE = 14;\r\n\r\nexport class TickArrayBitmap {\r\n  public static maxTickInTickarrayBitmap(tickSpacing: number): number {\r\n    return tickSpacing * TICK_ARRAY_SIZE * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  public static getBitmapTickBoundary(\r\n    tickarrayStartIndex: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    minValue: number;\r\n    maxValue: number;\r\n  } {\r\n    const ticksInOneBitmap = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    let m = Math.floor(Math.abs(tickarrayStartIndex) / ticksInOneBitmap);\r\n    if (tickarrayStartIndex < 0 && Math.abs(tickarrayStartIndex) % ticksInOneBitmap != 0) m += 1;\r\n\r\n    const minValue = ticksInOneBitmap * m;\r\n\r\n    return tickarrayStartIndex < 0\r\n      ? { minValue: -minValue, maxValue: -minValue + ticksInOneBitmap }\r\n      : { minValue, maxValue: minValue + ticksInOneBitmap };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    bitMap: BN,\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): { isInit: boolean; tickIndex: number } {\r\n    if (!TickQuery.checkIsValidStartIndex(lastTickArrayStartIndex, tickSpacing))\r\n      throw Error(\"nextInitializedTickArrayStartIndex check error\");\r\n\r\n    const tickBoundary = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - TickQuery.tickCount(tickSpacing)\r\n      : lastTickArrayStartIndex + TickQuery.tickCount(tickSpacing);\r\n\r\n    if (nextTickArrayStartIndex < -tickBoundary || nextTickArrayStartIndex >= tickBoundary) {\r\n      return { isInit: false, tickIndex: lastTickArrayStartIndex };\r\n    }\r\n\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    let compressed = nextTickArrayStartIndex / multiplier + 512;\r\n\r\n    if (nextTickArrayStartIndex < 0 && nextTickArrayStartIndex % multiplier != 0) {\r\n      compressed--;\r\n    }\r\n\r\n    const bitPos = Math.abs(compressed);\r\n\r\n    if (zeroForOne) {\r\n      const offsetBitMap = bitMap.shln(1024 - bitPos - 1);\r\n      const nextBit = mostSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos - nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: -tickBoundary };\r\n      }\r\n    } else {\r\n      const offsetBitMap = bitMap.shrn(bitPos);\r\n      const nextBit = leastSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos + nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: tickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class TickArrayBitmapExtensionUtils {\r\n  public static getBitmapOffset(tickIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n    this.checkExtensionBoundary(tickIndex, tickSpacing);\r\n\r\n    const ticksInOneBitmap = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let offset = Math.floor(Math.abs(tickIndex) / ticksInOneBitmap) - 1;\r\n\r\n    if (tickIndex < 0 && Math.abs(tickIndex) % ticksInOneBitmap === 0) offset--;\r\n    return offset;\r\n  }\r\n\r\n  public static getBitmap(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  ): { offset: number; tickarrayBitmap: BN[] } {\r\n    const offset = this.getBitmapOffset(tickIndex, tickSpacing);\r\n    if (tickIndex < 0) {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.negativeTickArrayBitmap[offset] };\r\n    } else {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.positiveTickArrayBitmap[offset] };\r\n    }\r\n  }\r\n\r\n  public static checkExtensionBoundary(tickIndex: number, tickSpacing: number) {\r\n    const { positiveTickBoundary, negativeTickBoundary } = this.extensionTickBoundary(tickSpacing);\r\n\r\n    if (tickIndex >= negativeTickBoundary && tickIndex < positiveTickBoundary) {\r\n      throw Error(\"checkExtensionBoundary -> InvalidTickArrayBoundary\");\r\n    }\r\n  }\r\n\r\n  public static extensionTickBoundary(tickSpacing: number): {\r\n    positiveTickBoundary: number;\r\n    negativeTickBoundary: number;\r\n  } {\r\n    const positiveTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n\r\n    const negativeTickBoundary = -positiveTickBoundary;\r\n\r\n    if (MAX_TICK <= positiveTickBoundary)\r\n      throw Error(`extensionTickBoundary check error: ${MAX_TICK}, ${positiveTickBoundary}`);\r\n    if (negativeTickBoundary <= MIN_TICK)\r\n      throw Error(`extensionTickBoundary check error: ${negativeTickBoundary}, ${MIN_TICK}`);\r\n\r\n    return { positiveTickBoundary, negativeTickBoundary };\r\n  }\r\n\r\n  public static checkTickArrayIsInit(\r\n    tickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  ): { isInitialized: boolean; startIndex: number } {\r\n    const { tickarrayBitmap } = this.getBitmap(tickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(tickArrayStartIndex, tickSpacing);\r\n\r\n    return {\r\n      isInitialized: TickUtils.mergeTickArrayBitmap(tickarrayBitmap).testn(tickArrayOffsetInBitmap),\r\n      startIndex: tickArrayStartIndex,\r\n    };\r\n  }\r\n\r\n  public static nextInitializedTickArrayFromOneBitmap(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const multiplier = TickQuery.tickCount(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - multiplier\r\n      : lastTickArrayStartIndex + multiplier;\r\n    const { tickarrayBitmap } = this.getBitmap(nextTickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    return this.nextInitializedTickArrayInBitmap(tickarrayBitmap, nextTickArrayStartIndex, tickSpacing, zeroForOne);\r\n  }\r\n\r\n  public static nextInitializedTickArrayInBitmap(\r\n    tickarrayBitmap: BN[],\r\n    nextTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const { minValue: bitmapMinTickBoundary, maxValue: bitmapMaxTickBoundary } = TickArrayBitmap.getBitmapTickBoundary(\r\n      nextTickArrayStartIndex,\r\n      tickSpacing,\r\n    );\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(nextTickArrayStartIndex, tickSpacing);\r\n    if (zeroForOne) {\r\n      // tick from upper to lower\r\n      // find from highter bits to lower bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shln(\r\n        TICK_ARRAY_BITMAP_SIZE - 1 - tickArrayOffsetInBitmap,\r\n      );\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : leadingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex - nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMinTickBoundary };\r\n      }\r\n    } else {\r\n      // tick from lower to upper\r\n      // find from lower bits to highter bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shrn(tickArrayOffsetInBitmap);\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : trailingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex + nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMaxTickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n\r\n  public static tickArrayOffsetInBitmap(tickArrayStartIndex: number, tickSpacing: number): number {\r\n    const m = Math.abs(tickArrayStartIndex) % TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let tickArrayOffsetInBitmap = Math.floor(m / TickQuery.tickCount(tickSpacing));\r\n    if (tickArrayStartIndex < 0 && m != 0) {\r\n      tickArrayOffsetInBitmap = TICK_ARRAY_BITMAP_SIZE - tickArrayOffsetInBitmap;\r\n    }\r\n    return tickArrayOffsetInBitmap;\r\n  }\r\n}\r\n","import { blob, bool, i128, i64, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\r\nimport { EXTENSION_TICKARRAY_BITMAP_SIZE } from \"./utils/tickarrayBitmap\";\r\n\r\nexport const ClmmConfigLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  u16(\"index\"),\r\n  publicKey(\"\"),\r\n  u32(\"protocolFeeRate\"),\r\n  u32(\"tradeFeeRate\"),\r\n  u16(\"tickSpacing\"),\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const ObservationLayout = struct([u32(\"blockTimestamp\"), i64(\"tickCumulative\"), seq(u64(), 4)]);\r\nexport const ObservationInfoLayout = struct([\r\n  blob(8),\r\n  bool(\"initialized\"),\r\n  u64(\"recentEpoch\"),\r\n  u16(\"observationIndex\"),\r\n  publicKey(\"poolId\"),\r\n  seq(ObservationLayout, 100, \"observations\"),\r\n  seq(u64(), 4),\r\n]);\r\n\r\nexport const RewardInfo = struct([\r\n  u8(\"rewardState\"),\r\n  u64(\"openTime\"),\r\n  u64(\"endTime\"),\r\n  u64(\"lastUpdateTime\"),\r\n  u128(\"emissionsPerSecondX64\"),\r\n  u64(\"rewardTotalEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  publicKey(\"tokenMint\"),\r\n  publicKey(\"tokenVault\"),\r\n  publicKey(\"creator\"),\r\n  u128(\"rewardGrowthGlobalX64\"),\r\n]);\r\nexport const PoolInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"ammConfig\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n  publicKey(\"observationId\"),\r\n  u8(\"mintDecimalsA\"),\r\n  u8(\"mintDecimalsB\"),\r\n  u16(\"tickSpacing\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"sqrtPriceX64\"),\r\n  s32(\"tickCurrent\"),\r\n  u32(),\r\n  u128(\"feeGrowthGlobalX64A\"),\r\n  u128(\"feeGrowthGlobalX64B\"),\r\n  u64(\"protocolFeesTokenA\"),\r\n  u64(\"protocolFeesTokenB\"),\r\n\r\n  u128(\"swapInAmountTokenA\"),\r\n  u128(\"swapOutAmountTokenB\"),\r\n  u128(\"swapInAmountTokenB\"),\r\n  u128(\"swapOutAmountTokenA\"),\r\n\r\n  u8(\"status\"),\r\n\r\n  seq(u8(), 7, \"\"),\r\n\r\n  seq(RewardInfo, 3, \"rewardInfos\"),\r\n  seq(u64(), 16, \"tickArrayBitmap\"),\r\n\r\n  u64(\"totalFeesTokenA\"),\r\n  u64(\"totalFeesClaimedTokenA\"),\r\n  u64(\"totalFeesTokenB\"),\r\n  u64(\"totalFeesClaimedTokenB\"),\r\n\r\n  u64(\"fundFeesTokenA\"),\r\n  u64(\"fundFeesTokenB\"),\r\n\r\n  u64(\"startTime\"),\r\n\r\n  seq(u64(), 15 * 4 - 3, \"padding\"),\r\n]);\r\n\r\nexport const PositionRewardInfoLayout = struct([u128(\"growthInsideLastX64\"), u64(\"rewardAmountOwed\")]);\r\nexport const PositionInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"nftMint\"),\r\n  publicKey(\"poolId\"),\r\n\r\n  s32(\"tickLower\"),\r\n  s32(\"tickUpper\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n\r\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport type ClmmPositionLayout = ReturnType<typeof PositionInfoLayout.decode>;\r\n\r\nexport const ProtocolPositionLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"poolId\"),\r\n  s32(\"tickLowerIndex\"),\r\n  s32(\"tickUpperIndex\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n  seq(u128(), 3, \"rewardGrowthInside\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const TickLayout = struct([\r\n  s32(\"tick\"),\r\n  i128(\"liquidityNet\"),\r\n  u128(\"liquidityGross\"),\r\n  u128(\"feeGrowthOutsideX64A\"),\r\n  u128(\"feeGrowthOutsideX64B\"),\r\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\r\n\r\n  seq(u32(), 13, \"\"),\r\n]);\r\n\r\nexport const TickArrayLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  s32(\"startTickIndex\"),\r\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\r\n  u8(\"initializedTickCount\"),\r\n\r\n  seq(u8(), 115, \"\"),\r\n]);\r\n\r\nexport const OperationLayout = struct([blob(329), seq(publicKey(), 100, \"whitelistMints\")]);\r\n\r\nexport const TickArrayBitmapExtensionLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"positiveTickArrayBitmap\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"negativeTickArrayBitmap\"),\r\n]);\r\n\r\nexport const LockPositionLayout = struct([\r\n  u64(),\r\n  u8(\"bump\"),\r\n  publicKey(\"owner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  seq(u64(), 8),\r\n]);\r\n\r\nexport const LockClPositionLayoutV2 = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"lockOwner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  publicKey(\"lockNftMint\"),\r\n  u64(\"recentEpoch\"),\r\n  seq(u64(), 8),\r\n]);\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { findProgramAddress, ProgramAddress } from \"@/common\";\r\nimport { u16ToBytes, POOL_SEED, POOL_VAULT_SEED } from \"../clmm\";\r\n\r\nexport const AUTH_SEED = Buffer.from(\"vault_auth_seed\", \"utf8\");\r\nexport const CONFIG_SEED = Buffer.from(\"global_config\", \"utf8\");\r\nexport const POOL_VESTING_SEED = Buffer.from(\"pool_vesting\", \"utf8\");\r\nexport const PLATFORM_SEED = Buffer.from(\"platform_config\", \"utf8\");\r\nexport const PLATFORM_FEE_VAULT_AUTH_SEED = Buffer.from(\"platform_fee_vault_auth_seed\", \"utf8\");\r\nexport const CREATOR_FEE_VAULT_AUTH_SEED = Buffer.from(\"creator_fee_vault_auth_seed\", \"utf8\");\r\n\r\nexport function getPdaLaunchpadAuth(programId: PublicKey): ProgramAddress {\r\n  return findProgramAddress([AUTH_SEED], programId);\r\n}\r\n\r\nexport function getPdaLaunchpadConfigId(\r\n  programId: PublicKey,\r\n  mintB: PublicKey,\r\n  curveType: number,\r\n  index: number,\r\n): ProgramAddress {\r\n  return findProgramAddress([CONFIG_SEED, mintB.toBuffer(), u8ToBytes(curveType), u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getPdaLaunchpadPoolId(programId: PublicKey, mintA: PublicKey, mintB: PublicKey): ProgramAddress {\r\n  return findProgramAddress([POOL_SEED, mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLaunchpadVaultId(programId: PublicKey, poolId: PublicKey, mint: PublicKey): ProgramAddress {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), mint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaCpiEvent(programId: PublicKey): ProgramAddress {\r\n  return findProgramAddress([Buffer.from(\"__event_authority\", \"utf8\")], programId);\r\n}\r\n\r\nexport function u8ToBytes(num: number) {\r\n  const arr = new ArrayBuffer(1);\r\n  const view = new DataView(arr);\r\n  view.setUint8(0, num);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\n// export function u16ToBytes(num: number): Uint8Array<ArrayBuffer> {\r\n//   const arr = new ArrayBuffer(2);\r\n//   const view = new DataView(arr);\r\n//   view.setUint16(0, num, false);\r\n//   return new Uint8Array(arr);\r\n// }\r\n\r\nexport function getPdaPlatformId(programId: PublicKey, platformAdminWallet: PublicKey): ProgramAddress {\r\n  return findProgramAddress([PLATFORM_SEED, platformAdminWallet.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaVestId(programId: PublicKey, poolId: PublicKey, owner: PublicKey): ProgramAddress {\r\n  return findProgramAddress([POOL_VESTING_SEED, poolId.toBuffer(), owner.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPlatformVault(programId: PublicKey, platformId: PublicKey, mintB: PublicKey): ProgramAddress {\r\n  return findProgramAddress([platformId.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPlatformFeeVaultAuth(programId: PublicKey): ProgramAddress {\r\n  return findProgramAddress([PLATFORM_FEE_VAULT_AUTH_SEED], programId);\r\n}\r\n\r\nexport function getPdaCreatorVault(programId: PublicKey, creator: PublicKey, mintB: PublicKey): ProgramAddress {\r\n  return findProgramAddress([creator.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaCreatorFeeVaultAuth(programId: PublicKey): ProgramAddress {\r\n  return findProgramAddress([CREATOR_FEE_VAULT_AUTH_SEED], programId);\r\n}\r\n","import { DEVNET_PROGRAM_ID, METADATA_PROGRAM_ID, RENT_PROGRAM_ID } from \"@/common\";\r\nimport { publicKey, str, struct, u16, u64, u8 } from \"@/marshmallow\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { AccountMeta, PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { BondingCurveParam } from \"./layout\";\r\nimport { getPdaCpiEvent } from \"./pda\";\r\nimport { CpmmCreatorFeeOn } from \"./type\";\r\nexport const anchorDataBuf = {\r\n  initialize: Buffer.from([175, 175, 109, 31, 13, 152, 155, 237]),\r\n  initializeV2: Buffer.from([67, 153, 175, 39, 218, 16, 38, 32]),\r\n\r\n  buyExactIn: Buffer.from([250, 234, 13, 123, 213, 156, 19, 236]),\r\n  buyExactOut: Buffer.from([24, 211, 116, 40, 105, 3, 153, 56]),\r\n  sellExactIn: Buffer.from([149, 39, 222, 155, 211, 124, 152, 26]),\r\n  sellExactOut: Buffer.from([95, 200, 71, 34, 8, 9, 11, 166]),\r\n  createVestingAccount: Buffer.from([129, 178, 2, 13, 217, 172, 230, 218]),\r\n  claimVestedToken: Buffer.from([49, 33, 104, 30, 189, 157, 79, 35]),\r\n\r\n  createPlatformConfig: Buffer.from([176, 90, 196, 175, 253, 113, 220, 20]),\r\n  claimPlatformFee: Buffer.from([156, 39, 208, 135, 76, 237, 61, 72]),\r\n  updatePlaformConfig: Buffer.from([195, 60, 76, 129, 146, 45, 67, 143]),\r\n  initializeWithToken2022: Buffer.from([37, 190, 126, 222, 44, 154, 171, 17]),\r\n  claimPlatformFeeFromVault: Buffer.from([117, 241, 198, 168, 248, 218, 80, 29]),\r\n  claimCreatorFee: Buffer.from([26, 97, 138, 203, 132, 171, 141, 252]),\r\n\r\n  updatePlatformCurveParam: Buffer.from([138, 144, 138, 250, 220, 128, 4, 57]),\r\n  removePlatformCurveParam: Buffer.from([27, 30, 62, 169, 93, 224, 24, 145]),\r\n};\r\n\r\nexport function initialize(\r\n  programId: PublicKey,\r\n\r\n  payer: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  metadataId: PublicKey,\r\n\r\n  decimals: number,\r\n  name: string,\r\n  symbol: string,\r\n  uri: string,\r\n\r\n  curveParam: ({ type: \"ConstantCurve\"; totalSellA: BN } | { type: \"FixedCurve\" } | { type: \"LinearCurve\" }) & {\r\n    migrateType: \"amm\" | \"cpmm\";\r\n    supply: BN;\r\n    totalFundRaisingB: BN;\r\n  },\r\n\r\n  totalLockedAmount: BN,\r\n  cliffPeriod: BN,\r\n  unlockPeriod: BN,\r\n): TransactionInstruction {\r\n  throw new Error(\"*** launchlab initialize has been deprecated, please use initializeV2 instead! ***\");\r\n\r\n  const dataLyaout1 = struct([u8(\"decimals\"), str(\"name\"), str(\"symbol\"), str(\"uri\")]);\r\n  const dataLyaout3 = struct([u64(\"totalLockedAmount\"), u64(\"cliffPeriod\"), u64(\"unlockPeriod\")]);\r\n\r\n  const dataLayout21 = struct([u8(\"index\"), u64(\"supply\"), u64(\"totalFundRaisingB\"), u8(\"migrateType\")]);\r\n  const dataLayout22 = struct([\r\n    u8(\"index\"),\r\n    u64(\"supply\"),\r\n    u64(\"totalSellA\"),\r\n    u64(\"totalFundRaisingB\"),\r\n    u8(\"migrateType\"),\r\n  ]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: creator, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: true, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: metadataId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data1 = Buffer.alloc(\r\n    Buffer.from(name, \"utf-8\").length +\r\n      Buffer.from(symbol, \"utf-8\").length +\r\n      Buffer.from(uri, \"utf-8\").length +\r\n      4 * 3 +\r\n      1,\r\n  );\r\n  const data3 = Buffer.alloc(dataLyaout3.span);\r\n\r\n  const data2 = Buffer.alloc(curveParam.type === \"ConstantCurve\" ? dataLayout22.span : dataLayout21.span);\r\n\r\n  dataLyaout1.encode({ decimals, name, symbol, uri }, data1);\r\n  if (curveParam.type === \"ConstantCurve\") {\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    dataLayout22.encode({ index: 0, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"FixedCurve\") {\r\n    dataLayout21.encode({ index: 1, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"LinearCurve\") {\r\n    dataLayout21.encode({ index: 2, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  }\r\n\r\n  dataLyaout3.encode({ totalLockedAmount, cliffPeriod, unlockPeriod }, data3);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initialize, ...data1, ...data2, ...data3]),\r\n  });\r\n}\r\n\r\nexport function initializeV2(\r\n  programId: PublicKey,\r\n\r\n  payer: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  metadataId: PublicKey,\r\n\r\n  decimals: number,\r\n  name: string,\r\n  symbol: string,\r\n  uri: string,\r\n\r\n  curveParam: ({ type: \"ConstantCurve\"; totalSellA: BN } | { type: \"FixedCurve\" } | { type: \"LinearCurve\" }) & {\r\n    migrateType: \"amm\" | \"cpmm\";\r\n    supply: BN;\r\n    totalFundRaisingB: BN;\r\n  },\r\n\r\n  totalLockedAmount: BN,\r\n  cliffPeriod: BN,\r\n  unlockPeriod: BN,\r\n\r\n  cpmmCreatorFeeOn: CpmmCreatorFeeOn,\r\n): TransactionInstruction {\r\n  const dataLyaout1 = struct([u8(\"decimals\"), str(\"name\"), str(\"symbol\"), str(\"uri\")]);\r\n  const dataLyaout3 = struct([\r\n    u64(\"totalLockedAmount\"),\r\n    u64(\"cliffPeriod\"),\r\n    u64(\"unlockPeriod\"),\r\n    u8(\"cpmmCreatorFeeOn\"),\r\n  ]);\r\n\r\n  const dataLayout21 = struct([u8(\"index\"), u64(\"supply\"), u64(\"totalFundRaisingB\"), u8(\"migrateType\")]);\r\n  const dataLayout22 = struct([\r\n    u8(\"index\"),\r\n    u64(\"supply\"),\r\n    u64(\"totalSellA\"),\r\n    u64(\"totalFundRaisingB\"),\r\n    u8(\"migrateType\"),\r\n  ]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: creator, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: true, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: metadataId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data1 = Buffer.alloc(\r\n    Buffer.from(name, \"utf-8\").length +\r\n      Buffer.from(symbol, \"utf-8\").length +\r\n      Buffer.from(uri, \"utf-8\").length +\r\n      4 * 3 +\r\n      1,\r\n  );\r\n  const data3 = Buffer.alloc(dataLyaout3.span);\r\n\r\n  const data2 = Buffer.alloc(curveParam.type === \"ConstantCurve\" ? dataLayout22.span : dataLayout21.span);\r\n\r\n  dataLyaout1.encode({ decimals, name, symbol, uri }, data1);\r\n  if (curveParam.type === \"ConstantCurve\") {\r\n    dataLayout22.encode({ index: 0, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"FixedCurve\") {\r\n    dataLayout21.encode({ index: 1, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"LinearCurve\") {\r\n    dataLayout21.encode({ index: 2, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  }\r\n\r\n  dataLyaout3.encode({ totalLockedAmount, cliffPeriod, unlockPeriod, cpmmCreatorFeeOn }, data3);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initializeV2, ...data1, ...data2, ...data3]),\r\n  });\r\n}\r\n\r\nexport function initializeWithToken2022(\r\n  programId: PublicKey,\r\n\r\n  payer: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n\r\n  decimals: number,\r\n  name: string,\r\n  symbol: string,\r\n  uri: string,\r\n\r\n  curveParam: ({ type: \"ConstantCurve\"; totalSellA: BN } | { type: \"FixedCurve\" } | { type: \"LinearCurve\" }) & {\r\n    migrateType: \"amm\" | \"cpmm\";\r\n    supply: BN;\r\n    totalFundRaisingB: BN;\r\n  },\r\n\r\n  totalLockedAmount: BN,\r\n  cliffPeriod: BN,\r\n  unlockPeriod: BN,\r\n\r\n  cpmmCreatorFeeOn: CpmmCreatorFeeOn,\r\n  transferFeeExtensionParams?: { transferFeeBasePoints: number; maxinumFee: BN },\r\n): TransactionInstruction {\r\n  const dataLyaout1 = struct([u8(\"decimals\"), str(\"name\"), str(\"symbol\"), str(\"uri\")]);\r\n  const dataLyaout3 = struct([\r\n    u64(\"totalLockedAmount\"),\r\n    u64(\"cliffPeriod\"),\r\n    u64(\"unlockPeriod\"),\r\n    u8(\"cpmmCreatorFeeOn\"),\r\n    u8(\"transferFeeExtensionParamsOption\"),\r\n    struct([u16(\"transferFeeBasePoints\"), u64(\"maxinumFee\")]).replicate(\"transferFeeExtensionParams\"),\r\n  ]);\r\n\r\n  const dataLayout21 = struct([u8(\"index\"), u64(\"supply\"), u64(\"totalFundRaisingB\"), u8(\"migrateType\")]);\r\n  const dataLayout22 = struct([\r\n    u8(\"index\"),\r\n    u64(\"supply\"),\r\n    u64(\"totalSellA\"),\r\n    u64(\"totalFundRaisingB\"),\r\n    u8(\"migrateType\"),\r\n  ]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: creator, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: true, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data1 = Buffer.alloc(\r\n    Buffer.from(name, \"utf-8\").length +\r\n      Buffer.from(symbol, \"utf-8\").length +\r\n      Buffer.from(uri, \"utf-8\").length +\r\n      4 * 3 +\r\n      1,\r\n  );\r\n  const data3 = Buffer.alloc(dataLyaout3.span);\r\n\r\n  const data2 = Buffer.alloc(curveParam.type === \"ConstantCurve\" ? dataLayout22.span : dataLayout21.span);\r\n\r\n  dataLyaout1.encode({ decimals, name, symbol, uri }, data1);\r\n  if (curveParam.type === \"ConstantCurve\") {\r\n    dataLayout22.encode({ index: 0, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"FixedCurve\") {\r\n    dataLayout21.encode({ index: 1, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  } else if (curveParam.type === \"LinearCurve\") {\r\n    dataLayout21.encode({ index: 2, ...curveParam, migrateType: curveParam.migrateType === \"amm\" ? 0 : 1 }, data2);\r\n  }\r\n\r\n  dataLyaout3.encode(\r\n    {\r\n      totalLockedAmount,\r\n      cliffPeriod,\r\n      unlockPeriod,\r\n      cpmmCreatorFeeOn,\r\n      transferFeeExtensionParamsOption: transferFeeExtensionParams ? 1 : 0,\r\n      transferFeeExtensionParams: transferFeeExtensionParams ?? { transferFeeBasePoints: 0, maxinumFee: new BN(0) },\r\n    },\r\n    data3,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initializeWithToken2022, ...data1, ...data2, ...data3]),\r\n  });\r\n}\r\n\r\nexport function buyExactInInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  platformClaimFeeVault: PublicKey,\r\n  creatorClaimFeeVault: PublicKey,\r\n\r\n  amountB: BN,\r\n  minAmountA: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountB\"), u64(\"minAmountA\"), u64(\"shareFeeRate\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: true },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  keys.push({ pubkey: SystemProgram.programId, isSigner: false, isWritable: false });\r\n  keys.push({ pubkey: platformClaimFeeVault, isSigner: false, isWritable: true });\r\n  keys.push({ pubkey: creatorClaimFeeVault, isSigner: false, isWritable: true });\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountB,\r\n      minAmountA,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.buyExactIn, ...data]),\r\n  });\r\n}\r\n\r\nexport function buyExactOutInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  platformClaimFeeVault: PublicKey,\r\n  creatorClaimFeeVault: PublicKey,\r\n\r\n  amountA: BN,\r\n  maxAmountB: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountA\"), u64(\"maxAmountB\"), u64(\"shareFeeRate\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: true },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  keys.push({ pubkey: SystemProgram.programId, isSigner: false, isWritable: false });\r\n  keys.push({ pubkey: platformClaimFeeVault, isSigner: false, isWritable: true });\r\n  keys.push({ pubkey: creatorClaimFeeVault, isSigner: false, isWritable: true });\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountA,\r\n      maxAmountB,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.buyExactOut, ...data]),\r\n  });\r\n}\r\n\r\nexport function sellExactInInstruction(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  platformClaimFeeVault: PublicKey,\r\n  creatorClaimFeeVault: PublicKey,\r\n\r\n  amountA: BN,\r\n  minAmountB: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountA\"), u64(\"minAmountB\"), u64(\"shareFeeRate\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: true },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  keys.push({ pubkey: SystemProgram.programId, isSigner: false, isWritable: false });\r\n  keys.push({ pubkey: platformClaimFeeVault, isSigner: false, isWritable: true });\r\n  keys.push({ pubkey: creatorClaimFeeVault, isSigner: false, isWritable: true });\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountA,\r\n      minAmountB,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.sellExactIn, ...data]),\r\n  });\r\n}\r\n\r\nexport function sellExactOut(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  configId: PublicKey,\r\n  platformId: PublicKey,\r\n  poolId: PublicKey,\r\n  userTokenAccountA: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n\r\n  platformClaimFeeVault: PublicKey,\r\n  creatorClaimFeeVault: PublicKey,\r\n\r\n  amountB: BN,\r\n  maxAmountA: BN,\r\n  shareFeeRate?: BN,\r\n\r\n  shareFeeReceiver?: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountB\"), u64(\"maxAmountA\"), u64(\"shareFeeRate\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: true },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: getPdaCpiEvent(programId).publicKey, isSigner: false, isWritable: false },\r\n    { pubkey: programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  if (shareFeeReceiver) {\r\n    keys.push({ pubkey: shareFeeReceiver, isSigner: false, isWritable: true });\r\n  }\r\n\r\n  keys.push({ pubkey: SystemProgram.programId, isSigner: false, isWritable: false });\r\n  keys.push({ pubkey: platformClaimFeeVault, isSigner: false, isWritable: true });\r\n  keys.push({ pubkey: creatorClaimFeeVault, isSigner: false, isWritable: true });\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountB,\r\n      maxAmountA,\r\n      shareFeeRate: shareFeeRate ?? new BN(0),\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.sellExactOut, ...data]),\r\n  });\r\n}\r\n\r\nexport function claimVestedToken(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n\r\n  vestingRecord: PublicKey,\r\n\r\n  userTokenAccountA: PublicKey,\r\n  vaultA: PublicKey,\r\n  mintA: PublicKey,\r\n  tokenProgramA: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: true },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vestingRecord, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountA, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: tokenProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({}, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.claimVestedToken, ...data]),\r\n  });\r\n}\r\n\r\nexport function createVestingAccount(\r\n  programId: PublicKey,\r\n\r\n  owner: PublicKey,\r\n  beneficiary: PublicKey,\r\n  poolId: PublicKey,\r\n\r\n  vestingRecord: PublicKey,\r\n  shareAmount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"shareAmount\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: true },\r\n    { pubkey: beneficiary, isSigner: false, isWritable: true },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: vestingRecord, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ shareAmount }, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.createVestingAccount, ...data]),\r\n  });\r\n}\r\n\r\nexport function claimPlatformFee(\r\n  programId: PublicKey,\r\n  platformClaimFeeWallet: PublicKey,\r\n  auth: PublicKey,\r\n  poolId: PublicKey,\r\n  platformId: PublicKey,\r\n  vaultB: PublicKey,\r\n  userTokenAccountB: PublicKey,\r\n  mintB: PublicKey,\r\n  tokenProgramB: PublicKey,\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformClaimFeeWallet, isSigner: true, isWritable: true },\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: userTokenAccountB, isSigner: false, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: true },\r\n    { pubkey: tokenProgramB, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: true },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: anchorDataBuf.claimPlatformFee,\r\n  });\r\n}\r\n\r\nexport function createPlatformConfig(\r\n  programId: PublicKey,\r\n\r\n  platformAdmin: PublicKey,\r\n  platformClaimFeeWallet: PublicKey,\r\n  platformLockNftWallet: PublicKey,\r\n  platformId: PublicKey,\r\n\r\n  cpConfigId: PublicKey,\r\n\r\n  transferFeeExtensionAuth: PublicKey,\r\n\r\n  migrateCpLockNftScale: {\r\n    platformScale: BN;\r\n    creatorScale: BN;\r\n    burnScale: BN;\r\n  },\r\n  feeRate: BN,\r\n  creatorFeeRate: BN,\r\n  name: string,\r\n  web: string,\r\n  img: string,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([\r\n    u64(\"platformScale\"),\r\n    u64(\"creatorScale\"),\r\n    u64(\"burnScale\"),\r\n\r\n    u64(\"feeRate\"),\r\n    str(\"name\"),\r\n    str(\"web\"),\r\n    str(\"img\"),\r\n    u64(\"creatorFeeRate\"),\r\n  ]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformAdmin, isSigner: true, isWritable: true },\r\n    { pubkey: platformClaimFeeWallet, isSigner: false, isWritable: false },\r\n    { pubkey: platformLockNftWallet, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n    { pubkey: cpConfigId, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: transferFeeExtensionAuth, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(\r\n    8 * 5 +\r\n      Buffer.from(name, \"utf-8\").length +\r\n      Buffer.from(web, \"utf-8\").length +\r\n      Buffer.from(img, \"utf-8\").length +\r\n      4 * 3,\r\n  );\r\n  dataLayout.encode(\r\n    {\r\n      platformScale: migrateCpLockNftScale.platformScale,\r\n      creatorScale: migrateCpLockNftScale.creatorScale,\r\n      burnScale: migrateCpLockNftScale.burnScale,\r\n      feeRate,\r\n      name,\r\n      web,\r\n      img,\r\n      creatorFeeRate,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.createPlatformConfig, ...data]),\r\n  });\r\n}\r\n\r\nexport function updatePlatformConfig(\r\n  programId: PublicKey,\r\n\r\n  platformAdmin: PublicKey,\r\n  platformId: PublicKey,\r\n\r\n  updateInfo:\r\n    | { type: \"updateClaimFeeWallet\" | \"updateLockNftWallet\"; value: PublicKey }\r\n    | { type: \"updateFeeRate\"; value: BN }\r\n    | { type: \"updateName\" | \"updateImg\" | \"updateWeb\"; value: string }\r\n    | { type: \"migrateCpLockNftScale\"; value: { platformScale: BN; creatorScale: BN; burnScale: BN } }\r\n    | { type: \"updateCpConfigId\"; value: PublicKey }\r\n    | {\r\n        type: \"updateAll\";\r\n        value: {\r\n          platformClaimFeeWallet: PublicKey;\r\n          platformLockNftWallet: PublicKey;\r\n          cpConfigId: PublicKey;\r\n          migrateCpLockNftScale: {\r\n            platformScale: BN;\r\n            creatorScale: BN;\r\n            burnScale: BN;\r\n          };\r\n          feeRate: BN;\r\n          name: string;\r\n          web: string;\r\n          img: string;\r\n          transferFeeExtensionAuth: PublicKey;\r\n          creatorFeeRate: BN;\r\n        };\r\n      },\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformAdmin, isSigner: true, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  let data: Buffer;\r\n  if (updateInfo.type === \"updateClaimFeeWallet\") {\r\n    const dataLayout = struct([u8(\"index\"), publicKey(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 0, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateLockNftWallet\") {\r\n    const dataLayout = struct([u8(\"index\"), publicKey(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 1, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"migrateCpLockNftScale\") {\r\n    const dataLayout = struct([u8(\"index\"), u64(\"platformScale\"), u64(\"creatorScale\"), u64(\"burnScale\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 2, ...updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateFeeRate\") {\r\n    const dataLayout = struct([u8(\"index\"), u64(\"value\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 3, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateImg\" || updateInfo.type === \"updateName\" || updateInfo.type === \"updateWeb\") {\r\n    const dataLayout = struct([u8(\"index\"), str(\"value\")]);\r\n    data = Buffer.alloc(Buffer.from(updateInfo.value, \"utf-8\").length + 4 + 1 * 1);\r\n    if (updateInfo.type === \"updateName\") dataLayout.encode({ index: 4, value: updateInfo.value }, data);\r\n    else if (updateInfo.type === \"updateWeb\") dataLayout.encode({ index: 5, value: updateInfo.value }, data);\r\n    else if (updateInfo.type === \"updateImg\") dataLayout.encode({ index: 6, value: updateInfo.value }, data);\r\n  } else if (updateInfo.type === \"updateCpConfigId\") {\r\n    keys.push({ pubkey: updateInfo.value, isSigner: false, isWritable: false });\r\n\r\n    const dataLayout = struct([u8(\"index\")]);\r\n    data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({ index: 7 }, data);\r\n  } else if (updateInfo.type === \"updateAll\") {\r\n    keys.push({ pubkey: updateInfo.value.cpConfigId, isSigner: false, isWritable: false });\r\n\r\n    const dataLayout = struct([\r\n      u8(\"index\"),\r\n      publicKey(\"platformClaimFeeWallet\"),\r\n      publicKey(\"platformLockNftWallet\"),\r\n      u64(\"platformScale\"),\r\n      u64(\"creatorScale\"),\r\n      u64(\"burnScale\"),\r\n\r\n      u64(\"feeRate\"),\r\n      str(\"name\"),\r\n      str(\"web\"),\r\n      str(\"img\"),\r\n      publicKey(\"transferFeeExtensionAuth\"),\r\n      u64(\"creatorFeeRate\"),\r\n    ]);\r\n    data = Buffer.alloc(\r\n      1 +\r\n        32 +\r\n        32 +\r\n        8 * 4 +\r\n        4 * 3 +\r\n        Buffer.from(updateInfo.value.name, \"utf-8\").length +\r\n        Buffer.from(updateInfo.value.web, \"utf-8\").length +\r\n        Buffer.from(updateInfo.value.img, \"utf-8\").length +\r\n        32 +\r\n        8,\r\n    );\r\n    dataLayout.encode(\r\n      {\r\n        index: 8,\r\n        platformClaimFeeWallet: updateInfo.value.platformClaimFeeWallet,\r\n        platformLockNftWallet: updateInfo.value.platformLockNftWallet,\r\n        platformScale: updateInfo.value.migrateCpLockNftScale.platformScale,\r\n        creatorScale: updateInfo.value.migrateCpLockNftScale.creatorScale,\r\n        burnScale: updateInfo.value.migrateCpLockNftScale.burnScale,\r\n        feeRate: updateInfo.value.feeRate,\r\n        name: updateInfo.value.name,\r\n        web: updateInfo.value.web,\r\n        img: updateInfo.value.img,\r\n        transferFeeExtensionAuth: updateInfo.value.transferFeeExtensionAuth,\r\n        creatorFeeRate: updateInfo.value.creatorFeeRate,\r\n      },\r\n      data,\r\n    );\r\n  } else {\r\n    throw Error(\"updateInfo params type error\");\r\n  }\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.updatePlaformConfig, ...data]),\r\n  });\r\n}\r\n\r\nexport function claimPlatformFeeFromVault(\r\n  programId: PublicKey,\r\n  platformId: PublicKey,\r\n  platformClaimFeeWallet: PublicKey,\r\n  platformClaimFeeAuth: PublicKey,\r\n  platformClaimFeeVault: PublicKey,\r\n  recipientTokenAccount: PublicKey,\r\n  mintB: PublicKey,\r\n  mintProgramB: PublicKey,\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformClaimFeeWallet, isSigner: true, isWritable: true },\r\n    { pubkey: platformClaimFeeAuth, isSigner: false, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: false },\r\n    { pubkey: platformClaimFeeVault, isSigner: false, isWritable: true },\r\n    { pubkey: recipientTokenAccount, isSigner: false, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: anchorDataBuf.claimPlatformFeeFromVault,\r\n  });\r\n}\r\n\r\nexport function claimCreatorFee(\r\n  programId: PublicKey,\r\n\r\n  creator: PublicKey,\r\n  creatorClaimFeeAuth: PublicKey,\r\n  creatorClaimFeeVault: PublicKey,\r\n  recipientTokenAccount: PublicKey,\r\n  mintB: PublicKey,\r\n  mintProgramB: PublicKey,\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: creator, isSigner: true, isWritable: true },\r\n    { pubkey: creatorClaimFeeAuth, isSigner: false, isWritable: false },\r\n    { pubkey: creatorClaimFeeVault, isSigner: false, isWritable: true },\r\n    { pubkey: recipientTokenAccount, isSigner: false, isWritable: true },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: anchorDataBuf.claimCreatorFee,\r\n  });\r\n}\r\n\r\nconst u8Max = 255;\r\nconst u64Max = new BN(\"18446744073709551615\");\r\n\r\nexport function updatePlatformCurveParamInstruction(\r\n  programId: PublicKey,\r\n\r\n  platformAdmin: PublicKey,\r\n  platformId: PublicKey,\r\n  configId: PublicKey,\r\n\r\n  index: number,\r\n  params: Partial<ReturnType<typeof BondingCurveParam.decode>>,\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformAdmin, isSigner: true, isWritable: true },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(1 * 2 + 8 * 6 + u8().span);\r\n  u8().encode(index, data);\r\n  BondingCurveParam.encode(\r\n    {\r\n      migrateType: params.migrateType ? params.migrateType : u8Max,\r\n      migrateCpmmFeeOn: params.migrateCpmmFeeOn ? params.migrateCpmmFeeOn : u8Max,\r\n      supply: params.supply ? params.supply : new BN(0),\r\n      totalSellA: params.totalSellA ? params.totalSellA : new BN(0),\r\n      totalFundRaisingB: params.totalFundRaisingB ? params.totalFundRaisingB : new BN(0),\r\n      totalLockedAmount: params.totalLockedAmount ? params.totalLockedAmount : u64Max,\r\n      cliffPeriod: params.cliffPeriod ? params.cliffPeriod : u64Max,\r\n      unlockPeriod: params.unlockPeriod ? params.unlockPeriod : u64Max,\r\n    },\r\n    data,\r\n    1,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.updatePlatformCurveParam, ...data]),\r\n  });\r\n}\r\n\r\nexport function removePlatformCurveParamInstruction(\r\n  programId: PublicKey,\r\n\r\n  platformAdmin: PublicKey,\r\n  platformId: PublicKey,\r\n  index: number,\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: platformAdmin, isSigner: true, isWritable: false },\r\n    { pubkey: platformId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(u8().span);\r\n  u8().encode(index, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.removePlatformCurveParam, ...data, 1, 2]),\r\n  });\r\n}\r\n","import { publicKey, seq, struct, u16, u64, u8, vec } from \"../../marshmallow\";\r\n\r\nexport const LaunchpadConfig = struct([\r\n  u64(),\r\n  u64(\"epoch\"),\r\n  u8(\"curveType\"),\r\n  u16(\"index\"),\r\n  u64(\"migrateFee\"),\r\n  u64(\"tradeFeeRate\"),\r\n\r\n  u64(\"maxShareFeeRate\"),\r\n  u64(\"minSupplyA\"),\r\n  u64(\"maxLockRate\"),\r\n  u64(\"minSellRateA\"),\r\n  u64(\"minMigrateRateA\"),\r\n  u64(\"minFundRaisingB\"),\r\n\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"protocolFeeOwner\"),\r\n  publicKey(\"migrateFeeOwner\"),\r\n  publicKey(\"migrateToAmmWallet\"),\r\n  publicKey(\"migrateToCpmmWallet\"),\r\n  seq(u64(), 16),\r\n]);\r\n\r\nexport const VestingSchedule = struct([\r\n  u64(\"totalLockedAmount\"),\r\n  u64(\"cliffPeriod\"),\r\n  u64(\"unlockPeriod\"),\r\n  u64(\"startTime\"),\r\n  u64(\"totalAllocatedShare\"),\r\n]);\r\n\r\nexport const LaunchpadPool = struct([\r\n  u64(),\r\n  u64(\"epoch\"),\r\n  u8(\"bump\"),\r\n  u8(\"status\"),\r\n  u8(\"mintDecimalsA\"),\r\n  u8(\"mintDecimalsB\"),\r\n  u8(\"migrateType\"),\r\n\r\n  u64(\"supply\"),\r\n  u64(\"totalSellA\"),\r\n  u64(\"virtualA\"),\r\n  u64(\"virtualB\"),\r\n  u64(\"realA\"),\r\n  u64(\"realB\"),\r\n  u64(\"totalFundRaisingB\"),\r\n  u64(\"protocolFee\"),\r\n  u64(\"platformFee\"),\r\n  u64(\"migrateFee\"),\r\n\r\n  VestingSchedule.replicate(\"vestingSchedule\"),\r\n\r\n  publicKey(\"configId\"),\r\n  publicKey(\"platformId\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n\r\n  publicKey(\"creator\"),\r\n\r\n  u8(\"mintProgramFlag\"),\r\n  u8(\"cpmmCreatorFeeOn\"),\r\n\r\n  seq(u8(), 62),\r\n]);\r\n\r\nexport const LaunchpadVesting = struct([\r\n  u64(),\r\n  u64(\"epoch\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"beneficiary\"),\r\n  u64(\"claimedAmount\"),\r\n  u64(\"tokenShareAmount\"),\r\n  seq(u64(), 8),\r\n]);\r\n\r\nexport const BondingCurveParam = struct([\r\n  u8('migrateType'),\r\n  u8('migrateCpmmFeeOn'),\r\n  u64('supply'),\r\n  u64('totalSellA'),\r\n  u64('totalFundRaisingB'),\r\n\r\n  u64('totalLockedAmount'),\r\n  u64('cliffPeriod'),\r\n  u64('unlockPeriod'),\r\n]);\r\n\r\nexport const PlatformCurveParam = struct([\r\n  u64(\"epoch\"),\r\n  u8(\"index\"),\r\n  publicKey(\"configId\"),\r\n\r\n  BondingCurveParam.replicate(\"bondingCurveParam\"),\r\n  seq(u64(), 50),\r\n]);\r\n\r\nexport const PlatformConfig = struct([\r\n  u64(),\r\n  u64(\"epoch\"),\r\n  publicKey(\"platformClaimFeeWallet\"),\r\n  publicKey(\"platformLockNftWallet\"),\r\n  u64(\"platformScale\"),\r\n  u64(\"creatorScale\"),\r\n  u64(\"burnScale\"),\r\n  u64(\"feeRate\"),\r\n  seq(u8(), 64, \"name\"),\r\n  seq(u8(), 256, \"web\"),\r\n  seq(u8(), 256, \"img\"),\r\n  publicKey(\"cpConfigId\"),\r\n  u64(\"creatorFeeRate\"),\r\n  publicKey(\"transferFeeExtensionAuth\"),\r\n  seq(u8(), 180),\r\n\r\n  vec(PlatformCurveParam, \"platformCurve\"),\r\n]);\r\n","import { TransferFeeConfig } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { GetTransferAmountFee } from \"@/raydium/type\";\r\nimport { getTransferAmountFeeFromPre, getTransferAmountFeeFromPost } from \"@/common\";\r\nimport { LaunchpadConfig, LaunchpadPool } from \"../layout\";\r\nimport { LaunchConstantProductCurve } from \"./constantProductCurve\";\r\nimport { CurveBase, PoolBaseAmount } from \"./curveBase\";\r\n// import { ceilDiv, FEE_RATE_DENOMINATOR_VALUE } from \"./fee\";\r\nimport { ceilDiv, FEE_RATE_DENOMINATOR_VALUE } from \"@/common\";\r\nimport { FixedPriceCurve } from \"./fixedPriceCurve\";\r\nimport { LinearPriceCurve } from \"./linearPriceCurve\";\r\n\r\nexport interface SwapInfoReturn {\r\n  amountA: GetTransferAmountFee;\r\n  amountB: BN;\r\n  splitFee: ReturnType<typeof Curve.splitFee>;\r\n}\r\n\r\nexport class Curve {\r\n  static getPoolCurvePointByPoolInfo({\r\n    curveType,\r\n    pointCount,\r\n    poolInfo,\r\n  }: {\r\n    curveType: number;\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode>;\r\n    pointCount: number;\r\n  }): {\r\n    price: Decimal;\r\n    totalSellSupply: number;\r\n  }[] {\r\n    return this.getPoolCurvePointByInit({\r\n      curveType,\r\n      pointCount,\r\n      supply: poolInfo.supply,\r\n      totalFundRaising: poolInfo.totalFundRaisingB,\r\n      totalSell: poolInfo.totalSellA,\r\n      totalLockedAmount: poolInfo.vestingSchedule.totalLockedAmount,\r\n      migrateFee: poolInfo.migrateFee,\r\n      decimalA: poolInfo.mintDecimalsA,\r\n      decimalB: poolInfo.mintDecimalsB,\r\n    });\r\n  }\r\n  static getPoolCurvePointByInit({\r\n    curveType,\r\n    pointCount,\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    curveType: number;\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n    pointCount: number;\r\n  }): {\r\n    price: Decimal;\r\n    totalSellSupply: number;\r\n  }[] {\r\n    if (pointCount < 3) throw Error(\"point count < 3\");\r\n\r\n    const curve = this.getCurve(curveType);\r\n    const initParam = curve.getInitParam({ supply, totalFundRaising, totalSell, totalLockedAmount, migrateFee });\r\n    const initPrice = curve.getPoolInitPriceByInit({ ...initParam, decimalA, decimalB });\r\n\r\n    const itemStepBuy = totalFundRaising.div(new BN(pointCount - 1));\r\n\r\n    const zero = new BN(0);\r\n\r\n    const returnPoints: { price: Decimal; totalSellSupply: number }[] = [{ price: initPrice, totalSellSupply: 0 }];\r\n    const { a, b } = initParam;\r\n    let realA = zero;\r\n    let realB = zero;\r\n    for (let i = 1; i < pointCount; i++) {\r\n      const amountB = i !== pointCount - 1 ? itemStepBuy : totalFundRaising.sub(realB);\r\n      const itemBuy = this.buyExactIn({\r\n        poolInfo: {\r\n          virtualA: a,\r\n          virtualB: b,\r\n          realA,\r\n          realB,\r\n          totalFundRaisingB: totalFundRaising,\r\n          totalSellA: totalSell,\r\n        },\r\n        amountB,\r\n        protocolFeeRate: zero,\r\n        platformFeeRate: zero,\r\n        curveType,\r\n        shareFeeRate: zero,\r\n        creatorFeeRate: zero,\r\n        transferFeeConfigA: undefined,\r\n        slot: 0,\r\n      });\r\n      realA = realA.add(itemBuy.amountA.amount);\r\n      realB = realB.add(itemBuy.amountB);\r\n\r\n      const nowPoolPrice = this.getPrice({\r\n        poolInfo: { virtualA: a, virtualB: b, realA, realB },\r\n        decimalA,\r\n        decimalB,\r\n        curveType,\r\n      });\r\n      returnPoints.push({\r\n        price: nowPoolPrice,\r\n        totalSellSupply: new Decimal(realA.toString()).div(10 ** decimalA).toNumber(),\r\n      });\r\n    }\r\n\r\n    return returnPoints;\r\n  }\r\n\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n    curveType,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n    curveType: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolInitPriceByPool({ poolInfo, decimalA, decimalB });\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n    curveType,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n    curveType: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolInitPriceByInit({ a, b, decimalA, decimalB });\r\n  }\r\n  static getPrice({\r\n    poolInfo,\r\n    curveType,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | { virtualA: BN; virtualB: BN; realA: BN; realB: BN };\r\n    decimalA: number;\r\n    decimalB: number;\r\n    curveType: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolPrice({ poolInfo, decimalA, decimalB });\r\n  }\r\n  static getEndPrice({\r\n    poolInfo,\r\n    curveType,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode>;\r\n    curveType: number;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolPrice({ poolInfo, decimalA, decimalB });\r\n  }\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    curveType,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode>;\r\n    curveType: number;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const curve = this.getCurve(curveType);\r\n    return curve.getPoolEndPriceReal({ poolInfo, decimalA, decimalB });\r\n  }\r\n\r\n  static checkParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    decimals,\r\n    config,\r\n    migrateType,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    decimals: number;\r\n    config: ReturnType<typeof LaunchpadConfig.decode>;\r\n    migrateType: \"amm\" | \"cpmm\";\r\n  }): void {\r\n    if (Number(decimals) !== 6) throw Error(\"decimals = 6\");\r\n    const maxLockedA = supply.mul(config.maxLockRate).div(FEE_RATE_DENOMINATOR_VALUE);\r\n    if (maxLockedA.lt(totalLockedAmount)) throw Error(\"total lock amount gte max lock amount\");\r\n\r\n    if (supply.lt(config.minSupplyA.mul(new BN(10 ** decimals)))) throw Error(\"supply lt min supply\");\r\n\r\n    const minSellA = supply.mul(config.minSellRateA).div(FEE_RATE_DENOMINATOR_VALUE);\r\n    if (totalSell.lt(minSellA)) throw Error(\"invalid input\");\r\n    if (totalFundRaising.lt(config.minFundRaisingB)) throw Error(\"total fund raising lt min fund raising\");\r\n\r\n    const amountMigrate = supply.sub(totalSell).sub(totalLockedAmount);\r\n    const minAmountMigrate = supply.mul(config.minMigrateRateA).div(FEE_RATE_DENOMINATOR_VALUE);\r\n\r\n    if (amountMigrate.lt(minAmountMigrate)) throw Error(\"migrate lt min migrate amoount\");\r\n\r\n    const migrateAmountA = supply.sub(totalSell).sub(totalLockedAmount);\r\n    const liquidity = new BN(new Decimal(migrateAmountA.mul(totalFundRaising).toString()).sqrt().toFixed(0));\r\n\r\n    if (migrateType === \"amm\") {\r\n      const minLockLp = new BN(10).pow(new BN(decimals));\r\n      if (liquidity.lte(minLockLp)) throw Error(\"check migrate lp error\");\r\n    } else if (migrateType === \"cpmm\") {\r\n      const minLockLp = new BN(100);\r\n      if (liquidity.lte(minLockLp)) throw Error(\"check migrate lp error\");\r\n    } else {\r\n      throw Error(\"migrate type error\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns Please note that amountA/B is subject to change\r\n   */\r\n  static buyExactIn({\r\n    poolInfo,\r\n    amountB,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    curveType,\r\n    shareFeeRate,\r\n    creatorFeeRate,\r\n    transferFeeConfigA,\r\n    slot,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | (PoolBaseAmount & { totalSellA: BN; totalFundRaisingB: BN });\r\n    amountB: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    curveType: number;\r\n    shareFeeRate: BN;\r\n    creatorFeeRate: BN;\r\n\r\n    transferFeeConfigA: TransferFeeConfig | undefined;\r\n    slot: number;\r\n  }): SwapInfoReturn {\r\n    const feeRate = this.totalFeeRate({ protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate });\r\n    const _totalFee = this.calculateFee({ amount: amountB, feeRate });\r\n\r\n    const amountLessFeeB = amountB.sub(_totalFee);\r\n\r\n    const curve = this.getCurve(curveType);\r\n\r\n    const _amountA = curve.buyExactIn({ poolInfo, amount: amountLessFeeB });\r\n\r\n    const remainingAmountA = poolInfo.totalSellA.sub(poolInfo.realA);\r\n\r\n    let amountA: BN;\r\n    let realAmountB: BN;\r\n    let totalFee: BN;\r\n    if (_amountA.gt(remainingAmountA)) {\r\n      amountA = remainingAmountA;\r\n\r\n      const amountLessFeeB = curve.buyExactOut({\r\n        poolInfo,\r\n        amount: amountA,\r\n      });\r\n\r\n      realAmountB = this.calculatePreFee({ postFeeAmount: amountLessFeeB, feeRate });\r\n      totalFee = realAmountB.sub(amountLessFeeB);\r\n    } else {\r\n      amountA = _amountA;\r\n      realAmountB = amountB;\r\n      totalFee = _totalFee;\r\n    }\r\n\r\n    const splitFee = this.splitFee({ totalFee, protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate });\r\n\r\n    return {\r\n      amountA: getTransferAmountFeeFromPre(amountA, transferFeeConfigA, slot),\r\n      amountB: realAmountB,\r\n      splitFee,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns Please note that amountA/B is subject to change\r\n   */\r\n  static buyExactOut({\r\n    poolInfo,\r\n    amountA,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    curveType,\r\n    shareFeeRate,\r\n    creatorFeeRate,\r\n    transferFeeConfigA,\r\n    slot,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | (PoolBaseAmount & { totalSellA: BN; totalFundRaisingB: BN });\r\n    amountA: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    curveType: number;\r\n    shareFeeRate: BN;\r\n    creatorFeeRate: BN;\r\n\r\n    transferFeeConfigA: TransferFeeConfig | undefined;\r\n    slot: number;\r\n  }): SwapInfoReturn {\r\n    const remainingAmountA = poolInfo.totalSellA.sub(poolInfo.realA);\r\n\r\n    const preAmountA = getTransferAmountFeeFromPost(amountA, transferFeeConfigA, slot);\r\n    let realAmountA = preAmountA.fee ? preAmountA.amount.add(preAmountA.fee) : preAmountA.amount;\r\n    if (amountA.gt(remainingAmountA)) {\r\n      realAmountA = remainingAmountA;\r\n    }\r\n\r\n    const curve = this.getCurve(curveType);\r\n    const amountInLessFeeB = curve.buyExactOut({ poolInfo, amount: realAmountA });\r\n\r\n    const totalFeeRate = this.totalFeeRate({ protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate });\r\n\r\n    const amountB = this.calculatePreFee({ postFeeAmount: amountInLessFeeB, feeRate: totalFeeRate });\r\n    const totalFee = amountB.sub(amountInLessFeeB);\r\n\r\n    const splitFee = this.splitFee({ totalFee, protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate });\r\n\r\n    return { amountA: preAmountA, amountB, splitFee };\r\n  }\r\n\r\n  static sellExactIn({\r\n    poolInfo,\r\n    amountA: _amountA,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    curveType,\r\n    shareFeeRate,\r\n    creatorFeeRate,\r\n    transferFeeConfigA,\r\n    slot,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amountA: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    curveType: number;\r\n    shareFeeRate: BN;\r\n    creatorFeeRate: BN;\r\n\r\n    transferFeeConfigA: TransferFeeConfig | undefined;\r\n    slot: number;\r\n  }): SwapInfoReturn {\r\n    const curve = this.getCurve(curveType);\r\n\r\n    const amountInfoA = getTransferAmountFeeFromPre(_amountA, transferFeeConfigA, slot);\r\n    const amountA = amountInfoA.fee ? amountInfoA.amount.sub(amountInfoA.fee) : amountInfoA.amount;\r\n\r\n    const amountB = curve.sellExactIn({ poolInfo, amount: amountA });\r\n\r\n    const totalFee = this.calculateFee({\r\n      amount: amountB,\r\n      feeRate: this.totalFeeRate({ protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate }),\r\n    });\r\n\r\n    const splitFee = this.splitFee({ totalFee, protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate });\r\n\r\n    return { amountA: amountInfoA, amountB: amountB.sub(totalFee), splitFee };\r\n  }\r\n\r\n  static sellExactOut({\r\n    poolInfo,\r\n    amountB,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    curveType,\r\n    shareFeeRate,\r\n    creatorFeeRate,\r\n    transferFeeConfigA,\r\n    slot,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amountB: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    curveType: number;\r\n    shareFeeRate: BN;\r\n    creatorFeeRate: BN;\r\n\r\n    transferFeeConfigA: TransferFeeConfig | undefined;\r\n    slot: number;\r\n  }): SwapInfoReturn {\r\n    const totalFeeRate = this.totalFeeRate({ protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate });\r\n\r\n    const amountOutWithFeeB = this.calculatePreFee({ postFeeAmount: amountB, feeRate: totalFeeRate });\r\n    if (poolInfo.realB.lt(amountOutWithFeeB)) throw Error(\"Insufficient liquidity\");\r\n\r\n    const totalFee = amountOutWithFeeB.sub(amountB);\r\n\r\n    const curve = Curve.getCurve(curveType);\r\n    const amountA = curve.sellExactOut({ poolInfo, amount: amountOutWithFeeB });\r\n\r\n    if (amountA.gt(poolInfo.realA)) throw Error();\r\n\r\n    const splitFee = this.splitFee({ totalFee, protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate });\r\n\r\n    return { amountA: getTransferAmountFeeFromPost(amountA, transferFeeConfigA, slot), amountB, splitFee };\r\n  }\r\n\r\n  static splitFee({\r\n    totalFee,\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    shareFeeRate,\r\n    creatorFeeRate,\r\n  }: {\r\n    totalFee: BN;\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    shareFeeRate: BN;\r\n    creatorFeeRate: BN;\r\n  }): { platformFee: BN; shareFee: BN; protocolFee: BN; creatorFee: BN } {\r\n    const totalFeeRate = this.totalFeeRate({ protocolFeeRate, platformFeeRate, shareFeeRate, creatorFeeRate });\r\n    const platformFee = totalFeeRate.isZero() ? new BN(0) : totalFee.mul(platformFeeRate).div(totalFeeRate);\r\n    const shareFee = totalFeeRate.isZero() ? new BN(0) : totalFee.mul(shareFeeRate).div(totalFeeRate);\r\n    const creatorFee = totalFeeRate.isZero() ? new BN(0) : totalFee.mul(creatorFeeRate).div(totalFeeRate);\r\n\r\n    const protocolFee = totalFee.sub(platformFee).sub(shareFee).sub(creatorFee);\r\n\r\n    return { platformFee, shareFee, protocolFee, creatorFee };\r\n  }\r\n\r\n  static calculateFee({ amount, feeRate }: { amount: BN; feeRate: BN }): BN {\r\n    return ceilDiv(amount, feeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n  static calculatePreFee({ postFeeAmount, feeRate }: { postFeeAmount: BN; feeRate: BN }): BN {\r\n    if (feeRate.isZero()) return postFeeAmount;\r\n\r\n    const numerator = postFeeAmount.mul(FEE_RATE_DENOMINATOR_VALUE);\r\n    const denominator = FEE_RATE_DENOMINATOR_VALUE.sub(feeRate);\r\n\r\n    return numerator.add(denominator).sub(new BN(1)).div(denominator);\r\n  }\r\n\r\n  static totalFeeRate({\r\n    protocolFeeRate,\r\n    platformFeeRate,\r\n    shareFeeRate,\r\n    creatorFeeRate,\r\n  }: {\r\n    protocolFeeRate: BN;\r\n    platformFeeRate: BN;\r\n    shareFeeRate: BN;\r\n    creatorFeeRate: BN;\r\n  }): BN {\r\n    const totalFeeRate = protocolFeeRate.add(platformFeeRate).add(shareFeeRate).add(creatorFeeRate);\r\n    if (totalFeeRate.gt(new BN(1_000_000))) throw Error(\"total fee rate gt 1_000_000\");\r\n    return protocolFeeRate.add(platformFeeRate).add(shareFeeRate).add(creatorFeeRate);\r\n  }\r\n\r\n  static getCurve(curveType: number): typeof CurveBase {\r\n    switch (curveType) {\r\n      case 0:\r\n        return LaunchConstantProductCurve;\r\n      case 1:\r\n        return FixedPriceCurve;\r\n      case 2:\r\n        return LinearPriceCurve;\r\n    }\r\n    throw Error(\"find curve error\");\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { LaunchpadPool } from \"../layout\";\r\nimport { CurveBase, PoolBaseAmount } from \"./curveBase\";\r\nimport { ceilDivBN } from \"@/common\";\r\n\r\nexport class LaunchConstantProductCurve extends CurveBase {\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualB.toString()).div(poolInfo.virtualA.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(b.toString()).div(a.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolPrice({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualB.add(poolInfo.realB).toString())\r\n      .div(poolInfo.virtualA.sub(poolInfo.realA).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolEndPrice({\r\n    supply,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    totalFundRaising,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(totalFundRaising.sub(migrateFee).toString())\r\n      .div(supply.sub(totalSell).sub(totalLockedAmount).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode>;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const allSellToken = poolInfo.totalSellA.sub(poolInfo.realA);\r\n    const buyAllTokenUseB = poolInfo.totalFundRaisingB.sub(poolInfo.realB);\r\n    //  allSellToken.isZero() ? new BN(0) : this.buyExactOut({\r\n    //   amount: poolInfo.totalSellA.sub(poolInfo.realA),\r\n    //   poolInfo,\r\n    // })\r\n\r\n    return new Decimal(poolInfo.virtualB.add(poolInfo.realB.add(buyAllTokenUseB)).toString())\r\n      .div(poolInfo.virtualA.sub(poolInfo.realA.add(allSellToken)).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getInitParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n  }): {\r\n    a: BN;\r\n    b: BN;\r\n    c: BN;\r\n  } {\r\n    if (supply.lte(totalSell)) throw Error(\"supply need gt total sell\");\r\n    const supplyMinusSellLocked = supply.sub(totalSell).sub(totalLockedAmount);\r\n    if (supplyMinusSellLocked.lte(new BN(0))) throw Error(\"supplyMinusSellLocked <= 0\");\r\n\r\n    const tfMinusMf = totalFundRaising.sub(migrateFee);\r\n    if (tfMinusMf.lte(new BN(0))) throw Error(\"tfMinusMf <= 0\");\r\n\r\n    // const migratePriceX64 = tfMinusMf.mul(Q64).div(supplyMinusSellLocked)\r\n\r\n    const numerator = tfMinusMf.mul(totalSell).mul(totalSell).div(supplyMinusSellLocked);\r\n    const denominator = tfMinusMf.mul(totalSell).div(supplyMinusSellLocked).sub(totalFundRaising);\r\n    const x0 = numerator.div(denominator);\r\n    const y0 = totalFundRaising.mul(totalFundRaising).div(denominator);\r\n\r\n    if (x0.lt(new BN(0)) || y0.lt(new BN(0))) throw Error(\"invalid input 0\");\r\n\r\n    return {\r\n      a: x0,\r\n      b: y0,\r\n      c: totalSell,\r\n    };\r\n  }\r\n\r\n  static buyExactIn({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    return this.getAmountOut({\r\n      amountIn: amount,\r\n      inputReserve: poolInfo.virtualB.add(poolInfo.realB),\r\n      outputReserve: poolInfo.virtualA.sub(poolInfo.realA),\r\n    });\r\n  }\r\n\r\n  static buyExactOut({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    return this.getAmountIn({\r\n      amountOut: amount,\r\n      inputReserve: poolInfo.virtualB.add(poolInfo.realB),\r\n      outputReserve: poolInfo.virtualA.sub(poolInfo.realA),\r\n    });\r\n  }\r\n\r\n  static sellExactIn({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    return this.getAmountOut({\r\n      amountIn: amount,\r\n      inputReserve: poolInfo.virtualA.sub(poolInfo.realA),\r\n      outputReserve: poolInfo.virtualB.add(poolInfo.realB),\r\n    });\r\n  }\r\n\r\n  static sellExactOut({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    return this.getAmountIn({\r\n      amountOut: amount,\r\n      inputReserve: poolInfo.virtualA.sub(poolInfo.realA),\r\n      outputReserve: poolInfo.virtualB.add(poolInfo.realB),\r\n    });\r\n  }\r\n\r\n  static getAmountOut({\r\n    amountIn,\r\n    inputReserve,\r\n    outputReserve,\r\n  }: {\r\n    amountIn: BN;\r\n    inputReserve: BN;\r\n    outputReserve: BN;\r\n  }): BN {\r\n    const numerator = amountIn.mul(outputReserve);\r\n    const denominator = inputReserve.add(amountIn);\r\n    const amountOut = numerator.div(denominator);\r\n    return amountOut;\r\n  }\r\n  static getAmountIn({\r\n    amountOut,\r\n    inputReserve,\r\n    outputReserve,\r\n  }: {\r\n    amountOut: BN;\r\n    inputReserve: BN;\r\n    outputReserve: BN;\r\n  }): BN {\r\n    const numerator = inputReserve.mul(amountOut);\r\n    const denominator = outputReserve.sub(amountOut);\r\n    const amountIn = ceilDivBN(numerator, denominator);\r\n    return amountIn;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { LaunchpadPool } from \"../layout\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nexport interface PoolBaseAmount {\r\n  virtualA: BN;\r\n  virtualB: BN;\r\n  realA: BN;\r\n  realB: BN;\r\n}\r\n\r\nexport class CurveBase {\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n  static getPoolPrice({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | { virtualA: BN; virtualB: BN; realA: BN; realB: BN };\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n  static getPoolEndPrice({\r\n    supply,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    totalFundRaising,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode>;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    throw Error();\r\n  }\r\n\r\n  static getInitParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n  }): { a: BN; b: BN; c: BN } {\r\n    throw Error();\r\n  }\r\n\r\n  static buyExactIn({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    throw Error();\r\n  }\r\n\r\n  static buyExactOut({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    throw Error();\r\n  }\r\n\r\n  static sellExactIn({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    throw Error();\r\n  }\r\n\r\n  static sellExactOut({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    throw Error();\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { LaunchpadPool } from \"../layout\";\r\nimport { CurveBase, PoolBaseAmount } from \"./curveBase\";\r\n// import { ceilDivBN } from \"./fee\";\r\nimport { ceilDivBN } from \"@/common\";\r\n\r\nexport class FixedPriceCurve extends CurveBase {\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualB.toString()).div(poolInfo.virtualA.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(b.toString()).div(a.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolPrice({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | { virtualA: BN; virtualB: BN; realA: BN; realB: BN };\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualB.toString()).div(poolInfo.virtualA.toString()).mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolEndPrice({\r\n    supply,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    totalFundRaising,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(totalFundRaising.sub(migrateFee).toString())\r\n      .div(supply.sub(totalSell).sub(totalLockedAmount).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode>;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const allSellToken = poolInfo.totalSellA.sub(poolInfo.realA);\r\n    const buyAllTokenUseB = poolInfo.totalFundRaisingB.sub(poolInfo.realB);\r\n\r\n    return new Decimal(poolInfo.virtualB.add(poolInfo.realB).add(buyAllTokenUseB).toString())\r\n      .div(poolInfo.virtualA.sub(poolInfo.realA).add(allSellToken).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getInitParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalFundRaising: BN;\r\n    totalLockedAmount: BN;\r\n    migrateFee: BN;\r\n  }) {\r\n    const supplyMinusLocked = supply.sub(totalLockedAmount);\r\n\r\n    if (supplyMinusLocked.lte(new BN(0))) throw Error(\"invalid input 1\");\r\n\r\n    const denominator = new BN(2).mul(totalFundRaising).sub(migrateFee);\r\n    const numerator = totalFundRaising.mul(supplyMinusLocked);\r\n    const totalSellExpect = numerator.div(denominator);\r\n\r\n    // if (!totalSell.eq(totalSellExpect)) throw Error('invalid input 2')\r\n\r\n    if (totalSellExpect.lt(new BN(0)) || totalFundRaising.lt(new BN(0))) throw Error(\"invalid input 0\");\r\n\r\n    return { a: totalSellExpect, b: totalFundRaising, c: totalSellExpect };\r\n  }\r\n\r\n  static buyExactIn({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    return this.getAmountOut({ amountIn: amount, initInput: poolInfo.virtualB, initOutput: poolInfo.virtualA });\r\n  }\r\n\r\n  static buyExactOut({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    return this.getAmountIn({ amountOut: amount, initInput: poolInfo.virtualB, initOutput: poolInfo.virtualA });\r\n  }\r\n\r\n  static sellExactIn({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    return this.getAmountOut({ amountIn: amount, initInput: poolInfo.virtualA, initOutput: poolInfo.virtualB });\r\n  }\r\n\r\n  static sellExactOut({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    return this.getAmountIn({ amountOut: amount, initInput: poolInfo.virtualA, initOutput: poolInfo.virtualB });\r\n  }\r\n\r\n  static getAmountOut({ amountIn, initInput, initOutput }: { amountIn: BN; initInput: BN; initOutput: BN }) {\r\n    const numerator = initOutput.mul(amountIn);\r\n    const amountOut = numerator.div(initInput);\r\n    return amountOut;\r\n  }\r\n\r\n  static getAmountIn({ amountOut, initInput, initOutput }: { amountOut: BN; initInput: BN; initOutput: BN }) {\r\n    const numerator = initInput.mul(amountOut);\r\n    const amountIn = ceilDivBN(numerator, initOutput);\r\n    return amountIn;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { LaunchpadPool } from \"../layout\";\r\nimport { Q64 } from \"@/raydium/clmm\";\r\nimport { CurveBase, PoolBaseAmount } from \"./curveBase\";\r\n// import { ceilDivBN } from \"./fee\";\r\nimport { ceilDivBN } from \"@/common\";\r\nimport { MathLaunch } from \"./func\";\r\nimport { MaxU64 } from \"@/raydium/clmm\";\r\n\r\nexport class LinearPriceCurve extends CurveBase {\r\n  static getPoolInitPriceByPool({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(0);\r\n  }\r\n  static getPoolInitPriceByInit({\r\n    a,\r\n    b,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    a: BN;\r\n    b: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(0);\r\n  }\r\n  static getPoolPrice({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | { virtualA: BN; virtualB: BN; realA: BN; realB: BN };\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(poolInfo.virtualA.mul(poolInfo.realA).toString())\r\n      .div(MathLaunch._Q64)\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolEndPrice({\r\n    supply,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    totalFundRaising,\r\n    migrateFee,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    return new Decimal(totalFundRaising.sub(migrateFee).toString())\r\n      .div(supply.sub(totalSell).sub(totalLockedAmount).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n  static getPoolEndPriceReal({\r\n    poolInfo,\r\n    decimalA,\r\n    decimalB,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode>;\r\n    decimalA: number;\r\n    decimalB: number;\r\n  }): Decimal {\r\n    const allSellToken = poolInfo.totalSellA.sub(poolInfo.realA);\r\n    const buyAllTokenUseB = poolInfo.totalFundRaisingB.sub(poolInfo.realB);\r\n\r\n    return new Decimal(poolInfo.virtualB.add(poolInfo.realB).add(buyAllTokenUseB).toString())\r\n      .div(poolInfo.virtualA.sub(poolInfo.realA).add(allSellToken).toString())\r\n      .mul(10 ** (decimalA - decimalB));\r\n  }\r\n\r\n  static getInitParam({\r\n    supply,\r\n    totalFundRaising,\r\n    totalSell,\r\n    totalLockedAmount,\r\n    migrateFee,\r\n  }: {\r\n    supply: BN;\r\n    totalSell: BN;\r\n    totalLockedAmount: BN;\r\n    totalFundRaising: BN;\r\n    migrateFee: BN;\r\n  }) {\r\n    const supplyMinusLocked = supply.sub(totalLockedAmount);\r\n    if (supplyMinusLocked.lte(new BN(0))) throw Error(\"supplyMinusLocked need gt 0\");\r\n    const denominator = totalFundRaising.mul(new BN(3)).sub(migrateFee);\r\n    const numerator = totalFundRaising.mul(new BN(2)).mul(supplyMinusLocked);\r\n\r\n    const totalSellExpect = numerator.div(denominator);\r\n\r\n    // if (!totalSell.eq(totalSellExpect)) throw Error('invalid input')\r\n\r\n    const totalSellSquared = totalSellExpect.mul(totalSellExpect);\r\n    const a = totalFundRaising.mul(new BN(2)).mul(Q64).div(totalSellSquared);\r\n\r\n    if (!a.gt(new BN(0))) throw Error(\"a need gt 0\");\r\n\r\n    if (!MaxU64.gt(a)) throw Error(\"a need lt u64 max\");\r\n\r\n    if (a.lt(new BN(0)) || totalSellExpect.lt(new BN(0))) throw Error(\"invalid input 0\");\r\n\r\n    return { a, b: new BN(0), c: totalSellExpect };\r\n  }\r\n\r\n  static buyExactIn({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    const newQuote = poolInfo.realB.add(amount);\r\n    const termInsideSqrt = new BN(2).mul(newQuote).mul(Q64).div(poolInfo.virtualA);\r\n    const sqrtTerm = new BN(new Decimal(termInsideSqrt.toString()).sqrt().toFixed(0));\r\n    const amountOut = sqrtTerm.sub(poolInfo.realA);\r\n\r\n    return amountOut;\r\n  }\r\n\r\n  static buyExactOut({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    const newBase = poolInfo.realA.add(amount);\r\n    const newBaseSquared = newBase.mul(newBase);\r\n    const newQuote = ceilDivBN(poolInfo.virtualA.mul(newBaseSquared), new BN(2).mul(Q64));\r\n    return newQuote.sub(poolInfo.realB);\r\n  }\r\n\r\n  static sellExactIn({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    const newBase = poolInfo.realA.sub(amount);\r\n    const newBaseSquared = newBase.mul(newBase);\r\n    const newQuote = ceilDivBN(poolInfo.virtualA.mul(newBaseSquared), new BN(2).mul(Q64));\r\n    return poolInfo.realB.sub(newQuote);\r\n  }\r\n\r\n  static sellExactOut({\r\n    poolInfo,\r\n    amount,\r\n  }: {\r\n    poolInfo: ReturnType<typeof LaunchpadPool.decode> | PoolBaseAmount;\r\n    amount: BN;\r\n  }): BN {\r\n    const newB = poolInfo.realB.sub(amount);\r\n    const termInsideSqrt = new BN(2).mul(newB).mul(Q64).div(poolInfo.virtualA);\r\n\r\n    const sqrtTerm = new BN(new Decimal(termInsideSqrt.toString()).sqrt().toFixed(0));\r\n\r\n    const amountIn = poolInfo.realA.sub(sqrtTerm);\r\n\r\n    return amountIn;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\n\r\nexport class MathLaunch {\r\n  static _Q64 = new Decimal(new BN(1).shln(64).toString())\r\n\r\n  static _multipler(decimals: number) {\r\n    return new Decimal(10).pow(decimals)\r\n  }\r\n\r\n  static getPrice({priceX64, decimalA, decimalB}: {priceX64: BN, decimalA: number, decimalB: number}){\r\n    const priceWithDecimals = new Decimal(priceX64.toString()).div(this._Q64)\r\n    const price = priceWithDecimals.mul(this._multipler(decimalA)).div(this._multipler(decimalB))\r\n\r\n    return price\r\n  }\r\n\r\n  static getPriceX64({price, decimalA, decimalB}: {price: Decimal, decimalA: number, decimalB: number}) {\r\n    const priceWithDecimals = price.mul(this._multipler(decimalB)).div(this._multipler(decimalA))\r\n    const priceX64 = new BN(priceWithDecimals.mul(this._Q64).toFixed(0))\r\n    return priceX64\r\n  }\r\n}\r\n\r\nexport function checkPoolToAmm({supply, totalFundRaisingB, totalLockedAmount, totalSellA, migrateType ,decimalsA}: {\r\n  supply: BN, totalSellA: BN, totalLockedAmount: BN, totalFundRaisingB: BN, migrateType: 'amm' | 'cpmm', decimalsA: number,\r\n}) {\r\n  const migrateAmountA = supply.sub(totalSellA).sub(totalLockedAmount)\r\n  const liquidity = new BN(new Decimal(migrateAmountA.mul(totalFundRaisingB).toString()).sqrt().toFixed(0))\r\n\r\n  if (migrateType === 'amm') {\r\n    if (liquidity.gt(new BN(10).pow(new BN(decimalsA)))) return true\r\n  } else if (migrateType === 'cpmm') {\r\n    if (liquidity.gt(new BN(100))) return true\r\n  } else {\r\n    throw Error('migrate type error')\r\n  }\r\n\r\n  return false\r\n}\r\n"],"mappings":"6kCAAA,sFCAA,OAAyB,kBAUlB,YAAa,CAGlB,YAAY,EAA+C,CACzD,KAAK,SAAW,EAAO,WAAa,OAAY,EAAO,SAAW,EAClE,KAAK,KAAO,EAAO,IACrB,IAEI,OAAM,EAAoB,CAC5B,KAAK,SAAW,CAClB,IACI,OAAe,CACjB,MAAO,MAAK,IAAI,EAAE,SAAS,CAC7B,IACI,aAAqB,CACvB,MAAO,MAAK,IACd,CAEQ,WAAW,EAA0B,CAC3C,MAAO,IAAS,KAAK,QACvB,CAEO,SAAS,EAAe,CAC7B,MAAK,MAAK,WAAW,CAAc,EACnC,SAAQ,MAAM,KAAK,KAAM,KAAK,KAAM,mBAAoB,GAAG,CAAK,EACzD,MAFsC,IAG/C,CAEO,gBAAgB,EAAe,CAEpC,GAAM,GAAM,EAAM,IAAI,AAAC,GAAS,MAAO,IAAQ,SAAW,KAAK,UAAU,CAAG,EAAI,CAAI,EAAE,KAAK,IAAI,EAC/F,KAAM,IAAI,OAAM,CAAG,CACrB,CAEO,WAAW,EAAe,CAC/B,MAAK,MAAK,WAAW,CAAgB,EACrC,SAAQ,KAAK,KAAK,KAAM,KAAK,KAAM,qBAAsB,GAAG,CAAK,EAC1D,MAFwC,IAGjD,CAEO,QAAQ,EAAe,CAC5B,MAAK,MAAK,WAAW,CAAa,EAClC,SAAQ,KAAK,KAAK,KAAM,KAAK,KAAM,kBAAmB,GAAG,CAAK,EACvD,MAFqC,IAG9C,CAEO,SAAS,EAAe,CAC7B,MAAK,MAAK,WAAW,CAAc,EACnC,SAAQ,MAAM,KAAK,KAAM,KAAK,KAAM,mBAAoB,GAAG,CAAK,EACzD,MAFsC,IAG/C,CACF,EAEM,GAAkD,CAAC,EACnD,GAAmD,CAAC,EAEnD,YAAsB,EAA4B,CACvD,GAAI,GAAS,WAAI,GAAe,CAAU,EAC1C,GAAI,CAAC,EAAQ,CAEX,GAAM,GAAW,WAAI,GAAc,CAAU,EAE7C,EAAS,GAAI,IAAO,CAAE,KAAM,EAAY,UAAS,CAAC,EAClD,WAAI,GAAe,EAAY,CAAM,CACvC,CAEA,MAAO,EACT,CC7EA,MAYO,2BACP,GAAkB,oBCblB,OAAiE,2BCAjE,OAA+D,2BCA/D,OAAe,oBACf,GAAoB,yBCDpB,OAAiB,qBACjB,GAAe,oBCCf,OAAsB,uBAsFhB,GAGF,WACG,GAAQ,GC5Ff,OAAiB,qBACjB,GAAe,oBACf,GAAqB,+BCFrB,OAAe,oBAUf,GAAM,IAAW,iBAEV,YAA2B,EAAyB,CACzD,GAAM,GAAS,GAAa,2BAA2B,EAEvD,GAAI,YAAiB,YACnB,MAAO,GAGT,GAAI,MAAO,IAAU,SAAU,CAC7B,GAAI,EAAM,MAAM,YAAY,EAC1B,MAAO,IAAI,YAAG,CAAK,EAErB,EAAO,aAAa,gCAAgC,GAAO,CAC7D,CAEA,MAAI,OAAO,IAAU,SACf,GAAQ,GACV,EAAO,aAAa,kCAAkC,GAAO,EAG3D,IAAS,IAAY,GAAS,CAAC,KACjC,EAAO,aAAa,iCAAiC,GAAO,EAGvD,GAAI,YAAG,OAAO,CAAK,CAAC,GAGzB,MAAO,IAAU,SACZ,GAAI,YAAG,EAAM,SAAS,CAAC,EAEhC,GAAO,MAAM,+BAA+B,GAAO,EAC5C,GAAI,YAAG,CAAC,EACjB,CDjCA,GAAM,IAAS,GAAa,iBAAiB,EAEvC,GAAM,GAAS,UAAI,EAGnB,GAAU,GAAS,UAAQ,EAE3B,GAAwB,EAC3B,GAAsB,GAAQ,YAC9B,GAAyB,GAAQ,eACjC,GAAoB,GAAQ,QAC/B,EAEM,GAAkB,EACrB,GAAsB,WAAK,WAC3B,GAAyB,WAAK,aAC9B,GAAoB,WAAK,OAC5B,EAEO,QAAe,CAIb,YAAY,EAAyB,EAA4B,GAAI,YAAG,CAAC,EAAG,CACjF,KAAK,UAAY,GAAkB,CAAS,EAC5C,KAAK,YAAc,GAAkB,CAAW,CAClD,IAEW,WAAe,CACxB,MAAO,MAAK,UAAU,IAAI,KAAK,WAAW,CAC5C,CAEO,QAAmB,CACxB,MAAO,IAAI,IAAS,KAAK,YAAa,KAAK,SAAS,CACtD,CAEO,IAAI,EAA0C,CACnD,GAAM,GAAc,YAAiB,IAAW,EAAQ,GAAI,IAAS,GAAkB,CAAK,CAAC,EAE7F,MAAI,MAAK,YAAY,GAAG,EAAY,WAAW,EACtC,GAAI,IAAS,KAAK,UAAU,IAAI,EAAY,SAAS,EAAG,KAAK,WAAW,EAG1E,GAAI,IACT,KAAK,UAAU,IAAI,EAAY,WAAW,EAAE,IAAI,EAAY,UAAU,IAAI,KAAK,WAAW,CAAC,EAC3F,KAAK,YAAY,IAAI,EAAY,WAAW,CAC9C,CACF,CAEO,IAAI,EAA0C,CACnD,GAAM,GAAc,YAAiB,IAAW,EAAQ,GAAI,IAAS,GAAkB,CAAK,CAAC,EAE7F,MAAI,MAAK,YAAY,GAAG,EAAY,WAAW,EACtC,GAAI,IAAS,KAAK,UAAU,IAAI,EAAY,SAAS,EAAG,KAAK,WAAW,EAG1E,GAAI,IACT,KAAK,UAAU,IAAI,EAAY,WAAW,EAAE,IAAI,EAAY,UAAU,IAAI,KAAK,WAAW,CAAC,EAC3F,KAAK,YAAY,IAAI,EAAY,WAAW,CAC9C,CACF,CAEO,IAAI,EAA0C,CACnD,GAAM,GAAc,YAAiB,IAAW,EAAQ,GAAI,IAAS,GAAkB,CAAK,CAAC,EAE7F,MAAO,IAAI,IAAS,KAAK,UAAU,IAAI,EAAY,SAAS,EAAG,KAAK,YAAY,IAAI,EAAY,WAAW,CAAC,CAC9G,CAEO,IAAI,EAA0C,CACnD,GAAM,GAAc,YAAiB,IAAW,EAAQ,GAAI,IAAS,GAAkB,CAAK,CAAC,EAE7F,MAAO,IAAI,IAAS,KAAK,UAAU,IAAI,EAAY,WAAW,EAAG,KAAK,YAAY,IAAI,EAAY,SAAS,CAAC,CAC9G,CAEO,cACL,EACA,EAAiB,CAAE,eAAgB,EAAG,EACtC,EAAqB,EACb,CACR,AAAK,OAAO,UAAU,CAAiB,GAAG,GAAO,aAAa,GAAG,sBAAsC,EACnG,GAAqB,GAAG,GAAO,aAAa,GAAG,oBAAoC,EAEvF,GAAQ,IAAI,CAAE,UAAW,EAAoB,EAAG,SAAU,GAAsB,EAAU,CAAC,EAC3F,GAAM,GAAW,GAAI,IAAQ,KAAK,UAAU,SAAS,CAAC,EACnD,IAAI,KAAK,YAAY,SAAS,CAAC,EAC/B,oBAAoB,CAAiB,EACxC,MAAO,GAAS,SAAS,EAAS,cAAc,EAAG,CAAM,CAC3D,CAEO,QACL,EACA,EAAiB,CAAE,eAAgB,EAAG,EACtC,EAAqB,EACb,CACR,MAAK,QAAO,UAAU,CAAa,GAAG,GAAO,aAAa,GAAG,sBAAkC,EAC3F,EAAgB,GAAG,GAAO,aAAa,GAAG,gBAA4B,EAE1E,GAAI,GAAK,EACT,GAAI,GAAK,GAAgB,IAAa,EAC/B,GAAI,IAAI,KAAK,UAAU,SAAS,CAAC,EAAE,IAAI,KAAK,YAAY,SAAS,CAAC,EAAE,SAAS,EAAe,CAAM,CAC3G,CAEO,QAAkB,CACvB,MAAO,MAAK,UAAU,OAAO,CAC/B,CACF,EFvGA,GAAM,IAAS,GAAa,gBAAgB,EAEtC,GAAM,GAAS,UAAI,EIdzB,OAA0B,2BAC1B,GAAiC,6BAGpB,GAAsB,CACjC,QAAS,IACT,QAAS,aAAU,QAAQ,SAAS,EACpC,UAAW,oBAAiB,SAAS,EACrC,SAAU,EACV,OAAQ,MACR,KAAM,SACN,QAAS,iFACT,KAAM,CAAC,EACP,SAAU,EACV,KAAM,UACN,WAAY,CACV,YAAa,QACf,CACF,EAEa,GAAwB,CACnC,QAAS,IACT,QAAS,8CACT,UAAW,oBAAiB,SAAS,EACrC,SAAU,EACV,OAAQ,OACR,KAAM,cACN,QAAS,iFACT,KAAM,CAAC,EACP,SAAU,EACV,KAAM,UACN,WAAY,CACV,YAAa,QACf,CACF,EClCA,OAA0B,2BCA1B,OAA0E,2BAC1E,GAAiC,6BAQ1B,YAAqB,CAAE,SAAQ,WAAW,GAAO,aAAa,IAAuC,CAC1G,MAAO,CACL,SACA,aACA,UACF,CACF,CAEO,GAAM,IAA0B,CACrC,GAAY,CAAE,OAAQ,oBAAkB,WAAY,EAAM,CAAC,EAC3D,GAAY,CAAE,OAAQ,iBAAc,UAAW,WAAY,EAAM,CAAC,EAClE,GAAY,CAAE,OAAQ,sBAAoB,WAAY,EAAM,CAAC,CAC/D,EAIO,YAAmC,CACxC,UAAW,EACX,gBAIY,CACZ,GAAM,GAAY,GAAkB,EAAU,SAAS,CAAC,EAExD,GAAI,YAAqB,cACvB,MAAI,IAAgB,EAAU,OAAO,EAAO,EAAU,GAC/C,EAGT,GAAI,GAAgB,EAAU,SAAS,IAAM,GAAQ,SAAS,EAAG,MAAO,IAExE,GAAI,MAAO,IAAc,SAAU,CACjC,GAAI,IAAc,aAAU,QAAQ,SAAS,EAAG,MAAO,cAAU,QACjE,GAAI,CAEF,MADY,IAAI,cAAU,CAAS,CAErC,MAAE,CACA,KAAM,IAAI,OAAM,oBAAoB,CACtC,CACF,CAEA,KAAM,IAAI,OAAM,oBAAoB,CACtC,CAEO,YAA2B,EAA+B,CAC/D,GAAI,CACF,MAAO,IAAI,cAAU,CAAC,CACxB,MAAE,CACA,MAAO,EACT,CACF,CAEO,GAAM,IAAkB,GAAI,cAAU,6CAA6C,EAC7E,GAAmB,GAAI,cAAU,6CAA6C,EAC9E,GAAkB,GAAI,cAAU,6CAA6C,EAC7E,GAAmB,GAAI,cAAU,6CAA6C,EAC9E,GAAsB,GAAI,cAAU,6CAA6C,EACjF,GAAyB,GAAI,cAAU,6CAA6C,EACpF,GAAoB,iBAAc,UAElC,GAAU,GAAI,cAAU,8CAA8C,EACtE,GAAU,GAAI,cAAU,8CAA8C,EACtE,GAAU,GAAI,cAAU,6CAA6C,EACrE,GAAW,GAAI,cAAU,8CAA8C,EACvE,GAAW,GAAI,cAAU,8CAA8C,EACvE,GAAW,GAAI,cAAU,6CAA6C,EACtE,GAAY,GAAI,cAAU,8CAA8C,EACxE,GAAW,GAAI,cAAU,6CAA6C,EACtE,GAAU,GAAI,cAAU,6CAA6C,EACrE,GAAU,GAAI,cAAU,8CAA8C,EACtE,GAAU,GAAI,cAAU,8CAA8C,EACtE,GAAW,GAAI,cAAU,6CAA6C,EACtE,GAAU,aAAU,QDjE1B,YAAY,CAgBV,YAAY,CAAE,OAAM,WAAU,SAAQ,OAAM,WAAW,GAAO,cAAc,IAAqB,CACtG,GAAI,IAAS,GAAQ,SAAS,GAAM,YAAgB,eAAa,GAAQ,OAAO,CAAI,EAAI,CACtF,KAAK,SAAW,GAAW,SAC3B,KAAK,OAAS,GAAW,OACzB,KAAK,KAAO,GAAW,KACvB,KAAK,KAAO,GAAI,cAAU,GAAW,OAAO,EAC5C,KAAK,YAAc,GACnB,MACF,CAEA,KAAK,SAAW,EAChB,KAAK,OAAS,GAAU,EAAK,SAAS,EAAE,UAAU,EAAG,CAAC,EACtD,KAAK,KAAO,GAAQ,EAAK,SAAS,EAAE,UAAU,EAAG,CAAC,EAClD,KAAK,KAAO,EAAW,aAAU,QAAU,GAA0B,CAAE,UAAW,CAAK,CAAC,EACxF,KAAK,YAAc,CACrB,CAEO,OAAO,EAAuB,CAEnC,MAAI,QAAS,EACJ,GAEF,KAAK,KAAK,OAAO,EAAM,IAAI,CACpC,CACF,EAxCO,MAOkB,AAPlB,GAOkB,KAAc,GAAI,IAAM,OAC1C,IAD0C,CAE7C,KAAM,GAAW,OACnB,EAAC,EEdI,YAAe,CAgBb,YAAY,CAAE,WAAU,SAAS,UAAW,OAAO,WAA4B,CACpF,KAAK,SAAW,EAChB,KAAK,OAAS,EACd,KAAK,KAAO,CACd,CAEO,OAAO,EAA0B,CACtC,MAAO,QAAS,CAClB,CACF,EAzBO,MAQkB,AARlB,GAQkB,IAAgB,GAAI,IAAS,EAAQ,ECrB9D,OAAe,oBAIR,GAAM,IAAe,GAAI,IAAS,GAAI,YAAG,GAAG,CAAC,ECGpD,GAAM,IAAS,GAAa,eAAe,EVOpC,GAAM,IAAU,GAAI,YAAG,CAAC,EAClB,GAAS,GAAI,YAAG,CAAC,EACjB,GAAS,GAAI,YAAG,CAAC,EACjB,GAAW,GAAI,YAAG,CAAC,EACnB,GAAU,GAAI,YAAG,CAAC,EAClB,GAAS,GAAI,YAAG,EAAE,EAClB,GAAS,GAAI,YAAG,GAAG,EACnB,GAAU,GAAI,YAAG,GAAI,EACrB,GAAW,GAAI,YAAG,GAAK,EAmF7B,YAAiB,EAAiB,EAAkB,EAAwB,CACjF,MAAO,GAAY,IAAI,CAAY,EAAE,IAAI,CAAc,EAAE,IAAI,GAAI,YAAG,CAAC,CAAC,EAAE,IAAI,CAAc,CAC5F,CWvGO,YAAuB,EAAU,EAAY,EAAG,EAAe,CAAC,EAAU,CAC/E,GAAM,GAAM,CAAC,GAAG,CAAG,EACnB,GAAI,GAAa,EAAG,MAAO,GAC3B,KAAO,EAAI,QAAQ,EAAM,KAAK,EAAI,OAAO,EAAG,CAAS,CAAC,EACtD,MAAO,EACT,CCLO,YAAY,CAGjB,YAAY,EAAe,CACzB,KAAK,OAAS,CAChB,IAEI,YAAuB,CACzB,MAAI,IAAM,UAAU,KAAK,MAAM,EACtB,KAAK,OAAO,UAGd,KAAK,MACd,IAEI,SAA6B,CAC/B,MAAO,IAAM,UAAU,KAAK,MAAM,EAAI,KAAK,OAAS,MACtD,IAEI,YAAqB,CACvB,MAAO,IAAM,UAAU,KAAK,MAAM,CACpC,IAEI,cAAuB,CACzB,MAAO,IAAM,YAAY,KAAK,MAAM,CACtC,OAEO,WAAU,EAAiC,CAChD,MAAQ,GAAkB,YAAc,MAC1C,OAEO,aAAY,EAAmC,CACpD,MAAO,CAAC,GAAM,UAAU,CAAK,CAC/B,CACF,ECtCA,OAA0B,2BAE1B,GAAiC,6BCFjC,OAYO,2BCPA,GAAM,IAAkB,CAC7B,cAAe,gBACf,YAAa,cACb,UAAW,YACX,aAAc,eACd,eAAgB,iBAChB,SAAU,WACV,OAAQ,SAER,WAAY,aACZ,mBAAoB,qBAEpB,oBAAqB,sBACrB,oBAAqB,sBAGrB,eAAgB,iBAChB,iBAAkB,mBAClB,qBAAsB,uBACtB,qBAAsB,uBACtB,kBAAmB,oBACnB,eAAgB,iBAChB,gBAAiB,kBACjB,eAAgB,iBAChB,cAAe,gBACf,kBAAmB,oBACnB,iBAAkB,mBAClB,wBAAyB,0BAEzB,UAAW,YACX,kBAAmB,oBACnB,qBAAsB,uBACtB,sBAAuB,wBACvB,gBAAiB,kBACjB,iBAAkB,mBAClB,gBAAiB,kBACjB,cAAe,gBAEf,kBAAmB,oBACnB,qBAAsB,uBACtB,sBAAuB,wBACvB,gBAAiB,kBACjB,iBAAkB,mBAElB,UAAW,YACX,WAAY,aACZ,WAAY,aAEZ,cAAe,gBACf,eAAgB,iBAChB,mBAAoB,qBAEpB,eAAgB,iBAEhB,cAAe,gBACf,eAAgB,iBAChB,mBAAoB,qBAEpB,cAAe,gBACf,eAAgB,iBAChB,aAAc,eACd,cAAe,gBACf,uBAAwB,yBACxB,sBAAuB,wBAEvB,eAAgB,iBAChB,iBAAkB,mBAClB,sBAAuB,wBACvB,eAAgB,iBAChB,gBAAiB,kBAEjB,WAAY,aACZ,mBAAoB,qBACpB,YAAa,aACf,ED5DA,OAAiC,6BAE3B,GAAS,GAAa,gBAAgB,EAE/B,GAAkB,KAExB,YAA0B,EAG/B,CACA,GAAM,GAAgC,CAAC,EACjC,EAAqB,CAAC,EAC5B,MAAI,GAAO,eACT,GAAI,KAAK,wBAAqB,oBAAoB,CAAE,cAAe,EAAO,aAAc,CAAC,CAAC,EAC1F,EAAS,KAAK,GAAgB,mBAAmB,GAE/C,EAAO,OACT,GAAI,KAAK,wBAAqB,oBAAoB,CAAE,MAAO,EAAO,KAAM,CAAC,CAAC,EAC1E,EAAS,KAAK,GAAgB,mBAAmB,GAG5C,CACL,aAAc,EACd,iBAAkB,CACpB,CACF,CAEA,kBAAyC,EAAwB,EAA+C,CA9ChH,QA+CE,GAAM,GAAa,UAAmB,YACtC,MAAQ,QAAM,MAAW,qBAAX,qBAAgC,CAAE,YAAW,MAAnD,cAAwD,SAClE,CAEA,kBAAyC,EAAwB,EAA+B,CAC9F,SAAW,qBAAqB,CAAC,CAAI,CAAC,EAC/B,GAAI,SAAQ,CAAC,EAAS,IAAW,CACtC,GAAM,GAAK,WAAW,EAAQ,GAAS,EACvC,EAAW,YACT,EACA,AAAC,GAAoB,CAEnB,GADA,aAAa,CAAE,EACX,CAAC,EAAgB,IAAK,CACxB,EAAQ,EAAE,EACV,MACF,CACA,EAAO,OAAO,OAAO,EAAgB,IAAK,CAAE,MAAK,CAAC,CAAC,CACrD,EACA,WACF,CACF,CAAC,CACH,CAKO,YAAiC,EAAwC,EAA+B,CAC7G,AAAI,EAAa,OAAS,GAAG,GAAO,aAAa,6BAA6B,EAAa,SAAS,GAAG,EACnG,EAAQ,OAAS,GAAG,GAAO,aAAa,yBAAyB,EAAQ,SAAS,GAAG,EAEzF,GAAM,GAAc,GAAI,gBACxB,EAAY,gBAAkB,mCAC9B,EAAY,SAAW,EAAQ,GAC/B,EAAY,IAAI,GAAG,CAAY,EAE/B,GAAI,CACF,MAAO,QAAO,KAAK,EAAY,UAAU,CAAE,iBAAkB,EAAM,CAAC,CAAC,EAAE,SAAS,QAAQ,EAAE,OAAS,EACrG,MAAE,CACA,MAAO,EACT,CACF,CAqFO,YACL,EACA,EAIA,CACA,GAAM,CAAC,EAAW,GAAS,aAAU,uBAAuB,EAAO,CAAS,EAC5E,MAAO,CAAE,YAAW,OAAM,CAC5B,CAkEO,YAA2B,CAChC,eACA,QACA,WAKU,CACV,MAAO,IAAwB,EAAc,CAAC,EAAO,GAAG,CAAO,CAAC,CAClE,CAEO,YAAuB,CAC5B,eACA,QACA,4BACA,kBAAkB,WAAQ,SAAS,EAAE,UAAU,SAAS,GAM9C,CAOV,GAAM,GAAY,AANS,GAAI,uBAAmB,CAChD,SAAU,EACV,kBACA,cACF,CAAC,EAEoC,mBAAmB,OAAO,OAAO,UAA6B,CAAC,CAAC,CAAC,EACtG,GAAI,CAEF,MAAO,AADa,QAAO,KAAK,GAAI,yBAAqB,CAAS,EAAE,UAAU,CAAC,EAAE,SAAS,QAAQ,EAAE,OAC/E,EACvB,MAAE,CACA,MAAO,EACT,CACF,CAoBO,GAAM,IAAW,AAAC,GACnB,OAAO,SAAS,CAAG,EACd,EACE,YAAe,YACjB,OAAO,KAAK,EAAI,OAAQ,EAAI,WAAY,EAAI,UAAU,EAEtD,OAAO,KAAK,CAAG,EAIb,GAAa,AAAC,GAA4D,CACrF,GAAI,GAAa,EAAY,UAAU,CAAE,qBAAsB,GAAO,iBAAkB,EAAM,CAAC,EAC/F,AAAI,YAAuB,0BAAsB,GAAa,GAAS,CAAU,GACjF,GAAI,CACF,MAAO,aAAsB,QAAS,EAAW,SAAS,QAAQ,EAAI,OAAO,KAAK,CAAU,EAAE,SAAS,QAAQ,CACjH,MAAE,CACA,MAAO,GAAW,SAAS,QAAQ,CACrC,CACF,EAEO,YAAuB,EAAgE,CAC5F,GAAM,GAAsB,CAAC,EAC7B,SAAa,QAAQ,AAAC,GAAgB,CACpC,AAAI,YAAuB,iBACpB,GAAY,iBAAiB,GAAY,gBAAkB,oBAAiB,SAAS,GACrF,EAAY,UAAU,GAAY,SAAW,WAAQ,SAAS,EAAE,YAEvE,EAAU,KAAK,GAAW,CAAW,CAAC,CACxC,CAAC,EACD,QAAQ,IAAI,sBAAuB,CAAS,EAErC,CACT,CD1UO,YACL,EACA,EACA,EAIA,CACA,MAAO,IACL,CAAC,EAAM,SAAS,EAAI,WAAa,qBAAkB,SAAS,EAAG,EAAK,SAAS,CAAC,EAC9E,GAAI,cAAU,8CAA8C,CAC9D,CACF,CGjBA,MAA0B,2BAGb,GAAqB,GAAI,aAAU,8CAA8C,EAEjF,GAAqB,GAAI,aAAU,6CAA6C,EAEhF,GAAqB,GAAI,aAAU,8CAA8C,EAEjF,GAAqB,GAAI,aAAU,8CAA8C,EAEjF,GAAW,GAAI,aAAU,8CAA8C,EAEvE,GAAoB,GAAI,aAAU,6CAA6C,EAC/E,GAAsB,GAAI,aAAU,8CAA8C,EAElF,GAAS,GAAI,aAAU,8CAA8C,EACrE,GAAa,GAAI,aAAU,8CAA8C,EACzE,GAAqC,GAAI,aAAU,8CAA8C,EACjG,GAAkB,GAAI,aAAU,8CAA8C,EAC9E,GAAuB,GAAI,aAAU,6CAA6C,EAClF,GAAoB,GAAI,aAAU,6CAA6C,EAE/E,GAAoB,GAAI,aAAU,8CAA8C,EAEhF,GAAS,GAAI,aAAU,6CAA6C,EACpE,GAAqB,GAAI,aAAU,8CAA8C,EAEjF,GAAoB,GAAI,aAAU,8CAA8C,EAChF,GAAoB,GAAI,aAAU,8CAA8C,EAChF,GAAoB,GAAI,aAAU,8CAA8C,EAChF,GAAoB,GAAI,aAAU,8CAA8C,EAEhF,GAA2B,GAAI,aAAU,8CAA8C,EACvF,GAAwB,GAAI,aAAU,8CAA8C,EACpF,GAA2B,GAAI,aAAU,8CAA8C,EAEvF,GAAoB,GAAI,aAAU,6CAA6C,EAE/E,GAAiB,GAAI,aAAU,8CAA8C,EAE7E,GAAoB,GAAI,aAAU,6CAA6C,EAC/E,GAAiB,GAAI,aAAU,6CAA6C,EAE5E,GAAwB,GAAI,aAAU,8CAA8C,EACpF,GAAqB,GAAI,aAAU,8CAA8C,EAEjF,GAAqB,GAAI,aAAU,8CAA8C,EAEjF,GAAmB,GAAI,aAAU,8CAA8C,EAiDrF,GAAM,IAA2C,CACtD,kBAAmB,GAAI,aAAU,8CAA8C,EAC/E,oBAAqB,GAAI,aAAU,6CAA6C,EAChF,OAAQ,GAAI,aAAU,8CAA8C,EACpE,WAAY,GAAI,aAAU,8CAA8C,EAExE,gBAAiB,GAAI,aAAU,8CAA8C,EAC7E,qBAAsB,GAAI,aAAU,8CAA8C,EAClF,kBAAmB,GAAI,aAAU,6CAA6C,EAE9E,yBAA0B,GAAI,aAAU,8CAA8C,EACtF,sBAAuB,GAAI,aAAU,8CAA8C,EACnF,yBAA0B,GAAI,aAAU,8CAA8C,EAEtF,kBAAmB,GAAI,aAAU,8CAA8C,EAC/E,eAAgB,GAAI,aAAU,8CAA8C,EAE5E,SAAU,YAAU,QAEpB,OAAQ,GAAI,aAAU,8CAA8C,EAEpE,mBAAoB,GAAI,aAAU,8CAA8C,EAChF,mBAAoB,GAAI,aAAU,6CAA6C,EAC/E,mBAAoB,GAAI,aAAU,8CAA8C,EAChF,mBAAoB,GAAI,aAAU,8CAA8C,EAEhF,kBAAmB,GAAI,aAAU,8CAA8C,EAC/E,eAAgB,GAAI,aAAU,8CAA8C,EAE5E,mBAAoB,GAAI,aAAU,8CAA8C,EAChF,iBAAkB,GAAI,aAAU,8CAA8C,EAE9E,mBAAoB,GAAI,aAAU,8CAA8C,EAEhF,kBAAmB,GAAI,aAAU,6CAA6C,CAChF,ECpIA,OAAe,oBAMT,GAAQ,IAwIP,YAAmB,EAAS,EAAa,CAC9C,GAAM,CAAE,MAAK,OAAQ,EAAI,OAAO,CAAG,EAEnC,MAAI,GAAI,GAAG,GAAI,YAAG,CAAC,CAAC,EACX,EAAI,IAAI,GAAI,YAAG,CAAC,CAAC,EAEjB,CAEX,CAEO,YAAmB,EAAa,EAAiB,CACtD,GAAI,EAAQ,OAAO,EAAG,MAAO,IAAI,YAAG,CAAC,EAErC,GAAM,GAAW,EAAQ,IAAI,CAAO,EAEpC,MAAI,GAAS,OAAO,EAAU,GAAI,YAAG,CAAC,EAGlC,AADc,EAAQ,IAAI,CAAO,EACvB,GAAG,GAAI,YAAG,CAAC,CAAC,EACjB,EAAS,IAAI,GAAI,YAAG,CAAC,CAAC,EAExB,CACT,CAEO,YACL,EACA,EACA,EACsB,CACtB,GAAI,IAAc,OAChB,MAAO,CACL,SACA,IAAK,OACL,eAAgB,MAClB,EAEF,GAAM,GAAQ,KAAK,MAAM,EAAO,KAAM,EAChC,EACJ,EAAQ,EAAU,iBAAiB,MAAQ,EAAU,iBAAmB,EAAU,iBAC9E,EAAS,GAAI,YAAG,EAAa,WAAW,SAAS,CAAC,EAClD,EACJ,EAAQ,EAAU,iBAAiB,MAC7B,QAAO,EAAU,iBAAiB,KAAK,EAAI,MAAS,GAAQ,IAAO,IACrE,OACA,EAAO,GAAU,EAAO,IAAI,GAAI,YAAG,EAAa,sBAAsB,CAAC,EAAG,GAAI,YAAG,EAAK,CAAC,EACvF,EAAM,EAAK,GAAG,CAAM,EAAI,EAAS,EACvC,MAAO,CACL,SACA,MACA,gBACF,CACF,CACO,YACL,EACA,EACA,EACsB,CACtB,GAAI,IAAc,OAChB,MAAO,CACL,SACA,IAAK,OACL,eAAgB,MAClB,EAEF,GAAM,GAAQ,KAAK,MAAM,EAAO,KAAM,EAChC,EACJ,EAAQ,EAAU,iBAAiB,MAAQ,EAAU,iBAAmB,EAAU,iBAC9E,EAAS,GAAI,YAAG,EAAa,WAAW,SAAS,CAAC,EAClD,EACJ,EAAQ,EAAU,iBAAiB,MAC7B,QAAO,EAAU,iBAAiB,KAAK,EAAI,MAAS,GAAQ,IAAO,IACrE,OACN,GAAI,EAAa,yBAA2B,GAAO,CACjD,GAAM,GAAY,GAAI,YAAG,EAAa,WAAW,SAAS,CAAC,EAC3D,MAAO,CACL,OAAQ,EAAO,IAAI,CAAS,EAC5B,IAAK,EACL,gBACF,CACF,KAAO,CACL,GAAM,GAAW,GAAU,EAAO,IAAI,GAAI,YAAG,EAAK,CAAC,EAAG,GAAI,YAAG,GAAQ,EAAa,sBAAsB,CAAC,EACnG,EAAY,GAAI,YAAG,EAAa,WAAW,SAAS,CAAC,EACrD,EAAU,EAAS,IAAI,CAAM,EAAE,GAAG,CAAS,EAAI,EAAO,IAAI,CAAS,EAAI,EACvE,EAAO,GAAU,EAAQ,IAAI,GAAI,YAAG,EAAa,sBAAsB,CAAC,EAAG,GAAI,YAAG,EAAK,CAAC,EACxF,EAAM,EAAK,GAAG,CAAM,EAAI,EAAS,EACvC,MAAO,CACL,OAAQ,EACR,MACA,gBACF,CACF,CACF,CC1OA,OAA0B,2BAC1B,GAAe,oBCDf,OAAe,oBACF,GAA6B,GAAI,YAAG,GAAS,EpBG1D,OAA8E,6BAqBxE,GAAS,GAAa,0BAA0B,EAEtD,kBACE,EACA,EACA,EACyC,CACzC,GAAM,CACJ,eACA,aAAa,YACb,aAAa,KACX,GACF,aAAc,IACX,GAGC,EAAc,GAAW,EAAY,CAAU,EACjD,EAA4C,GAAI,OAAM,EAAY,MAAM,EAAE,KAAK,CAAC,CAAC,EAErF,GAAI,EAAc,CAChB,GAAM,GAAQ,EAAY,IAAI,AAAC,GAAS,CACtC,GAAM,GAAO,EAAW,WAAW,CAAC,EAAK,IAAI,AAAC,GAAQ,EAAI,SAAS,CAAC,CAAC,EAAG,EAAY,QAAQ,EAC5F,MAAO,CACL,WAAY,sBACZ,MACF,CACF,CAAC,EAEK,EAAS,GAAW,EAAO,EAAE,EAKnC,EAAU,AAHgD,MACxD,MAAM,SAAQ,IAAI,EAAO,IAAI,KAAO,IAAM,KAAO,GAAmB,iBAAiB,CAAC,CAAC,CAAC,GACxF,KAAK,GACkB,IAAI,AAAC,GACxB,GAAU,OACZ,GAAO,aAAa,wDAAwD,EAAU,MAAM,SAAS,EAEhG,EAAU,OAAO,MAAM,IAAI,AAAC,GAAgB,CACjD,GAAI,EAAa,CACf,GAAM,CAAE,OAAM,aAAY,WAAU,QAAO,aAAc,EAEzD,MAAI,GAAK,SAAW,GAAK,EAAK,KAAO,UAAU,GAAO,aAAa,wCAAwC,EAEpG,CACL,KAAM,OAAO,KAAK,EAAK,GAAI,QAAQ,EACnC,aACA,WACA,MAAO,GAAI,cAAU,CAAK,EAC1B,WACF,CACF,CACA,MAAO,KACT,CAAC,EACF,CACH,KACE,IAAI,CACF,EAAW,KAAM,SAAQ,IACvB,EAAY,IAAI,AAAC,GAAS,EAAW,wBAAwB,EAAM,CAAU,CAAC,CAChF,CACF,OAAS,EAAP,CACA,AAAI,YAAiB,QACnB,GAAO,aAAa,wDAAwD,EAAM,SAAS,CAE/F,CAGF,MAAO,GAAQ,KAAK,CACtB,CAEA,kBACE,EACA,EACA,EAC8D,CAC9D,GAAM,GAAuB,KAAM,IACjC,EACA,EAAyB,IAAI,AAAC,GAAM,EAAE,MAAM,EAC5C,CACF,EAEA,MAAO,GAAyB,IAAI,CAAC,EAAG,IAAS,OAAK,GAAL,CAAQ,YAAa,EAAqB,EAAK,EAAE,CACpG,CDnGA,kBAAiD,CAC/C,aACA,UACA,UAAU,WAKU,CACpB,GAAM,GAAY,KAAM,IACtB,EACA,CAAC,GAAG,GAAI,KAAY,EAAQ,IAAI,AAAC,GAAM,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,AAAC,GAAM,GAAI,cAAU,CAAC,CAAC,CACpF,EAEM,EAAoB,CAAC,EAC3B,OAAS,GAAI,EAAG,EAAI,EAAQ,OAAQ,IAAK,CACvC,GAAM,GAAO,EAAU,GACjB,EAAM,EAAQ,GACpB,GAAI,CAAC,EAAM,SACX,GAAM,GAAgB,GAAI,8BAA0B,CAClD,MACA,MAAO,6BAA0B,YAAY,EAAK,IAAI,CACxD,CAAC,EACD,EAAQ,EAAI,SAAS,GAAK,EAE1B,AAAI,IAAY,SAAU,GAAuB,EAAI,SAAS,GAAK,EAC9D,GAAmB,EAAI,SAAS,GAAK,CAC5C,CAEA,MAAO,EACT,CAEO,GAAM,IAA+B,CAU5C,EAEa,GAA0B,KAAO,IAA2B,CACvE,GAAM,GAAS,+CACf,GAAI,GAAmB,GAAS,MAAO,IAEvC,GAAM,GAAS,GAAI,cAAU,CAAM,EAC7B,EAAO,KAAM,GAAW,eAAe,CAAM,EACnD,MAAK,IACL,IAAmB,GAAU,GAAI,8BAA0B,CACzD,IAAK,EACL,MAAO,6BAA0B,YAAY,EAAK,IAAI,CACxD,CAAC,GAEM,EACT,EAEa,GAAmC,CAAC,EACpC,GAAyB,KAAO,IAA2B,CACtE,GAAM,GAAY,+CAClB,GAAI,GAAuB,GAAY,MAAO,IAE9C,GAAM,GAAS,GAAI,cAAU,CAAS,EAChC,EAAO,KAAM,GAAW,eAAe,CAAM,EACnD,MAAK,IACL,IAAuB,GAAa,GAAI,8BAA0B,CAChE,IAAK,EACL,MAAO,6BAA0B,YAAY,EAAK,IAAI,CACxD,CAAC,GAEM,EACT,EDqDA,GAAM,IAAgB,IAEf,QAAgB,CAerB,YAAY,EAAuB,CAZ3B,kBAAyC,CAAC,EAC1C,qBAA4C,CAAC,EAC7C,wBAA+B,CAAC,EAChC,aAAoB,CAAC,EACrB,sBAA6B,CAAC,EAC9B,yBAAgC,CAAC,EAQvC,KAAK,WAAa,EAAO,WACzB,KAAK,SAAW,EAAO,SACvB,KAAK,oBAAsB,EAAO,oBAClC,KAAK,MAAQ,EAAO,MACpB,KAAK,QAAU,EAAO,QACtB,KAAK,oBAAsB,EAAO,oBAClC,KAAK,kBAAoB,CAAC,CAAC,EAAO,iBACpC,IAEI,YAOF,CACA,MAAO,CACL,aAAc,KAAK,aACnB,gBAAiB,KAAK,gBACtB,QAAS,KAAK,QACd,iBAAkB,KAAK,iBACvB,oBAAqB,KAAK,oBAC1B,mBAAoB,KAAK,kBAC3B,CACF,IAEI,kBAA4C,CAC9C,MAAO,CAAC,GAAG,KAAK,aAAc,GAAG,KAAK,eAAe,CACvD,MAEa,yBAAmE,CAtLlF,MAuLI,GAAM,GACJ,MAAM,YAAM,IAAuB,qDAAqD,KAAe,GACvG,KACI,CAAE,OAAQ,oBAAO,MAAP,OAAc,CAAC,EAC/B,GAAI,EAAC,EACL,MAAO,CACL,MAAO,IACP,cAAe,KAAK,IAAI,KAAK,KAAM,EAAM,IAAW,GAAM,EAAG,IAAK,CACpE,CACF,CAEO,uBAAuB,EAAuC,CACnE,GAAI,EAAQ,CACV,GAAM,CAAE,eAAc,oBAAqB,GAAiB,CAAM,EAClE,YAAK,aAAa,QAAQ,GAAG,CAAY,EACzC,KAAK,iBAAiB,QAAQ,GAAG,CAAgB,EAC1C,EACT,CACA,MAAO,EACT,CAEO,kBAAkB,EAAkC,CA5M7D,MA6MI,MAAI,GACF,MAAK,gBAAgB,KACnB,gBAAc,SAAS,CACrB,WAAY,KAAU,WAAV,OAAsB,KAAK,SACvC,SAAU,GAAI,aAAU,EAAU,OAAO,EACzC,SAAU,OAAO,EAAU,OAAO,SAAS,CAAC,CAC9C,CAAC,CACH,EACA,KAAK,oBAAoB,KAAK,GAAgB,WAAW,EAClD,IAEF,EACT,MAEa,kBAAiB,CAC5B,OAAQ,EACR,cAIgB,CAChB,GAAI,CACF,GAAM,GAAS,GAAe,KAAM,MAAK,uBAAuB,EAChE,GAAI,KAAK,uBAAuB,CAAM,EAAG,OACzC,GAAc,KAAK,aAAa,QAAQ,GAAG,CAAU,CACvD,MAAE,CACA,GAAc,KAAK,aAAa,QAAQ,GAAG,CAAU,CACvD,CACF,CAEO,eAAe,CACpB,eAAe,CAAC,EAChB,kBAAkB,CAAC,EACnB,UAAU,CAAC,EACX,mBAAmB,CAAC,EACpB,sBAAsB,CAAC,EACvB,qBAAqB,CAAC,GACW,CACjC,YAAK,aAAa,KAAK,GAAG,CAAY,EACtC,KAAK,gBAAgB,KAAK,GAAG,CAAe,EAC5C,KAAK,QAAQ,KAAK,GAAG,CAAO,EAC5B,KAAK,iBAAiB,KAAK,GAAG,CAAgB,EAC9C,KAAK,oBAAoB,KAAK,GAAG,CAAmB,EACpD,KAAK,mBAAmB,KAAK,GAAG,EAAmB,OAAO,AAAC,GAAY,IAAY,YAAU,QAAQ,SAAS,CAAC,CAAC,EACzG,IACT,MAEa,cAAsC,CACjD,YACA,WAIyE,CACzE,MAAI,KAAc,EAAsB,KAAM,MAAK,QAAQ,KAAM,GAAW,CAAC,EAAI,EAC1E,KAAK,MAAS,CAAO,CAC9B,CAEO,MAA+B,EAA8C,CAvQtF,MAwQI,GAAM,GAAc,GAAI,eACxB,MAAI,MAAK,gBAAgB,QAAQ,EAAY,IAAI,GAAG,KAAK,eAAe,EACxE,EAAY,SAAW,KAAK,SACxB,SAAK,QAAL,cAAY,SAAU,CAAC,KAAK,QAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,GAC3F,KAAK,QAAQ,KAAK,KAAK,MAAM,MAAM,EAE9B,CACL,QAAS,KACT,cACA,QAAS,KAAK,QACd,iBAAkB,CAAC,GAAG,KAAK,iBAAkB,GAAG,KAAK,mBAAmB,EACxE,QAAS,KAAO,IAAW,CAnRjC,MAoRQ,GAAM,CAAE,gBAAiB,EAAe,gBAAgB,GAAM,iBAAgB,gBAAiB,GAAU,CAAC,EACpG,EAAkB,UAAkB,KAAM,IAAmB,KAAK,WAAY,KAAK,mBAAmB,EAK5G,GAJA,EAAY,gBAAkB,EAC1B,KAAK,QAAQ,QAAQ,EAAY,KAAK,GAAG,KAAK,OAAO,EAEzD,GAAc,CAAC,CAAW,CAAC,EACvB,QAAK,QAAL,QAAY,UAYd,MAAO,CACL,KAZW,EACT,KAAM,gCACJ,KAAK,WACL,EACA,KAAK,QAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,EAC9D,KAAK,QACL,CAAC,GAAG,KAAK,QAAS,KAAK,MAAM,MAAO,EACxC,CAAE,eAAc,CAClB,EACA,KAAM,MAAK,WAAW,mBAAmB,EAAY,UAAU,EAAG,CAAE,eAAc,CAAC,EAIrF,SAAU,CACZ,EAEF,GAAI,KAAK,oBAAqB,CAC5B,GAAM,GAAM,KAAM,MAAK,oBAAoB,CAAC,CAAW,CAAC,EACxD,GAAI,KAAK,QAAQ,OACf,OAAW,KAAQ,GACjB,GAAI,CACF,EAAK,KAAK,GAAG,KAAK,OAAO,CAC3B,MAAE,CAEF,CAGJ,MAAO,CACL,KAAM,EAAe,GAAK,KAAM,MAAK,WAAW,mBAAmB,EAAI,GAAG,UAAU,EAAG,CAAE,eAAc,CAAC,EACxG,SAAU,EAAI,EAChB,CACF,CACA,KAAM,IAAI,OAAM,wEAAwE,CAC1F,EACA,QAAS,GAAY,CAAC,CACxB,CACF,CAEO,aAAsC,EAGxB,CApUvB,MAqUI,GAAM,CAAE,oBAAoB,CAAC,EAAG,WAAY,EACtC,CAAE,eAAgB,KAAK,MAAM,CAAO,EAEpC,EAAuB,EAAkB,OAAO,AAAC,GAAS,EAAK,YAAY,aAAa,OAAS,CAAC,EAElG,EAAiC,CAAC,EAAa,GAAG,EAAqB,IAAI,AAAC,GAAS,EAAK,WAAW,CAAC,EACtG,EAAyB,CAAC,KAAK,QAAS,GAAG,EAAqB,IAAI,AAAC,GAAS,EAAK,OAAO,CAAC,EAC3F,EAAgC,CACpC,GAAG,KAAK,iBACR,GAAG,EAAqB,IAAI,AAAC,GAAS,EAAK,gBAAgB,EAAE,KAAK,CACpE,EAEA,MAAI,QAAK,QAAL,QAAY,QACd,EAAW,QAAQ,AAAC,GAAY,CAC9B,AAAK,EAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,GAAG,KAAK,QAAQ,KAAK,KAAK,MAAO,MAAO,CAC5G,CAAC,EAGI,CACL,QAAS,KACT,aAAc,EACd,QAAS,EACT,iBAAkB,EAClB,QAAS,KAAO,IAAwC,CA5V9D,MA6VQ,GAAM,CACJ,eACA,aACA,cAAc,EACd,gBAAiB,EACjB,gBAAgB,IACd,GAAiB,CAAC,EAChB,EAAkB,UAAkB,KAAM,IAAmB,KAAK,WAAY,KAAK,mBAAmB,EAC5G,GAAI,QAAK,QAAL,QAAY,UAAW,CACzB,GAAI,EAAc,CAChB,GAAM,GAAkB,CAAC,EACrB,EAAI,EACR,OAAW,KAAM,GAAiB,CAEhC,GADA,EAAE,EACE,GAAK,EAAa,SACtB,GAAM,GAAO,KAAM,gCACjB,KAAK,WACL,EACA,KAAK,QAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,EAC9D,KAAK,QACL,CAAC,GAAG,KAAK,QAAS,KAAK,MAAM,MAAO,EACxC,CAAE,eAAc,CAClB,EACA,EAAM,KAAK,CAAI,CACjB,CAEA,MAAO,CACL,QACA,UAAW,CACb,CACF,CACA,MAAO,CACL,MAAO,KAAM,MAAM,SAAQ,IACzB,EAAgB,IAAI,KAAO,IACzB,GAAG,gBAAkB,EACd,KAAM,MAAK,WAAW,mBAAmB,EAAG,UAAU,EAAG,CAAE,eAAc,CAAC,EAClF,CACH,EACA,UAAW,CACb,CACF,CAEA,GAAI,KAAK,oBAAqB,CAC5B,GAAM,GAAmB,EAAgB,IAAI,CAAC,EAAI,IAChD,GAAG,gBAAkB,EACjB,EAAW,GAAK,QAAQ,EAAG,KAAK,GAAG,EAAW,EAAI,EAC/C,EACR,EACD,GAAc,CAAgB,EAC9B,GAAM,GAAY,KAAM,MAAK,oBAAoB,CAAgB,EACjE,GAAI,EAAc,CAChB,GAAI,GAAI,EACF,EAAiC,CAAC,EAClC,EAAc,SAA2B,CAC7C,GAAI,CAAC,EAAU,GAAI,OACnB,GAAM,GAAO,KAAM,MAAK,WAAW,mBAAmB,EAAU,GAAG,UAAU,EAAG,CAAE,eAAc,CAAC,EACjG,EAAa,KAAK,CAAE,OAAM,OAAQ,OAAQ,SAAU,EAAU,EAAG,CAAC,EAClE,WAAa,CAAC,GAAG,CAAY,GAC7B,IACA,GAAI,GAAY,GAEZ,EAAkC,KACpC,EAAgC,KAC5B,EAAM,AAAC,GAA2C,CACtD,IAAe,MAAQ,cAAc,CAAU,EAC/C,IAAmB,MAAQ,KAAK,WAAW,wBAAwB,CAAc,EACjF,GAAM,GAAc,EAAa,UAAU,AAAC,GAAO,EAAG,OAAS,CAAI,EACnE,GAAI,EAAc,GAAI,CACpB,GAAI,EAAa,GAAa,SAAW,SAAW,EAAa,GAAa,SAAW,UACvF,OACF,EAAa,GAAa,OAAS,EAAgB,IAAM,QAAU,SACrE,CACA,WAAa,CAAC,GAAG,CAAY,GACxB,EAAgB,KAAK,EAAY,CACxC,EAEA,AAAI,KAAK,mBACP,GAAa,YAAY,SAAY,CA1arD,MA2akB,GAAI,EAAW,CACb,cAAc,CAAW,EACzB,MACF,CACA,GAAI,CACF,GAAM,GAAI,KAAM,MAAK,WAAW,eAAe,EAAM,CACnD,WAAY,YACZ,+BAAgC,CAClC,CAAC,EACD,AAAI,GACF,GAAY,GACZ,cAAc,CAAW,EACzB,EAAI,CAAE,IAAK,MAAE,OAAF,cAAQ,MAAO,IAAK,CAAC,EAChC,QAAQ,IAAI,iCAAkC,CAAI,EAEtD,OAAS,EAAP,CACA,EAAY,GACZ,cAAc,CAAW,EACzB,QAAQ,MAAM,0BAA2B,EAAG,CAAI,CAClD,CACF,EAAG,EAAa,GAElB,EAAiB,KAAK,WAAW,YAC/B,EACA,AAAC,GAAW,CACV,GAAI,EAAW,CACb,KAAK,WAAW,wBAAwB,CAAe,EACvD,MACF,CACA,EAAY,GACZ,EAAI,CAAM,CACZ,EACA,WACF,EACA,KAAK,WAAW,mBAAmB,CAAI,CACzC,EACA,YAAM,GAAY,EACX,CACL,MAAO,EAAa,IAAI,AAAC,GAAM,EAAE,IAAI,EACrC,WACF,CACF,KAAO,CACL,GAAM,GAAkB,CAAC,EACzB,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,GAAK,EAAG,CAC5C,GAAM,GAAO,KAAM,MAAK,WAAW,mBAAmB,EAAU,GAAG,UAAU,EAAG,CAAE,eAAc,CAAC,EACjG,EAAM,KAAK,CAAI,CACjB,CACA,MAAO,CACL,QACA,WACF,CACF,CACF,CACA,KAAM,IAAI,OAAM,wEAAwE,CAC1F,EACA,QAAS,GAAW,CAAC,CACvB,CACF,MAEa,mBAAgE,CAC3E,oBACA,YACA,WAKiC,CACjC,MAAI,KAAc,EACR,KAAM,MAAK,eAAe,CAChC,kBAAmB,EACnB,WAAY,GAAW,CAAC,CAC1B,CAAC,EACI,KAAK,aAAgB,CAC1B,kBAAmB,EACnB,SACF,CAAC,CACH,MAEa,SACX,EAMsC,CAjgB1C,MAkgBI,GAMI,MAAS,CAAC,EALZ,oBAAmB,CAAC,EACpB,qBAAqB,CAAC,EACtB,gBACA,gBAAiB,GAEf,EADC,KACD,EADC,CAJH,mBACA,qBACA,gBACA,oBAII,EAA4B,OAC5B,KAAK,UAAY,SACjB,KAAM,IAAuB,KAAK,UAAU,EAC5C,KAAM,IAAwB,KAAK,UAAU,GAC9C,GAEC,EAAS,MAAM,KAAK,GAAI,KAAY,CAAC,GAAG,EAAoB,GAAG,KAAK,kBAAkB,CAAC,CAAC,EACxF,EAA4B,CAAC,EACnC,OAAW,KAAQ,GACjB,AAAI,EAA0B,KAAU,QAAW,EAAa,KAAK,GAAI,aAAU,CAAI,CAAC,EAE1F,GAAM,GAAc,KAAM,IAA2B,CAAE,WAAY,KAAK,WAAY,QAAS,CAAa,CAAC,EAC3G,OAAW,CAAC,EAAK,IAAU,QAAO,QAAQ,CAAW,EAAG,EAA0B,GAAO,EAEzF,GAAM,GAAkB,EACpB,YAAU,QAAQ,SAAS,EAC3B,UAAwB,KAAM,IAAmB,KAAK,WAAY,KAAK,mBAAmB,EACxF,EAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,kBACA,aAAc,CAAC,GAAG,KAAK,eAAe,CACxC,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,AAAI,SAAK,QAAL,cAAY,SAAU,CAAC,KAAK,QAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,GAC3F,KAAK,QAAQ,KAAK,KAAK,MAAM,MAAM,EACrC,GAAM,GAAc,GAAI,wBAAqB,CAAS,EAEtD,SAAY,KAAK,KAAK,OAAO,EAEtB,CACL,QAAS,KACT,cACA,QAAS,KAAK,QACd,iBAAkB,CAAC,GAAG,KAAK,iBAAkB,GAAG,KAAK,mBAAmB,EACxE,QAAS,KAAO,IAAW,CA3iBjC,MA4iBQ,GAAM,CAAE,gBAAgB,GAAM,iBAAgB,gBAAiB,GAAU,CAAC,EAE1E,GADA,GAAc,CAAC,CAAW,CAAC,EACvB,QAAK,QAAL,QAAY,UAAW,CACzB,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAa,CAAE,eAAc,CAAC,EACjF,MAAI,IACF,KAAM,IAAmB,KAAK,WAAY,CAAI,EAGzC,CACL,OACA,SAAU,CACZ,CACF,CACA,GAAI,KAAK,oBAAqB,CAC5B,GAAM,GAAM,KAAM,MAAK,oBAA0C,CAAC,CAAW,CAAC,EAC9E,GAAI,KAAK,QAAQ,OACf,OAAW,KAAQ,GACjB,GAAI,CACF,EAAK,KAAK,KAAK,OAAO,CACxB,MAAE,CAEF,CAGJ,MAAO,CACL,KAAM,EAAe,GAAK,KAAM,MAAK,WAAW,gBAAgB,EAAI,GAAI,CAAE,eAAc,CAAC,EACzF,SAAU,EAAI,EAChB,CACF,CACA,KAAM,IAAI,OAAM,wEAAwE,CAC1F,EACA,QAAU,GAAW,CAAC,CACxB,CACF,MAEa,gBAAwC,EAQrB,CAvlBlC,MAwlBI,GAAM,CAAE,oBAAoB,CAAC,EAAG,cAAe,EACzC,CAAE,eAAgB,KAAM,MAAK,QAAQ,CAAU,EAE/C,EAAuB,EAAkB,OAAO,AAAC,GAAS,EAAK,QAAQ,aAAa,OAAS,CAAC,EAE9F,EAA0C,CAC9C,EACA,GAAG,EAAqB,IAAI,AAAC,GAAS,EAAK,WAAW,CACxD,EACM,EAAyB,CAAC,KAAK,QAAS,GAAG,EAAqB,IAAI,AAAC,GAAS,EAAK,OAAO,CAAC,EAC3F,EAAgC,CACpC,GAAG,KAAK,iBACR,GAAG,EAAqB,IAAI,AAAC,GAAS,EAAK,gBAAgB,EAAE,KAAK,CACpE,EAEA,MAAI,QAAK,QAAL,QAAY,QACd,EAAW,QAAQ,AAAC,GAAY,CAC9B,AAAK,EAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,GAAG,KAAK,QAAQ,KAAK,KAAK,MAAO,MAAO,CAC5G,CAAC,EAGH,EAAgB,QAAQ,MAAO,EAAI,IAAQ,CACzC,EAAG,KAAK,EAAW,EAAI,CACzB,CAAC,EAEM,CACL,QAAS,KACT,aAAc,EACd,QAAS,EACT,iBAAkB,EAClB,aACA,QAAS,KAAO,IAAwC,CAvnB9D,MAwnBQ,GAAM,CAAE,eAAc,aAAY,gBAAiB,EAAe,gBAAgB,IAAS,GAAiB,CAAC,EAG7G,GAFI,GAAe,EAAgB,QAAQ,AAAC,GAAQ,EAAG,QAAQ,gBAAkB,CAAc,EAC/F,GAAc,CAAe,EACzB,QAAK,QAAL,QAAY,UAAW,CACzB,GAAI,EAAc,CAChB,GAAM,GAAkB,CAAC,EACzB,OAAW,KAAM,GAAiB,CAChC,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAI,CAAE,eAAc,CAAC,EACxE,KAAM,IAAmB,KAAK,WAAY,CAAI,EAC9C,EAAM,KAAK,CAAI,CACjB,CAEA,MAAO,CAAE,QAAO,UAAW,CAAgB,CAC7C,CAEA,MAAO,CACL,MAAO,KAAM,SAAQ,IACnB,EAAgB,IAAI,KAAO,IAClB,KAAM,MAAK,WAAW,gBAAgB,EAAI,CAAE,eAAc,CAAC,CACnE,CACH,EACA,UAAW,CACb,CACF,CAEA,GAAI,KAAK,oBAAqB,CAC5B,GAAM,GAAY,KAAM,MAAK,oBAAoB,CAAe,EAEhE,GAAI,EAAc,CAChB,GAAI,GAAI,EACF,EAAiC,CAAC,EAClC,EAAc,SAA2B,CAC7C,GAAI,CAAC,EAAU,GAAI,OACnB,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAU,GAAI,CAAE,eAAc,CAAC,EAClF,EAAa,KAAK,CAAE,OAAM,OAAQ,OAAQ,SAAU,EAAU,EAAG,CAAC,EAClE,WAAa,CAAC,GAAG,CAAY,GAC7B,IAEA,GAAI,GAAY,GAEZ,EAAkC,KACpC,EAAgC,KAC5B,EAAM,AAAC,GAA2C,CACtD,IAAe,MAAQ,cAAc,CAAU,EAC/C,IAAmB,MAAQ,KAAK,WAAW,wBAAwB,CAAc,EACjF,GAAM,GAAc,EAAa,UAAU,AAAC,GAAO,EAAG,OAAS,CAAI,EACnE,GAAI,EAAc,GAAI,CACpB,GAAI,EAAa,GAAa,SAAW,SAAW,EAAa,GAAa,SAAW,UACvF,OACF,EAAa,GAAa,OAAS,EAAgB,IAAM,QAAU,SACrE,CACA,WAAa,CAAC,GAAG,CAAY,GACxB,EAAgB,KAAK,EAAY,CACxC,EAEA,AAAI,KAAK,mBACP,GAAa,YAAY,SAAY,CAhrBrD,MAirBkB,GAAI,EAAW,CACb,cAAc,CAAW,EACzB,MACF,CACA,GAAI,CACF,GAAM,GAAI,KAAM,MAAK,WAAW,eAAe,EAAM,CACnD,WAAY,YACZ,+BAAgC,CAClC,CAAC,EACD,AAAI,GACF,GAAY,GACZ,cAAc,CAAW,EACzB,EAAI,CAAE,IAAK,MAAE,OAAF,cAAQ,MAAO,IAAK,CAAC,EAChC,QAAQ,IAAI,iCAAkC,CAAI,EAEtD,OAAS,EAAP,CACA,EAAY,GACZ,cAAc,CAAW,EACzB,QAAQ,MAAM,0BAA2B,EAAG,CAAI,CAClD,CACF,EAAG,EAAa,GAElB,EAAiB,KAAK,WAAW,YAC/B,EACA,AAAC,GAAW,CACV,GAAI,EAAW,CACb,KAAK,WAAW,wBAAwB,CAAe,EACvD,MACF,CACA,EAAY,GACZ,EAAI,CAAM,CACZ,EACA,WACF,EACA,KAAK,WAAW,mBAAmB,CAAI,CACzC,EACA,SAAY,EACL,CACL,MAAO,CAAC,EACR,WACF,CACF,KAAO,CACL,GAAM,GAAkB,CAAC,EACzB,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,GAAK,EAAG,CAC5C,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAU,GAAI,CAAE,eAAc,CAAC,EAClF,EAAM,KAAK,CAAI,CACjB,CACA,MAAO,CAAE,QAAO,WAAU,CAC5B,CACF,CACA,KAAM,IAAI,OAAM,wEAAwE,CAC1F,EACA,QAAS,GAAc,CAAC,CAC1B,CACF,MAEa,gBACX,EAC2B,CA3uB/B,MA4uBI,GAA2D,MAAS,CAAC,EAA7D,YAAW,CAAC,EAAG,uBAAoC,EAAZ,KAAY,EAAZ,CAAvC,WAAe,wBACjB,EACJ,EACI,GAAiB,CAAmB,EACpC,CACE,aAAc,CAAC,EACf,iBAAkB,CAAC,CACrB,EAEA,EAAuC,KAAK,QAAQ,OACxD,CAAC,EAAK,IAAS,OAAK,GAAL,EAAW,EAAI,UAAU,SAAS,GAAI,CAAI,GACzD,CAAC,CACH,EAEM,EAAiC,CAAC,EAClC,EAAyB,CAAC,EAE5B,EAA6C,CAAC,EAC9C,EAAc,EA+ClB,GA9CA,KAAK,gBAAgB,QAAQ,AAAC,GAAS,CACrC,GAAM,GAAW,CAAC,GAAG,EAAkB,CAAI,EACrC,EAAsB,EAAsB,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAQ,EAAI,EAI/F,EAAU,CAAC,GAAG,AAHA,GAAI,KACtB,EAAS,IAAI,AAAC,GAAM,EAAE,KAAK,OAAO,AAAC,GAAO,EAAG,QAAQ,EAAE,IAAI,AAAC,GAAO,EAAG,OAAO,SAAS,CAAC,CAAC,EAAE,KAAK,CACjG,EACgC,OAAO,CAAC,EAAE,IAAI,AAAC,GAAM,GAAI,aAAU,CAAC,CAAC,EAErE,GACE,IAAS,EAAS,IAClB,EAAiB,OAAS,IACzB,IAAkB,CAAE,aAAc,EAAqB,MAAO,KAAK,SAAU,QAAS,CAAQ,CAAC,GAC9F,GAAkB,CAAE,aAAc,EAAU,MAAO,KAAK,SAAU,QAAS,CAAQ,CAAC,GAGtF,EAAiB,KAAK,CAAI,MACrB,CACL,GAAI,EAAiB,SAAW,EAAG,KAAM,OAAM,kBAAkB,EACjE,GAAe,IAAS,EAAS,GAAe,EAAI,EAEpD,AACE,GAAkB,CAChB,aAAc,EACV,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,EACvD,CAAC,GAAG,CAAgB,EACxB,MAAO,KAAK,SACZ,QAAS,CACX,CAAC,EAED,EAAgB,KAAK,GAAI,eAAY,EAAE,IAAI,GAAG,EAAkB,aAAc,GAAG,CAAgB,CAAC,EAElG,EAAgB,KAAK,GAAI,eAAY,EAAE,IAAI,GAAG,CAAgB,CAAC,EAEjE,EAAW,KACT,MAAM,KACJ,GAAI,KACF,EAAiB,IAAI,AAAC,GAAM,EAAE,KAAK,OAAO,AAAC,GAAO,EAAG,QAAQ,EAAE,IAAI,AAAC,GAAO,EAAG,OAAO,SAAS,CAAC,CAAC,EAAE,KAAK,CACzG,CACF,EACG,IAAI,AAAC,GAAM,EAAU,EAAE,EACvB,OAAO,AAAC,GAAM,IAAM,MAAS,CAClC,EACA,EAAmB,CAAC,CAAI,CAC1B,CACF,CAAC,EAEG,EAAiB,OAAS,EAAG,CAI/B,GAAM,GAAW,CAAC,GAAG,AAHD,GAAI,KACtB,EAAiB,IAAI,AAAC,GAAM,EAAE,KAAK,OAAO,AAAC,GAAO,EAAG,QAAQ,EAAE,IAAI,AAAC,GAAO,EAAG,OAAO,SAAS,CAAC,CAAC,EAAE,KAAK,CACzG,EACiC,OAAO,CAAC,EAAE,IAAI,AAAC,GAAM,EAAU,EAAE,EAAE,OAAO,AAAC,GAAM,IAAM,MAAS,EAEjG,AACE,GAAkB,CAChB,aAAc,EACV,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,EACvD,CAAC,GAAG,CAAgB,EACxB,MAAO,KAAK,SACZ,QAAS,EAAS,IAAI,AAAC,GAAM,EAAE,SAAS,CAC1C,CAAC,EAED,EAAgB,KAAK,GAAI,eAAY,EAAE,IAAI,GAAG,EAAkB,aAAc,GAAG,CAAgB,CAAC,EAElG,EAAgB,KAAK,GAAI,eAAY,EAAE,IAAI,GAAG,CAAgB,CAAC,EAEjE,EAAW,KAAK,CAAQ,CAC1B,CACA,SAAgB,QAAQ,AAAC,GAAQ,EAAG,SAAW,KAAK,QAAS,EAEzD,QAAK,QAAL,QAAY,QACd,EAAW,QAAQ,AAAC,GAAY,CAC9B,AAAK,EAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,GAAG,EAAQ,KAAK,KAAK,MAAO,MAAO,CACvG,CAAC,EAGI,CACL,QAAS,KACT,aAAc,EACd,QAAS,EACT,iBAAkB,KAAK,iBACvB,QAAS,KAAO,IAAwC,CA/0B9D,MAg1BQ,GAAM,CACJ,eACA,aACA,cAAc,EACd,gBAAiB,EACjB,gBAAgB,IACd,GAAiB,CAAC,EAChB,EAAkB,UAAkB,KAAM,IAAmB,KAAK,WAAY,KAAK,mBAAmB,EAM5G,GALA,EAAgB,QAAQ,MAAO,EAAI,IAAQ,CACzC,EAAG,gBAAkB,EACjB,EAAW,GAAK,QAAQ,EAAG,KAAK,GAAG,EAAW,EAAI,CACxD,CAAC,EACD,GAAc,CAAe,EACzB,QAAK,QAAL,QAAY,UAAW,CACzB,GAAI,EAAc,CAChB,GAAI,GAAI,EACF,EAAkB,CAAC,EACzB,OAAW,KAAM,GAAiB,CAEhC,GADA,EAAE,EACE,GAAK,EAAa,CACpB,EAAM,KAAK,YAAY,EACvB,QACF,CACA,GAAM,GAAO,KAAM,gCACjB,KAAK,WACL,EACA,KAAK,QAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,EAC9D,KAAK,QACL,CAAC,GAAG,KAAK,QAAS,KAAK,MAAM,MAAO,EACxC,CAAE,eAAc,CAClB,EACA,EAAM,KAAK,CAAI,CACjB,CAEA,MAAO,CACL,QACA,UAAW,CACb,CACF,CACA,MAAO,CACL,MAAO,KAAM,SAAQ,IACnB,EAAgB,IAAI,KAAO,IAClB,KAAM,MAAK,WAAW,mBAAmB,EAAG,UAAU,EAAG,CAAE,eAAc,CAAC,CAClF,CACH,EACA,UAAW,CACb,CACF,CACA,GAAI,KAAK,oBAAqB,CAC5B,GAAM,GAAe,KAAM,MAAK,oBAC9B,EAAgB,MAAM,EAAa,EAAgB,MAAM,CAC3D,EACM,EAAY,CAAC,GAAG,EAAgB,MAAM,EAAG,CAAW,EAAG,GAAG,CAAY,EAC5E,GAAI,EAAc,CAChB,GAAI,GAAI,EACF,EAAiC,CAAC,EAClC,EAAc,SAA2B,CAC7C,GAAI,CAAC,EAAU,GAAI,OACnB,AAAI,EAAI,GAEN,GAAa,KAAK,CAAE,KAAM,GAAI,OAAQ,UAAW,SAAU,EAAU,EAAG,CAAC,EACzE,WAAa,CAAC,GAAG,CAAY,GAC7B,IACA,EAAY,GAEd,GAAM,GAAO,KAAM,MAAK,WAAW,mBAAmB,EAAU,GAAG,UAAU,EAAG,CAAE,eAAc,CAAC,EACjG,EAAa,KAAK,CAAE,OAAM,OAAQ,OAAQ,SAAU,EAAU,EAAG,CAAC,EAClE,WAAa,CAAC,GAAG,CAAY,GAC7B,IAEA,GAAI,GAAY,GAEZ,EAAkC,KACpC,EAAgC,KAC5B,EAAM,AAAC,GAA2C,CACtD,IAAe,MAAQ,cAAc,CAAU,EAC/C,IAAmB,MAAQ,KAAK,WAAW,wBAAwB,CAAc,EACjF,GAAM,GAAc,EAAa,UAAU,AAAC,GAAO,EAAG,OAAS,CAAI,EACnE,GAAI,EAAc,GAAI,CACpB,GAAI,EAAa,GAAa,SAAW,SAAW,EAAa,GAAa,SAAW,UACvF,OACF,EAAa,GAAa,OAAS,EAAgB,IAAM,QAAU,SACrE,CACA,WAAa,CAAC,GAAG,CAAY,GACxB,EAAgB,KAAK,EAAY,CACxC,EAEA,AAAI,KAAK,mBACP,GAAa,YAAY,SAAY,CAx6BrD,MAy6BkB,GAAI,EAAW,CACb,cAAc,CAAW,EACzB,MACF,CACA,GAAI,CACF,GAAM,GAAI,KAAM,MAAK,WAAW,eAAe,EAAM,CACnD,WAAY,YACZ,+BAAgC,CAClC,CAAC,EACD,AAAI,GACF,GAAY,GACZ,cAAc,CAAW,EACzB,EAAI,CAAE,IAAK,MAAE,OAAF,cAAQ,MAAO,IAAK,CAAC,EAChC,QAAQ,IAAI,iCAAkC,CAAI,EAEtD,OAAS,EAAP,CACA,EAAY,GACZ,cAAc,CAAW,EACzB,QAAQ,MAAM,0BAA2B,EAAG,CAAI,CAClD,CACF,EAAG,EAAa,GAElB,EAAiB,KAAK,WAAW,YAC/B,EACA,AAAC,GAAW,CACV,GAAI,EAAW,CACb,KAAK,WAAW,wBAAwB,CAAe,EACvD,MACF,CACA,EAAY,GACZ,EAAI,CAAM,CACZ,EACA,WACF,EACA,KAAK,WAAW,mBAAmB,CAAI,CACzC,EACA,YAAM,GAAY,EACX,CACL,MAAO,EAAa,IAAI,AAAC,GAAM,EAAE,IAAI,EACrC,WACF,CACF,KAAO,CACL,GAAM,GAAkB,CAAC,EACzB,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,GAAK,EAAG,CAC5C,GAAM,GAAO,KAAM,MAAK,WAAW,mBAAmB,EAAU,GAAG,UAAU,EAAG,CAAE,eAAc,CAAC,EACjG,EAAM,KAAK,CAAI,CACjB,CACA,MAAO,CAAE,QAAO,WAAU,CAC5B,CACF,CACA,KAAM,IAAI,OAAM,wEAAwE,CAC1F,EACA,QAAS,GAAW,CAAC,CACvB,CACF,MAEa,kBACX,EAO6B,CAz+BjC,MA0+BI,GAMI,MAAS,CAAC,EALZ,uBACA,WAAW,CAAC,EACZ,mBAAmB,CAAC,EACpB,qBAAqB,CAAC,GAEpB,EADC,KACD,EADC,CAJH,sBACA,WACA,mBACA,uBAGI,EAA4B,OAC5B,KAAK,UAAY,SAAW,KAAM,IAAuB,KAAK,UAAU,EAAI,IAC7E,GAEC,EAAS,MAAM,KAAK,GAAI,KAAY,CAAC,GAAG,KAAK,mBAAoB,GAAG,CAAkB,CAAC,CAAC,EACxF,EAA4B,CAAC,EACnC,OAAW,KAAQ,GACjB,AAAI,EAA0B,KAAU,QAAW,EAAa,KAAK,GAAI,aAAU,CAAI,CAAC,EAE1F,GAAM,GAAc,KAAM,IAA2B,CAAE,WAAY,KAAK,WAAY,QAAS,CAAa,CAAC,EAC3G,OAAW,CAAC,EAAK,IAAU,QAAO,QAAQ,CAAW,EAAG,EAA0B,GAAO,EAEzF,GAAM,GACJ,EACI,GAAiB,CAAmB,EACpC,CACE,aAAc,CAAC,EACf,iBAAkB,CAAC,CACrB,EAEA,EAAY,KAAM,IAAmB,KAAK,WAAY,KAAK,mBAAmB,EAE9E,EAAuC,KAAK,QAAQ,OACxD,CAAC,EAAK,IAAS,OAAK,GAAL,EAAW,EAAI,UAAU,SAAS,GAAI,CAAI,GACzD,CAAC,CACH,EACM,EAA0C,CAAC,EAC3C,EAAyB,CAAC,EAE5B,EAA6C,CAAC,EAC9C,EAAc,EAyDlB,GAxDA,KAAK,gBAAgB,QAAQ,AAAC,GAAS,CACrC,GAAM,GAAW,CAAC,GAAG,EAAkB,CAAI,EACrC,EAAsB,EAAsB,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAQ,EAAI,EACrG,GACE,IAAS,EAAS,IAClB,EAAiB,OAAS,IACzB,IAAc,CAAE,aAAc,EAAqB,MAAO,KAAK,SAAU,2BAA0B,CAAC,GACnG,GAAc,CAAE,aAAc,EAAU,MAAO,KAAK,SAAU,2BAA0B,CAAC,GAG3F,EAAiB,KAAK,CAAI,MACrB,CACL,GAAI,EAAiB,SAAW,EAAG,KAAM,OAAM,kBAAkB,EACjE,GAAe,IAAS,EAAS,GAAe,EAAI,EACpD,GAAM,GAA2C,CAAC,EAClD,OAAW,KAAQ,CAAC,GAAG,GAAI,KAAY,CAAM,CAAC,EAC5C,AAAI,EAA0B,KAAU,QAAW,GAAmB,GAAQ,EAA0B,IAG1G,GACE,GACA,GAAc,CACZ,aAAc,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,EACrE,MAAO,KAAK,SACZ,4BACA,gBAAiB,CACnB,CAAC,EACD,CACA,GAAM,GAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,gBAAiB,EAEjB,aAAc,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,CACvE,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,EAAgB,KAAK,GAAI,wBAAqB,CAAS,CAAC,CAC1D,KAAO,CACL,GAAM,GAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,gBAAiB,EACjB,aAAc,CAAC,GAAG,CAAgB,CACpC,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,EAAgB,KAAK,GAAI,wBAAqB,CAAS,CAAC,CAC1D,CACA,EAAW,KACT,MAAM,KACJ,GAAI,KACF,EAAiB,IAAI,AAAC,GAAM,EAAE,KAAK,OAAO,AAAC,GAAO,EAAG,QAAQ,EAAE,IAAI,AAAC,GAAO,EAAG,OAAO,SAAS,CAAC,CAAC,EAAE,KAAK,CACzG,CACF,EACG,IAAI,AAAC,GAAM,EAAU,EAAE,EACvB,OAAO,AAAC,GAAM,IAAM,MAAS,CAClC,EACA,EAAmB,CAAC,CAAI,CAC1B,CACF,CAAC,EAEG,EAAiB,OAAS,EAAG,CAI/B,GAAM,GAAW,CAAC,GAAG,AAHD,GAAI,KACtB,EAAiB,IAAI,AAAC,GAAM,EAAE,KAAK,OAAO,AAAC,GAAO,EAAG,QAAQ,EAAE,IAAI,AAAC,GAAO,EAAG,OAAO,SAAS,CAAC,CAAC,EAAE,KAAK,CACzG,EACiC,OAAO,CAAC,EAAE,IAAI,AAAC,GAAM,EAAU,EAAE,EAAE,OAAO,AAAC,GAAM,IAAM,MAAS,EAEjG,GACE,GACA,GAAc,CACZ,aAAc,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,EACrE,MAAO,KAAK,SACZ,4BACA,gBAAiB,CACnB,CAAC,EACD,CACA,GAAM,GAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,gBAAiB,EACjB,aAAc,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,CACvE,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,EAAgB,KAAK,GAAI,wBAAqB,CAAS,CAAC,CAC1D,KAAO,CACL,GAAM,GAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,gBAAiB,EACjB,aAAc,CAAC,GAAG,CAAgB,CACpC,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,EAAgB,KAAK,GAAI,wBAAqB,CAAS,CAAC,CAC1D,CAEA,EAAW,KAAK,CAAQ,CAC1B,CAEA,MAAI,QAAK,QAAL,QAAY,QACd,EAAW,QAAQ,AAAC,GAAY,CAC9B,AAAK,EAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,GAAG,EAAQ,KAAK,KAAK,MAAO,MAAO,CACvG,CAAC,EAGH,EAAgB,QAAQ,CAAC,EAAI,IAAQ,CACnC,EAAG,KAAK,EAAW,EAAI,CACzB,CAAC,EAEM,CACL,QAAS,KACT,aAAc,EACd,WAAY,EACZ,QAAS,EACT,UAAW,EACX,iBAAkB,KAAK,iBACvB,QAAS,KAAO,IAAwC,CA1nC9D,MA2nCQ,GAAM,CACJ,eACA,aACA,cAAc,EACd,gBAAiB,EACjB,gBAAgB,IACd,GAAiB,CAAC,EAMtB,GALA,EAAgB,IAAI,MAAO,EAAI,IAAQ,CACrC,AAAI,EAAW,GAAK,QAAQ,EAAG,KAAK,EAAW,EAAI,EAC/C,GAAe,GAAG,QAAQ,gBAAkB,EAClD,CAAC,EACD,GAAc,CAAe,EACzB,QAAK,QAAL,QAAY,UAAW,CACzB,GAAI,EAAc,CAChB,GAAI,GAAI,EACF,EAAkB,CAAC,EACzB,OAAW,KAAM,GAAiB,CAEhC,GADA,EAAE,EACE,GAAK,EAAa,CACpB,QAAQ,IAAI,YAAa,CAAC,EAC1B,EAAM,KAAK,YAAY,EACvB,QACF,CACA,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAI,CAAE,eAAc,CAAC,EACxE,KAAM,IAAmB,KAAK,WAAY,CAAI,EAE9C,EAAM,KAAK,CAAI,CACjB,CAEA,MAAO,CAAE,QAAO,UAAW,CAAgB,CAC7C,CAEA,MAAO,CACL,MAAO,KAAM,SAAQ,IACnB,EAAgB,IAAI,KAAO,IAClB,KAAM,MAAK,WAAW,gBAAgB,EAAI,CAAE,eAAc,CAAC,CACnE,CACH,EACA,UAAW,CACb,CACF,CACA,GAAI,KAAK,oBAAqB,CAC5B,GAAM,GAAe,KAAM,MAAK,oBAC9B,EAAgB,MAAM,EAAa,EAAgB,MAAM,CAC3D,EACM,EAAY,CAAC,GAAG,EAAgB,MAAM,EAAG,CAAW,EAAG,GAAG,CAAY,EAC5E,GAAI,EAAc,CAChB,GAAI,GAAI,EACF,EAAiC,CAAC,EAClC,EAAc,SAA2B,CAC7C,GAAI,CAAC,EAAU,GAAI,OACnB,GAAI,EAAI,EAAa,CAEnB,EAAa,KAAK,CAAE,KAAM,GAAI,OAAQ,UAAW,SAAU,EAAU,EAAG,CAAC,EACzE,WAAa,CAAC,GAAG,CAAY,GAC7B,IACA,EAAY,EACZ,MACF,CACA,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAU,GAAI,CAAE,eAAc,CAAC,EAClF,EAAa,KAAK,CAAE,OAAM,OAAQ,OAAQ,SAAU,EAAU,EAAG,CAAC,EAClE,WAAa,CAAC,GAAG,CAAY,GAC7B,IAEA,GAAI,GAAY,GAEZ,EAAkC,KACpC,EAAgC,KAC5B,EAAM,AAAC,IAA2C,CACtD,IAAe,MAAQ,cAAc,CAAU,EAC/C,IAAmB,MAAQ,KAAK,WAAW,wBAAwB,CAAc,EACjF,GAAM,GAAc,EAAa,UAAU,AAAC,IAAO,GAAG,OAAS,CAAI,EACnE,GAAI,EAAc,GAAI,CACpB,GAAI,EAAa,GAAa,SAAW,SAAW,EAAa,GAAa,SAAW,UACvF,OACF,EAAa,GAAa,OAAS,GAAgB,IAAM,QAAU,SACrE,CACA,WAAa,CAAC,GAAG,CAAY,GACxB,GAAgB,KAAK,EAAY,CACxC,EAEA,AAAI,KAAK,mBACP,GAAa,YAAY,SAAY,CA7sCrD,OA8sCkB,GAAI,EAAW,CACb,cAAc,CAAW,EACzB,MACF,CACA,GAAI,CACF,GAAM,GAAI,KAAM,MAAK,WAAW,eAAe,EAAM,CACnD,WAAY,YACZ,+BAAgC,CAClC,CAAC,EACD,AAAI,GACF,GAAY,GACZ,cAAc,CAAW,EACzB,EAAI,CAAE,IAAK,OAAE,OAAF,eAAQ,MAAO,IAAK,CAAC,EAChC,QAAQ,IAAI,iCAAkC,CAAI,EAEtD,OAAS,EAAP,CACA,EAAY,GACZ,cAAc,CAAW,EACzB,QAAQ,MAAM,0BAA2B,EAAG,CAAI,CAClD,CACF,EAAG,EAAa,GAElB,EAAiB,KAAK,WAAW,YAC/B,EACA,AAAC,IAAW,CACV,GAAI,EAAW,CACb,KAAK,WAAW,wBAAwB,CAAe,EACvD,MACF,CACA,EAAY,GACZ,EAAI,EAAM,CACZ,EACA,WACF,EACA,KAAK,WAAW,mBAAmB,CAAI,CACzC,EACA,SAAY,EACL,CACL,MAAO,CAAC,EACR,WACF,CACF,KAAO,CACL,GAAM,GAAkB,CAAC,EACzB,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,GAAK,EAAG,CAC5C,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAU,GAAI,CAAE,eAAc,CAAC,EAClF,EAAM,KAAK,CAAI,CACjB,CACA,MAAO,CAAE,QAAO,WAAU,CAC5B,CACF,CACA,KAAM,IAAI,OAAM,wEAAwE,CAC1F,EACA,QAAS,GAAW,CAAC,CACvB,CACF,MAEa,wBACX,EAM6B,CA7wCjC,MA8wCI,GAMI,MAAS,CAAC,EALZ,uBACA,WAAW,CAAC,EACZ,mBAAmB,CAAC,EACpB,qBAAqB,CAAC,GAEpB,EADC,KACD,EADC,CAJH,sBACA,WACA,mBACA,uBAGI,EAA4B,OAC5B,KAAK,UAAY,SACjB,KAAM,IAAuB,KAAK,UAAU,EAC5C,KAAM,IAAwB,KAAK,UAAU,GAC9C,GAEC,EAAS,MAAM,KAAK,GAAI,KAAY,CAAC,GAAG,KAAK,mBAAoB,GAAG,CAAkB,CAAC,CAAC,EACxF,EAA4B,CAAC,EACnC,OAAW,KAAQ,GACjB,AAAI,EAA0B,KAAU,QAAW,EAAa,KAAK,GAAI,aAAU,CAAI,CAAC,EAE1F,GAAM,GAAc,KAAM,IAA2B,CAAE,WAAY,KAAK,WAAY,QAAS,CAAa,CAAC,EAC3G,OAAW,CAAC,EAAK,IAAU,QAAO,QAAQ,CAAW,EAAG,EAA0B,GAAO,EAEzF,GAAM,GACJ,EACI,GAAiB,CAAmB,EACpC,CACE,aAAc,CAAC,EACf,iBAAkB,CAAC,CACrB,EAEA,EAAY,KAAM,IAAmB,KAAK,WAAY,KAAK,mBAAmB,EAE9E,EAAuC,KAAK,QAAQ,OACxD,CAAC,EAAK,IAAS,OAAK,GAAL,EAAW,EAAI,UAAU,SAAS,GAAI,CAAI,GACzD,CAAC,CACH,EACM,EAA0C,CAAC,EAC3C,EAAyB,CAAC,EAE5B,EAA6C,CAAC,EAC9C,EAAc,EAyDlB,GAxDA,KAAK,gBAAgB,QAAQ,AAAC,GAAS,CACrC,GAAM,GAAW,CAAC,GAAG,EAAkB,CAAI,EACrC,EAAsB,EAAsB,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAQ,EAAI,EACrG,GACE,IAAS,EAAS,IAClB,EAAiB,OAAS,IACzB,IAAc,CAAE,aAAc,EAAqB,MAAO,KAAK,SAAU,2BAA0B,CAAC,GACnG,GAAc,CAAE,aAAc,EAAU,MAAO,KAAK,SAAU,2BAA0B,CAAC,GAG3F,EAAiB,KAAK,CAAI,MACrB,CACL,GAAI,EAAiB,SAAW,EAAG,KAAM,OAAM,kBAAkB,EACjE,GAAe,IAAS,EAAS,GAAe,EAAI,EACpD,GAAM,GAA2C,CAAC,EAClD,OAAW,KAAQ,CAAC,GAAG,GAAI,KAAY,CAAM,CAAC,EAC5C,AAAI,EAA0B,KAAU,QAAW,GAAmB,GAAQ,EAA0B,IAG1G,GACE,GACA,GAAc,CACZ,aAAc,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,EACrE,MAAO,KAAK,SACZ,4BACA,gBAAiB,CACnB,CAAC,EACD,CACA,GAAM,GAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,gBAAiB,EAEjB,aAAc,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,CACvE,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,EAAgB,KAAK,GAAI,wBAAqB,CAAS,CAAC,CAC1D,KAAO,CACL,GAAM,GAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,gBAAiB,EACjB,aAAc,CAAC,GAAG,CAAgB,CACpC,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,EAAgB,KAAK,GAAI,wBAAqB,CAAS,CAAC,CAC1D,CACA,EAAW,KACT,MAAM,KACJ,GAAI,KACF,EAAiB,IAAI,AAAC,GAAM,EAAE,KAAK,OAAO,AAAC,GAAO,EAAG,QAAQ,EAAE,IAAI,AAAC,GAAO,EAAG,OAAO,SAAS,CAAC,CAAC,EAAE,KAAK,CACzG,CACF,EACG,IAAI,AAAC,GAAM,EAAU,EAAE,EACvB,OAAO,AAAC,GAAM,IAAM,MAAS,CAClC,EACA,EAAmB,CAAC,CAAI,CAC1B,CACF,CAAC,EAEG,EAAiB,OAAS,EAAG,CAI/B,GAAM,GAAW,CAAC,GAAG,AAHD,GAAI,KACtB,EAAiB,IAAI,AAAC,GAAM,EAAE,KAAK,OAAO,AAAC,GAAO,EAAG,QAAQ,EAAE,IAAI,AAAC,GAAO,EAAG,OAAO,SAAS,CAAC,CAAC,EAAE,KAAK,CACzG,EACiC,OAAO,CAAC,EAAE,IAAI,AAAC,GAAM,EAAU,EAAE,EAAE,OAAO,AAAC,GAAM,IAAM,MAAS,EAEjG,GACE,GACA,GAAc,CACZ,aAAc,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,EACrE,MAAO,KAAK,SACZ,4BACA,gBAAiB,CACnB,CAAC,EACD,CACA,GAAM,GAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,gBAAiB,EACjB,aAAc,CAAC,GAAG,EAAkB,aAAc,GAAG,CAAgB,CACvE,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,EAAgB,KAAK,GAAI,wBAAqB,CAAS,CAAC,CAC1D,KAAO,CACL,GAAM,GAAY,GAAI,sBAAmB,CACvC,SAAU,KAAK,SACf,gBAAiB,EACjB,aAAc,CAAC,GAAG,CAAgB,CACpC,CAAC,EAAE,mBAAmB,OAAO,OAAO,CAAyB,CAAC,EAC9D,EAAgB,KAAK,GAAI,wBAAqB,CAAS,CAAC,CAC1D,CAEA,EAAW,KAAK,CAAQ,CAC1B,CAEA,MAAI,QAAK,QAAL,QAAY,QACd,EAAW,QAAQ,AAAC,GAAY,CAC9B,AAAK,EAAQ,KAAK,AAAC,GAAM,EAAE,UAAU,OAAO,KAAK,MAAO,SAAS,CAAC,GAAG,EAAQ,KAAK,KAAK,MAAO,MAAO,CACvG,CAAC,EAGH,EAAgB,QAAQ,CAAC,EAAI,IAAQ,CACnC,EAAG,KAAK,EAAW,EAAI,CACzB,CAAC,EAEM,CACL,QAAS,KACT,aAAc,EACd,WAAY,EACZ,QAAS,EACT,iBAAkB,KAAK,iBACvB,QAAS,KAAO,IAAwC,CA/5C9D,MAg6CQ,GAAM,CACJ,eACA,aACA,cAAc,EACd,gBAAiB,EACjB,gBAAgB,IACd,GAAiB,CAAC,EAMtB,GALA,EAAgB,IAAI,MAAO,EAAI,IAAQ,CACrC,AAAI,EAAW,GAAK,QAAQ,EAAG,KAAK,EAAW,EAAI,EAC/C,GAAe,GAAG,QAAQ,gBAAkB,EAClD,CAAC,EACD,GAAc,CAAe,EACzB,QAAK,QAAL,QAAY,UAAW,CACzB,GAAI,EAAc,CAChB,GAAI,GAAI,EACF,EAAkB,CAAC,EACzB,OAAW,KAAM,GAAiB,CAEhC,GADA,EAAE,EACE,GAAK,EAAa,CACpB,QAAQ,IAAI,YAAa,CAAC,EAC1B,EAAM,KAAK,YAAY,EACvB,QACF,CACA,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAI,CAAE,eAAc,CAAC,EACxE,KAAM,IAAmB,KAAK,WAAY,CAAI,EAE9C,EAAM,KAAK,CAAI,CACjB,CAEA,MAAO,CAAE,QAAO,UAAW,CAAgB,CAC7C,CAEA,MAAO,CACL,MAAO,KAAM,SAAQ,IACnB,EAAgB,IAAI,KAAO,IAClB,KAAM,MAAK,WAAW,gBAAgB,EAAI,CAAE,eAAc,CAAC,CACnE,CACH,EACA,UAAW,CACb,CACF,CACA,GAAI,KAAK,oBAAqB,CAC5B,GAAM,GAAe,KAAM,MAAK,oBAC9B,EAAgB,MAAM,EAAa,EAAgB,MAAM,CAC3D,EACM,EAAY,CAAC,GAAG,EAAgB,MAAM,EAAG,CAAW,EAAG,GAAG,CAAY,EAC5E,GAAI,EAAc,CAChB,GAAI,GAAI,EACF,EAAiC,CAAC,EAClC,EAAc,SAA2B,CAC7C,GAAI,CAAC,EAAU,GAAI,OACnB,GAAI,EAAI,EAAa,CAEnB,EAAa,KAAK,CAAE,KAAM,GAAI,OAAQ,UAAW,SAAU,EAAU,EAAG,CAAC,EACzE,WAAa,CAAC,GAAG,CAAY,GAC7B,IACA,EAAY,EACZ,MACF,CACA,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAU,GAAI,CAAE,eAAc,CAAC,EAClF,EAAa,KAAK,CAAE,OAAM,OAAQ,OAAQ,SAAU,EAAU,EAAG,CAAC,EAClE,WAAa,CAAC,GAAG,CAAY,GAC7B,IAEA,GAAI,GAAY,GAEZ,EAAkC,KACpC,EAAgC,KAC5B,EAAM,AAAC,IAA2C,CACtD,IAAe,MAAQ,cAAc,CAAU,EAC/C,IAAmB,MAAQ,KAAK,WAAW,wBAAwB,CAAc,EACjF,GAAM,GAAc,EAAa,UAAU,AAAC,IAAO,GAAG,OAAS,CAAI,EACnE,GAAI,EAAc,GAAI,CACpB,GAAI,EAAa,GAAa,SAAW,SAAW,EAAa,GAAa,SAAW,UACvF,OACF,EAAa,GAAa,OAAS,GAAgB,IAAM,QAAU,SACrE,CACA,WAAa,CAAC,GAAG,CAAY,GACxB,GAAgB,KAAK,EAAY,CACxC,EAEA,AAAI,KAAK,mBACP,GAAa,YAAY,SAAY,CAl/CrD,OAm/CkB,GAAI,EAAW,CACb,cAAc,CAAW,EACzB,MACF,CACA,GAAI,CACF,GAAM,GAAI,KAAM,MAAK,WAAW,eAAe,EAAM,CACnD,WAAY,YACZ,+BAAgC,CAClC,CAAC,EACD,AAAI,GACF,GAAY,GACZ,cAAc,CAAW,EACzB,EAAI,CAAE,IAAK,OAAE,OAAF,eAAQ,MAAO,IAAK,CAAC,EAChC,QAAQ,IAAI,iCAAkC,CAAI,EAEtD,OAAS,EAAP,CACA,EAAY,GACZ,cAAc,CAAW,EACzB,QAAQ,MAAM,0BAA2B,EAAG,CAAI,CAClD,CACF,EAAG,EAAa,GAElB,EAAiB,KAAK,WAAW,YAC/B,EACA,AAAC,IAAW,CACV,GAAI,EAAW,CACb,KAAK,WAAW,wBAAwB,CAAe,EACvD,MACF,CACA,EAAY,GACZ,EAAI,EAAM,CACZ,EACA,WACF,EACA,KAAK,WAAW,mBAAmB,CAAI,CACzC,EACA,SAAY,EACL,CACL,MAAO,CAAC,EACR,WACF,CACF,KAAO,CACL,GAAM,GAAkB,CAAC,EACzB,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,GAAK,EAAG,CAC5C,GAAM,GAAO,KAAM,MAAK,WAAW,gBAAgB,EAAU,GAAI,CAAE,eAAc,CAAC,EAClF,EAAM,KAAK,CAAI,CACjB,CACA,MAAO,CAAE,QAAO,WAAU,CAC5B,CACF,CACA,KAAM,IAAI,OAAM,wEAAwE,CAC1F,EACA,QAAS,GAAW,CAAC,CACvB,CACF,CAGF,EuB/hDA,GAAM,IAAU,IAAI,IAClB,EACG,IAAI,AAAC,GAAQ,CACZ,GAAI,CACF,MAAO,OAAO,IAAQ,SAAW,KAAK,UAAU,CAAG,EAAI,CACzD,MAAE,CACA,MAAO,EACT,CACF,CAAC,EACA,KAAK,IAAI,EACd,QAAgC,CAK9B,YAAY,CAAE,QAAO,cAA+B,CAH5C,cAAW,GAIjB,KAAK,MAAQ,EACb,KAAK,OAAS,GAAa,CAAU,CACvC,CAEU,gBAAgB,EAAiC,CACzD,YAAK,MAAM,WAAW,EACf,GAAI,IAAU,CACnB,WAAY,KAAK,MAAM,WACvB,SAAU,GAAY,KAAK,MAAM,YACjC,QAAS,KAAK,MAAM,QACpB,MAAO,KAAK,MAAM,MAClB,oBAAqB,KAAK,MAAM,oBAChC,kBAAmB,KAAK,MAAM,kBAC9B,IAAK,KAAK,MAAM,IAChB,oBAAqB,KAAK,MAAM,mBAClC,CAAC,CACH,CAEU,sBAAsB,EAAgB,EAAgC,CAC9E,GAAM,GAAc,GAAI,IAAM,CAAK,EACnC,MAAO,IAAI,IAAU,CACnB,WAAY,KAAK,MAAM,WACvB,SAAU,EACV,QAAS,KAAK,MAAM,QACpB,MAAO,EACP,oBAAqB,KAAK,MAAM,oBAChC,kBAAmB,KAAK,MAAM,kBAC9B,IAAK,KAAK,MAAM,IAChB,oBAAqB,KAAK,MAAM,mBAClC,CAAC,CACH,CAEO,YAAY,EAAuD,CACxE,KAAK,OAAO,MAAM,GAAQ,CAAI,CAAC,CACjC,CAEO,WAAW,EAAuD,CACvE,KAAK,OAAO,KAAK,GAAQ,CAAI,CAAC,CAChC,CAEO,qBAAqB,EAAuD,CACjF,GAAM,GAAU,GAAQ,CAAI,EAC5B,KAAM,IAAI,OAAM,CAAO,CACzB,CAEO,eAAsB,CAC3B,AAAI,MAAK,UAAY,CAAC,KAAK,QAAO,KAAK,kBAAkB,oBAAoB,CAC/E,CACF,EC7EA,OAA0B,2BAC1B,GAAe,oBACf,GAAoB,yBAYpB,OAKO,6BCnBP,OAAsC,2BACtC,GAA+E,6BCD/E,OAA8F,2BAC9F,GAAe,oBAaf,OAAqF,6BCdrF,OAA0B,2BAC1B,GAAyB,oBCDzB,MA+CO,iCAgBM,GAAS,SAoBT,GAAY,YAqClB,GAAM,IAAO,OAYb,GAAM,IAAK,KACL,GAAM,MAEZ,GAAM,IAAM,MAaZ,GAAM,IAAM,MA+BZ,GAAM,IAAM,MAcZ,GAAM,IAAO,OAWb,GAAM,IAAS,SDvLf,oBAA8C,GAAc,CAIjE,YAAY,EAAc,EAAiB,EAAc,CAEvD,MAAM,EAAM,CAAQ,EACpB,KAAK,KAAO,GAAK,CAAI,EACrB,KAAK,OAAS,CAChB,CAGA,OAAO,EAAW,EAAS,EAAO,CAChC,GAAM,GAAM,GAAI,YAAG,KAAK,KAAK,OAAO,EAAG,CAAM,EAAG,GAAI,IAAI,EACxD,MAAI,MAAK,OACA,EAAI,SAAS,KAAK,KAAO,CAAC,EAAE,MAAM,EAEpC,CACT,CAGA,OAAO,EAAS,EAAW,EAAS,EAAW,CAC7C,MAAI,OAAO,IAAQ,UAAU,GAAM,GAAI,YAAG,CAAG,GACzC,KAAK,QACP,GAAM,EAAI,OAAO,KAAK,KAAO,CAAC,GAEzB,KAAK,KAAK,OAAO,EAAI,YAAY,OAAQ,KAAM,KAAK,IAAI,EAAG,EAAG,CAAM,CAC7E,CACF,EAgCO,WAAmC,EAA+B,CACvE,MAAO,IAAI,IAAK,EAAG,CAAQ,CAC7B,CAEO,YAAoC,EAA+B,CACxE,MAAO,IAAI,IAAK,EAAG,CAAQ,CAC7B,CAEO,WAAoC,EAA2B,CACpE,MAAO,IAAI,IAAS,EAAG,GAAO,CAAQ,CACxC,CAEO,YAAqC,EAA2B,CACrE,MAAO,IAAI,IAAS,GAAI,GAAO,CAAQ,CACzC,CAMO,YAAoC,EAA2B,CACpE,MAAO,IAAI,IAAS,EAAG,GAAM,CAAQ,CACvC,CAEO,YAAqC,EAA2B,CACrE,MAAO,IAAI,IAAS,GAAI,GAAM,CAAQ,CACxC,CAEO,oBAAyD,GAAa,CAK3E,YAAY,EAAmB,EAAyB,EAAwB,EAAc,CAE5F,MAAM,EAAO,KAAM,CAAQ,EAC3B,KAAK,OAAS,EACd,KAAK,QAAU,EACf,KAAK,QAAU,CACjB,CAEA,OAAO,EAAW,EAAoB,CACpC,MAAO,MAAK,QAAQ,KAAK,OAAO,OAAO,EAAG,CAAM,CAAC,CACnD,CAEA,OAAO,EAAQ,EAAW,EAAyB,CACjD,MAAO,MAAK,OAAO,OAAO,KAAK,QAAQ,CAAG,EAAG,EAAG,CAAM,CACxD,CAEA,QAAQ,EAAW,EAAyB,CAC1C,MAAO,MAAK,OAAO,QAAQ,EAAG,CAAM,CACtC,CACF,EAEO,WAA0C,EAAoC,CACnF,MAAO,IAAI,IACT,GAAK,EAAE,EACP,AAAC,GAAc,GAAI,cAAU,CAAC,EAC9B,AAAC,GAAmB,EAAI,SAAS,EACjC,CACF,CACF,CA8CO,YAAqC,EAAkC,CAC5E,MAAO,IAAI,IAAc,GAAI,EAAG,GAAY,GAAY,CAAQ,CAClE,CAEO,YAAoB,EAAwB,CACjD,GAAI,IAAU,EACZ,MAAO,GACF,GAAI,IAAU,EACnB,MAAO,GAET,KAAM,IAAI,OAAM,iBAAmB,CAAK,CAC1C,CAEO,YAAoB,EAAwB,CACjD,MAAO,GAAQ,EAAI,CACrB,CAEO,YAAuC,EAA0B,EAA8B,CACpG,GAAM,GAAS,GAAK,QAAQ,EACtB,EAAkC,EAAO,CAC7C,EACA,EAAI,EAAe,GAAQ,EAAQ,CAAC,EAAO,IAAI,EAAG,QAAQ,CAC5D,CAAC,EACD,MAAO,IAAI,IACT,EACA,CAAC,CAAE,YAAa,EAChB,AAAC,GAAY,EAAE,QAAO,GACtB,CACF,CACF,CAeO,YAAsC,EAAiC,CAC5E,GAAM,GAAS,GAAK,QAAQ,EACtB,EAAmC,EAAO,CAAC,EAAQ,GAAK,GAAQ,EAAQ,CAAC,EAAO,IAAI,EAAG,MAAM,CAAC,CAAC,EACrG,MAAO,IAAI,IACT,EACA,CAAC,CAAE,UAAW,EACd,AAAC,GAAU,EAAE,MAAK,GAClB,CACF,CACF,CAEO,YAAoC,EAAiC,CAC1E,MAAO,IAAI,IACT,GAAM,EACN,AAAC,GAAS,EAAK,SAAS,OAAO,EAC/B,AAAC,GAAM,OAAO,KAAK,EAAG,OAAO,EAC7B,CACF,CACF,CA0BO,oBAAiE,GAAoB,CAE1F,OAAO,EAAW,EAAoB,CACpC,MAAO,OAAM,OAAO,EAAG,CAAM,CAC/B,CACF,EAEO,WACL,EACA,EACA,EAWM,CAEN,MAAO,IAAI,IAAU,EAAQ,EAAU,CAAc,CACvD,CAwCO,WACL,EACA,EACA,EACuB,CACvB,GAAI,GACE,EACJ,MAAO,IAAU,SACb,EACA,YAAK,CAAK,EACR,EAAM,SAAS,EACf,GAAI,OAAM,EAAuE,CACjF,IAAI,EAAQ,EAAe,CACzB,GAAI,CAAC,EAAa,CAEhB,GAAM,GAAgB,QAAQ,IAAI,EAAQ,OAAO,EAGjD,EAAc,YAAK,CAAa,EAAI,EAAc,SAAS,EAAI,EAG/D,QAAQ,IAAI,EAAQ,QAAS,CAAW,CAC1C,CACA,MAAO,SAAQ,IAAI,EAAQ,CAAQ,CACrC,EACA,IAAI,EAAQ,EAAU,EAAY,CAChC,MAAI,KAAa,SACf,GAAc,GAET,QAAQ,IAAI,EAAQ,EAAU,CAAK,CAC5C,CACF,CAAC,EAGP,MAAO,IAAK,EAAe,EAAY,CAAQ,CACjD,CEtXA,OAAe,oBACf,GAAoB,yBCFpB,OAAe,oBAEF,GAAO,GAAI,YAAG,CAAC,EACf,GAAM,GAAI,YAAG,CAAC,EACd,GAAe,GAAI,YAAG,EAAE,EAExB,GAAM,GAAI,YAAG,CAAC,EAAE,KAAK,EAAE,EACvB,GAAO,GAAI,YAAG,CAAC,EAAE,KAAK,GAAG,EAEzB,GAAS,GAAI,IAAI,EAAG,EAI1B,GAAM,IAAa,GAAK,KAAK,CAAC,EAExB,GAAW,QACX,GAAW,CAAC,GAEZ,GAAyB,GAAI,YAAG,YAAY,EAC5C,GAAyB,GAAI,YAAG,+BAA+B,EAE/D,GAAiC,GAAI,YAAG,YAAY,EACpD,GAAiC,GAAI,YAAG,+BAA+B,EAU7E,GAAM,IAAuB,GAAI,YAAG,EAAE,EAAE,IAAI,GAAI,YAAG,CAAC,CAAC,EA4GrD,GAAM,IAAmB,GAAI,YAAG,sBAAsB,EC3I7D,OAAe,oBACf,GAAoB,yBCIb,GAAM,IAAkB,OAAO,KAAK,aAAc,MAAM,EAClD,GAAY,OAAO,KAAK,OAAQ,MAAM,EACtC,GAAkB,OAAO,KAAK,aAAc,MAAM,EAClD,GAAyB,OAAO,KAAK,oBAAqB,MAAM,EAChE,GAAgB,OAAO,KAAK,WAAY,MAAM,EAC9C,GAAkB,OAAO,KAAK,aAAc,MAAM,EAClD,GAAiB,OAAO,KAAK,YAAa,MAAM,EAChD,GAA8B,OAAO,KAAK,mCAAoC,MAAM,EACpF,GAAmB,OAAO,KAAK,cAAe,MAAM,EAkF1D,YAA2B,EAGhC,CACA,MAAO,IACL,CAAC,OAAO,KAAK,WAAY,MAAM,EAAG,GAAoB,SAAS,EAAG,EAAK,SAAS,CAAC,EACjF,EACF,CACF,CA6BO,GAAM,IAAoB,OAAO,KAAK,kBAAmB,MAAM,EAqB/D,GAAM,IAAoB,OAAO,KAAK,eAAgB,MAAM,EC1JnE,OAAiD,2BACjD,GAAsC,6BACtC,GAAe,oBAiBf,GAAoB,yBCnBpB,OAAe,oBAEf,GAAoB,yBCMb,GAAM,IAAkC,GNIxC,GAAM,IAAkB,GOPxB,GAAM,IAAmB,EAAO,CACrC,GAAK,CAAC,EACN,EAAG,MAAM,EACT,GAAI,OAAO,EACX,EAAU,EAAE,EACZ,GAAI,iBAAiB,EACrB,GAAI,cAAc,EAClB,GAAI,aAAa,EACjB,EAAI,EAAI,EAAG,EAAG,EAAE,CAClB,CAAC,EAEY,GAAoB,EAAO,CAAC,GAAI,gBAAgB,EAAG,GAAI,gBAAgB,EAAG,EAAI,EAAI,EAAG,CAAC,CAAC,CAAC,EACxF,GAAwB,EAAO,CAC1C,GAAK,CAAC,EACN,GAAK,aAAa,EAClB,EAAI,aAAa,EACjB,GAAI,kBAAkB,EACtB,EAAU,QAAQ,EAClB,EAAI,GAAmB,IAAK,cAAc,EAC1C,EAAI,EAAI,EAAG,CAAC,CACd,CAAC,EAEY,GAAa,EAAO,CAC/B,EAAG,aAAa,EAChB,EAAI,UAAU,EACd,EAAI,SAAS,EACb,EAAI,gBAAgB,EACpB,GAAK,uBAAuB,EAC5B,EAAI,uBAAuB,EAC3B,EAAI,eAAe,EACnB,EAAU,WAAW,EACrB,EAAU,YAAY,EACtB,EAAU,SAAS,EACnB,GAAK,uBAAuB,CAC9B,CAAC,EACY,GAAiB,EAAO,CACnC,GAAK,CAAC,EACN,EAAG,MAAM,EACT,EAAU,WAAW,EACrB,EAAU,SAAS,EACnB,EAAU,OAAO,EACjB,EAAU,OAAO,EACjB,EAAU,QAAQ,EAClB,EAAU,QAAQ,EAClB,EAAU,eAAe,EACzB,EAAG,eAAe,EAClB,EAAG,eAAe,EAClB,GAAI,aAAa,EACjB,GAAK,WAAW,EAChB,GAAK,cAAc,EACnB,GAAI,aAAa,EACjB,GAAI,EACJ,GAAK,qBAAqB,EAC1B,GAAK,qBAAqB,EAC1B,EAAI,oBAAoB,EACxB,EAAI,oBAAoB,EAExB,GAAK,oBAAoB,EACzB,GAAK,qBAAqB,EAC1B,GAAK,oBAAoB,EACzB,GAAK,qBAAqB,EAE1B,EAAG,QAAQ,EAEX,EAAI,EAAG,EAAG,EAAG,EAAE,EAEf,EAAI,GAAY,EAAG,aAAa,EAChC,EAAI,EAAI,EAAG,GAAI,iBAAiB,EAEhC,EAAI,iBAAiB,EACrB,EAAI,wBAAwB,EAC5B,EAAI,iBAAiB,EACrB,EAAI,wBAAwB,EAE5B,EAAI,gBAAgB,EACpB,EAAI,gBAAgB,EAEpB,EAAI,WAAW,EAEf,EAAI,EAAI,EAAG,GAAK,EAAI,EAAG,SAAS,CAClC,CAAC,EAEY,GAA2B,EAAO,CAAC,GAAK,qBAAqB,EAAG,EAAI,kBAAkB,CAAC,CAAC,EACxF,GAAqB,EAAO,CACvC,GAAK,CAAC,EACN,EAAG,MAAM,EACT,EAAU,SAAS,EACnB,EAAU,QAAQ,EAElB,GAAI,WAAW,EACf,GAAI,WAAW,EACf,GAAK,WAAW,EAChB,GAAK,yBAAyB,EAC9B,GAAK,yBAAyB,EAC9B,EAAI,gBAAgB,EACpB,EAAI,gBAAgB,EAEpB,EAAI,GAA0B,EAAG,aAAa,EAE9C,EAAI,EAAI,EAAG,EAAG,EAAE,CAClB,CAAC,EAIY,GAAyB,EAAO,CAC3C,GAAK,CAAC,EACN,EAAG,MAAM,EACT,EAAU,QAAQ,EAClB,GAAI,gBAAgB,EACpB,GAAI,gBAAgB,EACpB,GAAK,WAAW,EAChB,GAAK,yBAAyB,EAC9B,GAAK,yBAAyB,EAC9B,EAAI,gBAAgB,EACpB,EAAI,gBAAgB,EACpB,EAAI,GAAK,EAAG,EAAG,oBAAoB,EAEnC,EAAI,EAAI,EAAG,EAAG,EAAE,CAClB,CAAC,EAEY,GAAa,EAAO,CAC/B,GAAI,MAAM,EACV,GAAK,cAAc,EACnB,GAAK,gBAAgB,EACrB,GAAK,sBAAsB,EAC3B,GAAK,sBAAsB,EAC3B,EAAI,GAAK,EAAG,EAAG,yBAAyB,EAExC,EAAI,GAAI,EAAG,GAAI,EAAE,CACnB,CAAC,EAEY,GAAkB,EAAO,CACpC,GAAK,CAAC,EACN,EAAU,QAAQ,EAClB,GAAI,gBAAgB,EACpB,EAAI,GAAY,GAAiB,OAAO,EACxC,EAAG,sBAAsB,EAEzB,EAAI,EAAG,EAAG,IAAK,EAAE,CACnB,CAAC,EAEY,GAAkB,EAAO,CAAC,GAAK,GAAG,EAAG,EAAI,EAAU,EAAG,IAAK,gBAAgB,CAAC,CAAC,EAE7E,GAAiC,EAAO,CACnD,GAAK,CAAC,EACN,EAAU,QAAQ,EAClB,EAAI,EAAI,EAAI,EAAG,CAAC,EAAG,GAAiC,yBAAyB,EAC7E,EAAI,EAAI,EAAI,EAAG,CAAC,EAAG,GAAiC,yBAAyB,CAC/E,CAAC,EAEY,GAAqB,EAAO,CACvC,EAAI,EACJ,EAAG,MAAM,EACT,EAAU,OAAO,EACjB,EAAU,QAAQ,EAClB,EAAU,YAAY,EACtB,EAAU,YAAY,EACtB,EAAI,EAAI,EAAG,CAAC,CACd,CAAC,EAEY,GAAyB,EAAO,CAC3C,GAAK,CAAC,EACN,EAAG,MAAM,EACT,EAAU,WAAW,EACrB,EAAU,QAAQ,EAClB,EAAU,YAAY,EACtB,EAAU,YAAY,EACtB,EAAU,aAAa,EACvB,EAAI,aAAa,EACjB,EAAI,EAAI,EAAG,CAAC,CACd,CAAC,EVnID,GAAsB,KAEtB,GAAM,IAAS,GAAa,cAAc,EW1CnC,GAAM,IAAY,OAAO,KAAK,kBAAmB,MAAM,EACjD,GAAc,OAAO,KAAK,gBAAiB,MAAM,EACjD,GAAoB,OAAO,KAAK,eAAgB,MAAM,EACtD,GAAgB,OAAO,KAAK,kBAAmB,MAAM,EACrD,GAA+B,OAAO,KAAK,+BAAgC,MAAM,EACjF,GAA8B,OAAO,KAAK,8BAA+B,MAAM,EAErF,YAA6B,EAAsC,CACxE,MAAO,IAAmB,CAAC,EAAS,EAAG,CAAS,CAClD,CAWO,YAA+B,EAAsB,EAAkB,EAAkC,CAC9G,MAAO,IAAmB,CAAC,GAAW,EAAM,SAAS,EAAG,EAAM,SAAS,CAAC,EAAG,CAAS,CACtF,CAEO,YAAgC,EAAsB,EAAmB,EAAiC,CAC/G,MAAO,IAAmB,CAAC,GAAiB,EAAO,SAAS,EAAG,EAAK,SAAS,CAAC,EAAG,CAAS,CAC5F,CAEO,YAAwB,EAAsC,CACnE,MAAO,IAAmB,CAAC,OAAO,KAAK,oBAAqB,MAAM,CAAC,EAAG,CAAS,CACjF,CAgBO,YAA0B,EAAsB,EAAgD,CACrG,MAAO,IAAmB,CAAC,GAAe,EAAoB,SAAS,CAAC,EAAG,CAAS,CACtF,CAEO,YAAsB,EAAsB,EAAmB,EAAkC,CACtG,MAAO,IAAmB,CAAC,GAAmB,EAAO,SAAS,EAAG,EAAM,SAAS,CAAC,EAAG,CAAS,CAC/F,CAEO,YAA6B,EAAsB,EAAuB,EAAkC,CACjH,MAAO,IAAmB,CAAC,EAAW,SAAS,EAAG,EAAM,SAAS,CAAC,EAAG,CAAS,CAChF,CAEO,YAAoC,EAAsC,CAC/E,MAAO,IAAmB,CAAC,EAA4B,EAAG,CAAS,CACrE,CAEO,YAA4B,EAAsB,EAAoB,EAAkC,CAC7G,MAAO,IAAmB,CAAC,EAAQ,SAAS,EAAG,EAAM,SAAS,CAAC,EAAG,CAAS,CAC7E,CAEO,YAAmC,EAAsC,CAC9E,MAAO,IAAmB,CAAC,EAA2B,EAAG,CAAS,CACpE,CCtEA,OAAqF,6BACrF,GAA8E,2BAC9E,GAAe,oBCFR,GAAM,IAAkB,EAAO,CACpC,EAAI,EACJ,EAAI,OAAO,EACX,EAAG,WAAW,EACd,GAAI,OAAO,EACX,EAAI,YAAY,EAChB,EAAI,cAAc,EAElB,EAAI,iBAAiB,EACrB,EAAI,YAAY,EAChB,EAAI,aAAa,EACjB,EAAI,cAAc,EAClB,EAAI,iBAAiB,EACrB,EAAI,iBAAiB,EAErB,EAAU,OAAO,EACjB,EAAU,kBAAkB,EAC5B,EAAU,iBAAiB,EAC3B,EAAU,oBAAoB,EAC9B,EAAU,qBAAqB,EAC/B,EAAI,EAAI,EAAG,EAAE,CACf,CAAC,EAEY,GAAkB,EAAO,CACpC,EAAI,mBAAmB,EACvB,EAAI,aAAa,EACjB,EAAI,cAAc,EAClB,EAAI,WAAW,EACf,EAAI,qBAAqB,CAC3B,CAAC,EAEY,GAAgB,EAAO,CAClC,EAAI,EACJ,EAAI,OAAO,EACX,EAAG,MAAM,EACT,EAAG,QAAQ,EACX,EAAG,eAAe,EAClB,EAAG,eAAe,EAClB,EAAG,aAAa,EAEhB,EAAI,QAAQ,EACZ,EAAI,YAAY,EAChB,EAAI,UAAU,EACd,EAAI,UAAU,EACd,EAAI,OAAO,EACX,EAAI,OAAO,EACX,EAAI,mBAAmB,EACvB,EAAI,aAAa,EACjB,EAAI,aAAa,EACjB,EAAI,YAAY,EAEhB,GAAgB,UAAU,iBAAiB,EAE3C,EAAU,UAAU,EACpB,EAAU,YAAY,EACtB,EAAU,OAAO,EACjB,EAAU,OAAO,EACjB,EAAU,QAAQ,EAClB,EAAU,QAAQ,EAElB,EAAU,SAAS,EAEnB,EAAG,iBAAiB,EACpB,EAAG,kBAAkB,EAErB,EAAI,EAAG,EAAG,EAAE,CACd,CAAC,EAEY,GAAmB,EAAO,CACrC,EAAI,EACJ,EAAI,OAAO,EACX,EAAU,QAAQ,EAClB,EAAU,aAAa,EACvB,EAAI,eAAe,EACnB,EAAI,kBAAkB,EACtB,EAAI,EAAI,EAAG,CAAC,CACd,CAAC,EAEY,GAAoB,EAAO,CACtC,EAAG,aAAa,EAChB,EAAG,kBAAkB,EACrB,EAAI,QAAQ,EACZ,EAAI,YAAY,EAChB,EAAI,mBAAmB,EAEvB,EAAI,mBAAmB,EACvB,EAAI,aAAa,EACjB,EAAI,cAAc,CACpB,CAAC,EAEY,GAAqB,EAAO,CACvC,EAAI,OAAO,EACX,EAAG,OAAO,EACV,EAAU,UAAU,EAEpB,GAAkB,UAAU,mBAAmB,EAC/C,EAAI,EAAI,EAAG,EAAE,CACf,CAAC,EAEY,GAAiB,EAAO,CACnC,EAAI,EACJ,EAAI,OAAO,EACX,EAAU,wBAAwB,EAClC,EAAU,uBAAuB,EACjC,EAAI,eAAe,EACnB,EAAI,cAAc,EAClB,EAAI,WAAW,EACf,EAAI,SAAS,EACb,EAAI,EAAG,EAAG,GAAI,MAAM,EACpB,EAAI,EAAG,EAAG,IAAK,KAAK,EACpB,EAAI,EAAG,EAAG,IAAK,KAAK,EACpB,EAAU,YAAY,EACtB,EAAI,gBAAgB,EACpB,EAAU,0BAA0B,EACpC,EAAI,EAAG,EAAG,GAAG,EAEb,GAAI,GAAoB,eAAe,CACzC,CAAC,ED/GM,GAAM,IAAgB,CAC3B,WAAY,OAAO,KAAK,CAAC,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAG,CAAC,EAC9D,aAAc,OAAO,KAAK,CAAC,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,EAAE,CAAC,EAE7D,WAAY,OAAO,KAAK,CAAC,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAG,CAAC,EAC9D,YAAa,OAAO,KAAK,CAAC,GAAI,IAAK,IAAK,GAAI,IAAK,EAAG,IAAK,EAAE,CAAC,EAC5D,YAAa,OAAO,KAAK,CAAC,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,EAAE,CAAC,EAC/D,aAAc,OAAO,KAAK,CAAC,GAAI,IAAK,GAAI,GAAI,EAAG,EAAG,GAAI,GAAG,CAAC,EAC1D,qBAAsB,OAAO,KAAK,CAAC,IAAK,IAAK,EAAG,GAAI,IAAK,IAAK,IAAK,GAAG,CAAC,EACvE,iBAAkB,OAAO,KAAK,CAAC,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,EAAE,CAAC,EAEjE,qBAAsB,OAAO,KAAK,CAAC,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,EAAE,CAAC,EACxE,iBAAkB,OAAO,KAAK,CAAC,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,EAAE,CAAC,EAClE,oBAAqB,OAAO,KAAK,CAAC,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAG,CAAC,EACrE,wBAAyB,OAAO,KAAK,CAAC,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,EAAE,CAAC,EAC1E,0BAA2B,OAAO,KAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,EAAE,CAAC,EAC7E,gBAAiB,OAAO,KAAK,CAAC,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,CAAC,EAEnE,yBAA0B,OAAO,KAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,EAAE,CAAC,EAC3E,yBAA0B,OAAO,KAAK,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAG,CAAC,CAC3E,EAmGO,YACL,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EACA,EACA,EAEA,EAMA,EACA,EACA,EAEA,EACwB,CACxB,GAAM,GAAc,EAAO,CAAC,EAAG,UAAU,EAAG,GAAI,MAAM,EAAG,GAAI,QAAQ,EAAG,GAAI,KAAK,CAAC,CAAC,EAC7E,EAAc,EAAO,CACzB,EAAI,mBAAmB,EACvB,EAAI,aAAa,EACjB,EAAI,cAAc,EAClB,EAAG,kBAAkB,CACvB,CAAC,EAEK,EAAe,EAAO,CAAC,EAAG,OAAO,EAAG,EAAI,QAAQ,EAAG,EAAI,mBAAmB,EAAG,EAAG,aAAa,CAAC,CAAC,EAC/F,EAAe,EAAO,CAC1B,EAAG,OAAO,EACV,EAAI,QAAQ,EACZ,EAAI,YAAY,EAChB,EAAI,mBAAmB,EACvB,EAAG,aAAa,CAClB,CAAC,EAEK,EAA2B,CAC/B,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAS,SAAU,GAAO,WAAY,EAAM,EACtD,CAAE,OAAQ,EAAU,SAAU,GAAO,WAAY,EAAM,EACvD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAM,EACzD,CAAE,OAAQ,EAAM,SAAU,GAAO,WAAY,EAAM,EACnD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EACpD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAK,EAExD,CAAE,OAAQ,oBAAkB,SAAU,GAAO,WAAY,EAAM,EAC/D,CAAE,OAAQ,oBAAkB,SAAU,GAAO,WAAY,EAAM,EAC/D,CAAE,OAAQ,GAAqB,SAAU,GAAO,WAAY,EAAM,EAClE,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,EACtE,CAAE,OAAQ,GAAiB,SAAU,GAAO,WAAY,EAAM,EAC9D,CAAE,OAAQ,GAAe,CAAS,EAAE,UAAW,SAAU,GAAO,WAAY,EAAM,EAClF,CAAE,OAAQ,EAAW,SAAU,GAAO,WAAY,EAAM,CAC1D,EAEM,EAAQ,OAAO,MACnB,OAAO,KAAK,EAAM,OAAO,EAAE,OACzB,OAAO,KAAK,EAAQ,OAAO,EAAE,OAC7B,OAAO,KAAK,EAAK,OAAO,EAAE,OAC1B,EAAI,EACJ,CACJ,EACM,EAAQ,OAAO,MAAM,EAAY,IAAI,EAErC,EAAQ,OAAO,MAAM,EAAW,OAAS,gBAAkB,EAAa,KAAO,EAAa,IAAI,EAEtG,SAAY,OAAO,CAAE,WAAU,OAAM,SAAQ,KAAI,EAAG,CAAK,EACzD,AAAI,EAAW,OAAS,gBACtB,EAAa,OAAO,KAAE,MAAO,GAAM,GAAf,CAA2B,YAAa,EAAW,cAAgB,MAAQ,EAAI,CAAE,GAAG,CAAK,EACxG,AAAI,EAAW,OAAS,aAC7B,EAAa,OAAO,KAAE,MAAO,GAAM,GAAf,CAA2B,YAAa,EAAW,cAAgB,MAAQ,EAAI,CAAE,GAAG,CAAK,EACpG,EAAW,OAAS,eAC7B,EAAa,OAAO,KAAE,MAAO,GAAM,GAAf,CAA2B,YAAa,EAAW,cAAgB,MAAQ,EAAI,CAAE,GAAG,CAAK,EAG/G,EAAY,OAAO,CAAE,oBAAmB,cAAa,eAAc,kBAAiB,EAAG,CAAK,EAErF,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,aAAc,GAAG,EAAO,GAAG,EAAO,GAAG,CAAK,CAAC,CACjF,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EACA,EACA,EAEA,EAMA,EACA,EACA,EAEA,EACA,EACwB,CACxB,GAAM,GAAc,EAAO,CAAC,EAAG,UAAU,EAAG,GAAI,MAAM,EAAG,GAAI,QAAQ,EAAG,GAAI,KAAK,CAAC,CAAC,EAC7E,EAAc,EAAO,CACzB,EAAI,mBAAmB,EACvB,EAAI,aAAa,EACjB,EAAI,cAAc,EAClB,EAAG,kBAAkB,EACrB,EAAG,kCAAkC,EACrC,EAAO,CAAC,GAAI,uBAAuB,EAAG,EAAI,YAAY,CAAC,CAAC,EAAE,UAAU,4BAA4B,CAClG,CAAC,EAEK,EAAe,EAAO,CAAC,EAAG,OAAO,EAAG,EAAI,QAAQ,EAAG,EAAI,mBAAmB,EAAG,EAAG,aAAa,CAAC,CAAC,EAC/F,EAAe,EAAO,CAC1B,EAAG,OAAO,EACV,EAAI,QAAQ,EACZ,EAAI,YAAY,EAChB,EAAI,mBAAmB,EACvB,EAAG,aAAa,CAClB,CAAC,EAEK,EAA2B,CAC/B,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAS,SAAU,GAAO,WAAY,EAAM,EACtD,CAAE,OAAQ,EAAU,SAAU,GAAO,WAAY,EAAM,EACvD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAM,EACzD,CAAE,OAAQ,EAAM,SAAU,GAAO,WAAY,EAAM,EACnD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EACpD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EAEpD,CAAE,OAAQ,yBAAuB,SAAU,GAAO,WAAY,EAAM,EACpE,CAAE,OAAQ,oBAAkB,SAAU,GAAO,WAAY,EAAM,EAC/D,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,EACtE,CAAE,OAAQ,GAAe,CAAS,EAAE,UAAW,SAAU,GAAO,WAAY,EAAM,EAClF,CAAE,OAAQ,EAAW,SAAU,GAAO,WAAY,EAAM,CAC1D,EAEM,EAAQ,OAAO,MACnB,OAAO,KAAK,EAAM,OAAO,EAAE,OACzB,OAAO,KAAK,EAAQ,OAAO,EAAE,OAC7B,OAAO,KAAK,EAAK,OAAO,EAAE,OAC1B,EAAI,EACJ,CACJ,EACM,EAAQ,OAAO,MAAM,EAAY,IAAI,EAErC,EAAQ,OAAO,MAAM,EAAW,OAAS,gBAAkB,EAAa,KAAO,EAAa,IAAI,EAEtG,SAAY,OAAO,CAAE,WAAU,OAAM,SAAQ,KAAI,EAAG,CAAK,EACzD,AAAI,EAAW,OAAS,gBACtB,EAAa,OAAO,KAAE,MAAO,GAAM,GAAf,CAA2B,YAAa,EAAW,cAAgB,MAAQ,EAAI,CAAE,GAAG,CAAK,EACxG,AAAI,EAAW,OAAS,aAC7B,EAAa,OAAO,KAAE,MAAO,GAAM,GAAf,CAA2B,YAAa,EAAW,cAAgB,MAAQ,EAAI,CAAE,GAAG,CAAK,EACpG,EAAW,OAAS,eAC7B,EAAa,OAAO,KAAE,MAAO,GAAM,GAAf,CAA2B,YAAa,EAAW,cAAgB,MAAQ,EAAI,CAAE,GAAG,CAAK,EAG/G,EAAY,OACV,CACE,oBACA,cACA,eACA,mBACA,iCAAkC,EAA6B,EAAI,EACnE,2BAA4B,UAA8B,CAAE,sBAAuB,EAAG,WAAY,GAAI,YAAG,CAAC,CAAE,CAC9G,EACA,CACF,EAEO,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,wBAAyB,GAAG,EAAO,GAAG,EAAO,GAAG,CAAK,CAAC,CAC5F,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EAEA,EACA,EACA,EAEA,EACwB,CACxB,GAAM,GAAa,EAAO,CAAC,EAAI,SAAS,EAAG,EAAI,YAAY,EAAG,EAAI,cAAc,CAAC,CAAC,EAE5E,EAA2B,CAC/B,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAM,SAAU,GAAO,WAAY,EAAM,EACnD,CAAE,OAAQ,EAAU,SAAU,GAAO,WAAY,EAAM,EACvD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAM,EACzD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EAEpD,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EAEpD,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAC5D,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAE5D,CAAE,OAAQ,GAAe,CAAS,EAAE,UAAW,SAAU,GAAO,WAAY,EAAM,EAClF,CAAE,OAAQ,EAAW,SAAU,GAAO,WAAY,EAAM,CAC1D,EAEA,AAAI,GACF,EAAK,KAAK,CAAE,OAAQ,EAAkB,SAAU,GAAO,WAAY,EAAK,CAAC,EAG3E,EAAK,KAAK,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,CAAC,EACjF,EAAK,KAAK,CAAE,OAAQ,EAAuB,SAAU,GAAO,WAAY,EAAK,CAAC,EAC9E,EAAK,KAAK,CAAE,OAAQ,EAAsB,SAAU,GAAO,WAAY,EAAK,CAAC,EAE7E,GAAM,GAAO,OAAO,MAAM,EAAW,IAAI,EACzC,SAAW,OACT,CACE,UACA,aACA,aAAc,UAAgB,GAAI,YAAG,CAAC,CACxC,EACA,CACF,EAEO,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,WAAY,GAAG,CAAI,CAAC,CAC1D,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EAEA,EACA,EACA,EAEA,EACwB,CACxB,GAAM,GAAa,EAAO,CAAC,EAAI,SAAS,EAAG,EAAI,YAAY,EAAG,EAAI,cAAc,CAAC,CAAC,EAE5E,EAA2B,CAC/B,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAM,SAAU,GAAO,WAAY,EAAM,EACnD,CAAE,OAAQ,EAAU,SAAU,GAAO,WAAY,EAAM,EACvD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAM,EACzD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EAEpD,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EAEpD,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAC5D,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAE5D,CAAE,OAAQ,GAAe,CAAS,EAAE,UAAW,SAAU,GAAO,WAAY,EAAM,EAClF,CAAE,OAAQ,EAAW,SAAU,GAAO,WAAY,EAAM,CAC1D,EAEA,AAAI,GACF,EAAK,KAAK,CAAE,OAAQ,EAAkB,SAAU,GAAO,WAAY,EAAK,CAAC,EAG3E,EAAK,KAAK,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,CAAC,EACjF,EAAK,KAAK,CAAE,OAAQ,EAAuB,SAAU,GAAO,WAAY,EAAK,CAAC,EAC9E,EAAK,KAAK,CAAE,OAAQ,EAAsB,SAAU,GAAO,WAAY,EAAK,CAAC,EAE7E,GAAM,GAAO,OAAO,MAAM,EAAW,IAAI,EACzC,SAAW,OACT,CACE,UACA,aACA,aAAc,UAAgB,GAAI,YAAG,CAAC,CACxC,EACA,CACF,EAEO,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,YAAa,GAAG,CAAI,CAAC,CAC3D,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EAEA,EACA,EACA,EAEA,EACwB,CACxB,GAAM,GAAa,EAAO,CAAC,EAAI,SAAS,EAAG,EAAI,YAAY,EAAG,EAAI,cAAc,CAAC,CAAC,EAE5E,EAA2B,CAC/B,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAM,SAAU,GAAO,WAAY,EAAM,EACnD,CAAE,OAAQ,EAAU,SAAU,GAAO,WAAY,EAAM,EACvD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAM,EACzD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EAEpD,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EAEpD,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAC5D,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAE5D,CAAE,OAAQ,GAAe,CAAS,EAAE,UAAW,SAAU,GAAO,WAAY,EAAM,EAClF,CAAE,OAAQ,EAAW,SAAU,GAAO,WAAY,EAAM,CAC1D,EAEA,AAAI,GACF,EAAK,KAAK,CAAE,OAAQ,EAAkB,SAAU,GAAO,WAAY,EAAK,CAAC,EAG3E,EAAK,KAAK,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,CAAC,EACjF,EAAK,KAAK,CAAE,OAAQ,EAAuB,SAAU,GAAO,WAAY,EAAK,CAAC,EAC9E,EAAK,KAAK,CAAE,OAAQ,EAAsB,SAAU,GAAO,WAAY,EAAK,CAAC,EAE7E,GAAM,GAAO,OAAO,MAAM,EAAW,IAAI,EACzC,SAAW,OACT,CACE,UACA,aACA,aAAc,UAAgB,GAAI,YAAG,CAAC,CACxC,EACA,CACF,EAEO,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,YAAa,GAAG,CAAI,CAAC,CAC3D,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EAEA,EACA,EACA,EAEA,EACwB,CACxB,GAAM,GAAa,EAAO,CAAC,EAAI,SAAS,EAAG,EAAI,YAAY,EAAG,EAAI,cAAc,CAAC,CAAC,EAE5E,EAA2B,CAC/B,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAM,SAAU,GAAO,WAAY,EAAM,EACnD,CAAE,OAAQ,EAAU,SAAU,GAAO,WAAY,EAAM,EACvD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAM,EACzD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EAEpD,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EACpD,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EAEpD,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAC5D,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAE5D,CAAE,OAAQ,GAAe,CAAS,EAAE,UAAW,SAAU,GAAO,WAAY,EAAM,EAClF,CAAE,OAAQ,EAAW,SAAU,GAAO,WAAY,EAAM,CAC1D,EAEA,AAAI,GACF,EAAK,KAAK,CAAE,OAAQ,EAAkB,SAAU,GAAO,WAAY,EAAK,CAAC,EAG3E,EAAK,KAAK,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,CAAC,EACjF,EAAK,KAAK,CAAE,OAAQ,EAAuB,SAAU,GAAO,WAAY,EAAK,CAAC,EAC9E,EAAK,KAAK,CAAE,OAAQ,EAAsB,SAAU,GAAO,WAAY,EAAK,CAAC,EAE7E,GAAM,GAAO,OAAO,MAAM,EAAW,IAAI,EACzC,SAAW,OACT,CACE,UACA,aACA,aAAc,UAAgB,GAAI,YAAG,CAAC,CACxC,EACA,CACF,EAEO,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,aAAc,GAAG,CAAI,CAAC,CAC5D,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EAEA,EAEA,EACA,EACA,EACA,EACwB,CACxB,GAAM,GAAa,EAAO,CAAC,CAAC,EAEtB,EAA2B,CAC/B,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAM,SAAU,GAAO,WAAY,EAAM,EACnD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EAEpD,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAK,EAE3D,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EACpD,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAM,EAC5D,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,EACtE,CAAE,OAAQ,+BAA6B,SAAU,GAAO,WAAY,EAAM,CAC5E,EAEM,EAAO,OAAO,MAAM,EAAW,IAAI,EACzC,SAAW,OAAO,CAAC,EAAG,CAAI,EAEnB,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,iBAAkB,GAAG,CAAI,CAAC,CAChE,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EAEA,EACA,EACwB,CACxB,GAAM,GAAa,EAAO,CAAC,EAAI,aAAa,CAAC,CAAC,EAExC,EAA2B,CAC/B,CAAE,OAAQ,EAAO,SAAU,GAAM,WAAY,EAAK,EAClD,CAAE,OAAQ,EAAa,SAAU,GAAO,WAAY,EAAK,EACzD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EAEpD,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAK,EAE3D,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,CACxE,EAEM,EAAO,OAAO,MAAM,EAAW,IAAI,EACzC,SAAW,OAAO,CAAE,aAAY,EAAG,CAAI,EAEhC,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,qBAAsB,GAAG,CAAI,CAAC,CACpE,CAAC,CACH,CAEO,YACL,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACwB,CACxB,GAAM,GAA2B,CAC/B,CAAE,OAAQ,EAAwB,SAAU,GAAM,WAAY,EAAK,EACnE,CAAE,OAAQ,EAAM,SAAU,GAAO,WAAY,EAAM,EACnD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAK,EACxD,CAAE,OAAQ,EAAQ,SAAU,GAAO,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAmB,SAAU,GAAO,WAAY,EAAK,EAC/D,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAK,EACnD,CAAE,OAAQ,EAAe,SAAU,GAAO,WAAY,EAAK,EAC3D,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAK,EACrE,CAAE,OAAQ,+BAA6B,SAAU,GAAO,WAAY,EAAK,CAC3E,EAEA,MAAO,IAAI,2BAAuB,CAChC,OACA,YACA,KAAM,GAAc,gBACtB,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EACA,EAEA,EAEA,EAEA,EAKA,EACA,EACA,EACA,EACA,EACwB,CACxB,GAAM,GAAa,EAAO,CACxB,EAAI,eAAe,EACnB,EAAI,cAAc,EAClB,EAAI,WAAW,EAEf,EAAI,SAAS,EACb,GAAI,MAAM,EACV,GAAI,KAAK,EACT,GAAI,KAAK,EACT,EAAI,gBAAgB,CACtB,CAAC,EAEK,EAA2B,CAC/B,CAAE,OAAQ,EAAe,SAAU,GAAM,WAAY,EAAK,EAC1D,CAAE,OAAQ,EAAwB,SAAU,GAAO,WAAY,EAAM,EACrE,CAAE,OAAQ,EAAuB,SAAU,GAAO,WAAY,EAAM,EACpE,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAK,EACxD,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAK,EACxD,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,EACtE,CAAE,OAAQ,EAA0B,SAAU,GAAO,WAAY,EAAM,CACzE,EAEM,EAAO,OAAO,MAClB,EAAI,EACF,OAAO,KAAK,EAAM,OAAO,EAAE,OAC3B,OAAO,KAAK,EAAK,OAAO,EAAE,OAC1B,OAAO,KAAK,EAAK,OAAO,EAAE,OAC1B,EAAI,CACR,EACA,SAAW,OACT,CACE,cAAe,EAAsB,cACrC,aAAc,EAAsB,aACpC,UAAW,EAAsB,UACjC,UACA,OACA,MACA,MACA,gBACF,EACA,CACF,EAEO,GAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,qBAAsB,GAAG,CAAI,CAAC,CACpE,CAAC,CACH,CAEO,YACL,EAEA,EACA,EAEA,EAyBwB,CACxB,GAAM,GAA2B,CAC/B,CAAE,OAAQ,EAAe,SAAU,GAAM,WAAY,EAAM,EAC3D,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAK,CAC1D,EAEI,EACJ,GAAI,EAAW,OAAS,uBAAwB,CAC9C,GAAM,GAAa,EAAO,CAAC,EAAG,OAAO,EAAG,EAAU,OAAO,CAAC,CAAC,EAC3D,EAAO,OAAO,MAAM,EAAW,IAAI,EACnC,EAAW,OAAO,CAAE,MAAO,EAAG,MAAO,EAAW,KAAM,EAAG,CAAI,CAC/D,SAAW,EAAW,OAAS,sBAAuB,CACpD,GAAM,GAAa,EAAO,CAAC,EAAG,OAAO,EAAG,EAAU,OAAO,CAAC,CAAC,EAC3D,EAAO,OAAO,MAAM,EAAW,IAAI,EACnC,EAAW,OAAO,CAAE,MAAO,EAAG,MAAO,EAAW,KAAM,EAAG,CAAI,CAC/D,SAAW,EAAW,OAAS,wBAAyB,CACtD,GAAM,GAAa,EAAO,CAAC,EAAG,OAAO,EAAG,EAAI,eAAe,EAAG,EAAI,cAAc,EAAG,EAAI,WAAW,CAAC,CAAC,EACpG,EAAO,OAAO,MAAM,EAAW,IAAI,EACnC,EAAW,OAAO,GAAE,MAAO,GAAM,EAAW,OAAS,CAAI,CAC3D,SAAW,EAAW,OAAS,gBAAiB,CAC9C,GAAM,GAAa,EAAO,CAAC,EAAG,OAAO,EAAG,EAAI,OAAO,CAAC,CAAC,EACrD,EAAO,OAAO,MAAM,EAAW,IAAI,EACnC,EAAW,OAAO,CAAE,MAAO,EAAG,MAAO,EAAW,KAAM,EAAG,CAAI,CAC/D,SAAW,EAAW,OAAS,aAAe,EAAW,OAAS,cAAgB,EAAW,OAAS,YAAa,CACjH,GAAM,GAAa,EAAO,CAAC,EAAG,OAAO,EAAG,GAAI,OAAO,CAAC,CAAC,EACrD,EAAO,OAAO,MAAM,OAAO,KAAK,EAAW,MAAO,OAAO,EAAE,OAAS,EAAI,EAAI,CAAC,EAC7E,AAAI,EAAW,OAAS,aAAc,EAAW,OAAO,CAAE,MAAO,EAAG,MAAO,EAAW,KAAM,EAAG,CAAI,EAC9F,AAAI,EAAW,OAAS,YAAa,EAAW,OAAO,CAAE,MAAO,EAAG,MAAO,EAAW,KAAM,EAAG,CAAI,EAC9F,EAAW,OAAS,aAAa,EAAW,OAAO,CAAE,MAAO,EAAG,MAAO,EAAW,KAAM,EAAG,CAAI,CACzG,SAAW,EAAW,OAAS,mBAAoB,CACjD,EAAK,KAAK,CAAE,OAAQ,EAAW,MAAO,SAAU,GAAO,WAAY,EAAM,CAAC,EAE1E,GAAM,GAAa,EAAO,CAAC,EAAG,OAAO,CAAC,CAAC,EACvC,EAAO,OAAO,MAAM,EAAW,IAAI,EACnC,EAAW,OAAO,CAAE,MAAO,CAAE,EAAG,CAAI,CACtC,SAAW,EAAW,OAAS,YAAa,CAC1C,EAAK,KAAK,CAAE,OAAQ,EAAW,MAAM,WAAY,SAAU,GAAO,WAAY,EAAM,CAAC,EAErF,GAAM,GAAa,EAAO,CACxB,EAAG,OAAO,EACV,EAAU,wBAAwB,EAClC,EAAU,uBAAuB,EACjC,EAAI,eAAe,EACnB,EAAI,cAAc,EAClB,EAAI,WAAW,EAEf,EAAI,SAAS,EACb,GAAI,MAAM,EACV,GAAI,KAAK,EACT,GAAI,KAAK,EACT,EAAU,0BAA0B,EACpC,EAAI,gBAAgB,CACtB,CAAC,EACD,EAAO,OAAO,MACZ,EACE,GACA,GACA,EAAI,EACJ,EAAI,EACJ,OAAO,KAAK,EAAW,MAAM,KAAM,OAAO,EAAE,OAC5C,OAAO,KAAK,EAAW,MAAM,IAAK,OAAO,EAAE,OAC3C,OAAO,KAAK,EAAW,MAAM,IAAK,OAAO,EAAE,OAC3C,GACA,CACJ,EACA,EAAW,OACT,CACE,MAAO,EACP,uBAAwB,EAAW,MAAM,uBACzC,sBAAuB,EAAW,MAAM,sBACxC,cAAe,EAAW,MAAM,sBAAsB,cACtD,aAAc,EAAW,MAAM,sBAAsB,aACrD,UAAW,EAAW,MAAM,sBAAsB,UAClD,QAAS,EAAW,MAAM,QAC1B,KAAM,EAAW,MAAM,KACvB,IAAK,EAAW,MAAM,IACtB,IAAK,EAAW,MAAM,IACtB,yBAA0B,EAAW,MAAM,yBAC3C,eAAgB,EAAW,MAAM,cACnC,EACA,CACF,CACF,KACE,MAAM,OAAM,8BAA8B,EAG5C,MAAO,IAAI,2BAAuB,CAChC,OACA,YACA,KAAM,OAAO,KAAK,CAAC,GAAG,GAAc,oBAAqB,GAAG,CAAI,CAAC,CACnE,CAAC,CACH,CAEO,YACL,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACwB,CACxB,GAAM,GAA2B,CAC/B,CAAE,OAAQ,EAAwB,SAAU,GAAM,WAAY,EAAK,EACnE,CAAE,OAAQ,EAAsB,SAAU,GAAO,WAAY,EAAM,EACnE,CAAE,OAAQ,EAAY,SAAU,GAAO,WAAY,EAAM,EACzD,CAAE,OAAQ,EAAuB,SAAU,GAAO,WAAY,EAAK,EACnE,CAAE,OAAQ,EAAuB,SAAU,GAAO,WAAY,EAAK,EACnE,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EAEpD,CAAE,OAAQ,EAAc,SAAU,GAAO,WAAY,EAAM,EAC3D,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,EACtE,CAAE,OAAQ,+BAA6B,SAAU,GAAO,WAAY,EAAM,CAC5E,EAEA,MAAO,IAAI,2BAAuB,CAChC,OACA,YACA,KAAM,GAAc,yBACtB,CAAC,CACH,CAEO,YACL,EAEA,EACA,EACA,EACA,EACA,EACA,EACwB,CACxB,GAAM,GAA2B,CAC/B,CAAE,OAAQ,EAAS,SAAU,GAAM,WAAY,EAAK,EACpD,CAAE,OAAQ,EAAqB,SAAU,GAAO,WAAY,EAAM,EAClE,CAAE,OAAQ,EAAsB,SAAU,GAAO,WAAY,EAAK,EAClE,CAAE,OAAQ,EAAuB,SAAU,GAAO,WAAY,EAAK,EACnE,CAAE,OAAQ,EAAO,SAAU,GAAO,WAAY,EAAM,EAEpD,CAAE,OAAQ,EAAc,SAAU,GAAO,WAAY,EAAM,EAC3D,CAAE,OAAQ,iBAAc,UAAW,SAAU,GAAO,WAAY,EAAM,EACtE,CAAE,OAAQ,+BAA6B,SAAU,GAAO,WAAY,EAAM,CAC5E,EAEA,MAAO,IAAI,2BAAuB,CAChC,OACA,YACA,KAAM,GAAc,eACtB,CAAC,CACH,CAGA,GAAM,IAAS,GAAI,YAAG,sBAAsB,ExCr6B5C,MASO,6BACP,EAAe,oBACf,GAAyC,2B0CtEzC,OAAe,oBACf,GAAoB,yBCFpB,OAAe,oBACf,GAAoB,yBCUb,YAAgB,OACd,wBAAuB,CAC5B,WACA,WACA,YAKU,CACV,KAAM,OAAM,CACd,OACO,wBAAuB,CAC5B,IACA,IACA,WACA,YAMU,CACV,KAAM,OAAM,CACd,OACO,cAAa,CAClB,WACA,WACA,YAKU,CACV,KAAM,OAAM,CACd,OACO,iBAAgB,CACrB,SACA,YACA,oBACA,mBACA,aACA,WACA,YASU,CACV,KAAM,OAAM,CACd,OACO,qBAAoB,CACzB,WACA,WACA,YAKU,CACV,KAAM,OAAM,CACd,OAEO,cAAa,CAClB,SACA,mBACA,YACA,oBACA,cAO0B,CAC1B,KAAM,OAAM,CACd,OAEO,YAAW,CAChB,WACA,UAIK,CACL,KAAM,OAAM,CACd,OAEO,aAAY,CACjB,WACA,UAIK,CACL,KAAM,OAAM,CACd,OAEO,aAAY,CACjB,WACA,UAIK,CACL,KAAM,OAAM,CACd,OAEO,cAAa,CAClB,WACA,UAIK,CACL,KAAM,OAAM,CACd,CACF,ED/HO,oBAAyC,GAAU,OACjD,wBAAuB,CAC5B,WACA,WACA,YAKU,CACV,MAAO,IAAI,YAAQ,EAAS,SAAS,SAAS,CAAC,EAAE,IAAI,EAAS,SAAS,SAAS,CAAC,EAAE,IAAI,IAAO,GAAW,EAAS,CACpH,OACO,wBAAuB,CAC5B,IACA,IACA,WACA,YAMU,CACV,MAAO,IAAI,YAAQ,EAAE,SAAS,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,EAAE,IAAI,IAAO,GAAW,EAAS,CACpF,OACO,cAAa,CAClB,WACA,WACA,YAKU,CACV,MAAO,IAAI,YAAQ,EAAS,SAAS,IAAI,EAAS,KAAK,EAAE,SAAS,CAAC,EAChE,IAAI,EAAS,SAAS,IAAI,EAAS,KAAK,EAAE,SAAS,CAAC,EACpD,IAAI,IAAO,GAAW,EAAS,CACpC,OACO,iBAAgB,CACrB,SACA,YACA,oBACA,mBACA,aACA,WACA,YASU,CACV,MAAO,IAAI,YAAQ,EAAiB,IAAI,CAAU,EAAE,SAAS,CAAC,EAC3D,IAAI,EAAO,IAAI,CAAS,EAAE,IAAI,CAAiB,EAAE,SAAS,CAAC,EAC3D,IAAI,IAAO,GAAW,EAAS,CACpC,OAEO,qBAAoB,CACzB,WACA,WACA,YAKU,CACV,GAAM,GAAe,EAAS,WAAW,IAAI,EAAS,KAAK,EACrD,EAAkB,EAAS,kBAAkB,IAAI,EAAS,KAAK,EAMrE,MAAO,IAAI,YAAQ,EAAS,SAAS,IAAI,EAAS,MAAM,IAAI,CAAe,CAAC,EAAE,SAAS,CAAC,EACrF,IAAI,EAAS,SAAS,IAAI,EAAS,MAAM,IAAI,CAAY,CAAC,EAAE,SAAS,CAAC,EACtE,IAAI,IAAO,GAAW,EAAS,CACpC,OAEO,cAAa,CAClB,SACA,mBACA,YACA,oBACA,cAWA,CACA,GAAI,EAAO,IAAI,CAAS,EAAG,KAAM,OAAM,2BAA2B,EAClE,GAAM,GAAwB,EAAO,IAAI,CAAS,EAAE,IAAI,CAAiB,EACzE,GAAI,EAAsB,IAAI,GAAI,YAAG,CAAC,CAAC,EAAG,KAAM,OAAM,4BAA4B,EAElF,GAAM,GAAY,EAAiB,IAAI,CAAU,EACjD,GAAI,EAAU,IAAI,GAAI,YAAG,CAAC,CAAC,EAAG,KAAM,OAAM,gBAAgB,EAI1D,GAAM,GAAY,EAAU,IAAI,CAAS,EAAE,IAAI,CAAS,EAAE,IAAI,CAAqB,EAC7E,EAAc,EAAU,IAAI,CAAS,EAAE,IAAI,CAAqB,EAAE,IAAI,CAAgB,EACtF,EAAK,EAAU,IAAI,CAAW,EAC9B,EAAK,EAAiB,IAAI,CAAgB,EAAE,IAAI,CAAW,EAEjE,GAAI,EAAG,GAAG,GAAI,YAAG,CAAC,CAAC,GAAK,EAAG,GAAG,GAAI,YAAG,CAAC,CAAC,EAAG,KAAM,OAAM,iBAAiB,EAEvE,MAAO,CACL,EAAG,EACH,EAAG,EACH,EAAG,CACL,CACF,OAEO,YAAW,CAChB,WACA,UAIK,CACL,MAAO,MAAK,aAAa,CACvB,SAAU,EACV,aAAc,EAAS,SAAS,IAAI,EAAS,KAAK,EAClD,cAAe,EAAS,SAAS,IAAI,EAAS,KAAK,CACrD,CAAC,CACH,OAEO,aAAY,CACjB,WACA,UAIK,CACL,MAAO,MAAK,YAAY,CACtB,UAAW,EACX,aAAc,EAAS,SAAS,IAAI,EAAS,KAAK,EAClD,cAAe,EAAS,SAAS,IAAI,EAAS,KAAK,CACrD,CAAC,CACH,OAEO,aAAY,CACjB,WACA,UAIK,CACL,MAAO,MAAK,aAAa,CACvB,SAAU,EACV,aAAc,EAAS,SAAS,IAAI,EAAS,KAAK,EAClD,cAAe,EAAS,SAAS,IAAI,EAAS,KAAK,CACrD,CAAC,CACH,OAEO,cAAa,CAClB,WACA,UAIK,CACL,MAAO,MAAK,YAAY,CACtB,UAAW,EACX,aAAc,EAAS,SAAS,IAAI,EAAS,KAAK,EAClD,cAAe,EAAS,SAAS,IAAI,EAAS,KAAK,CACrD,CAAC,CACH,OAEO,cAAa,CAClB,WACA,eACA,iBAKK,CACL,GAAM,GAAY,EAAS,IAAI,CAAa,EACtC,EAAc,EAAa,IAAI,CAAQ,EAE7C,MADkB,GAAU,IAAI,CAAW,CAE7C,OACO,aAAY,CACjB,YACA,eACA,iBAKK,CACL,GAAM,GAAY,EAAa,IAAI,CAAS,EACtC,EAAc,EAAc,IAAI,CAAS,EAE/C,MADiB,IAAU,EAAW,CAAW,CAEnD,CACF,EEnNA,OAAe,oBACf,GAAoB,yBAMb,oBAA8B,GAAU,OACtC,wBAAuB,CAC5B,WACA,WACA,YAKU,CACV,MAAO,IAAI,YAAQ,EAAS,SAAS,SAAS,CAAC,EAAE,IAAI,EAAS,SAAS,SAAS,CAAC,EAAE,IAAI,IAAO,GAAW,EAAS,CACpH,OACO,wBAAuB,CAC5B,IACA,IACA,WACA,YAMU,CACV,MAAO,IAAI,YAAQ,EAAE,SAAS,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,EAAE,IAAI,IAAO,GAAW,EAAS,CACpF,OACO,cAAa,CAClB,WACA,WACA,YAKU,CACV,MAAO,IAAI,YAAQ,EAAS,SAAS,SAAS,CAAC,EAAE,IAAI,EAAS,SAAS,SAAS,CAAC,EAAE,IAAI,IAAO,GAAW,EAAS,CACpH,OACO,iBAAgB,CACrB,SACA,YACA,oBACA,mBACA,aACA,WACA,YASU,CACV,MAAO,IAAI,YAAQ,EAAiB,IAAI,CAAU,EAAE,SAAS,CAAC,EAC3D,IAAI,EAAO,IAAI,CAAS,EAAE,IAAI,CAAiB,EAAE,SAAS,CAAC,EAC3D,IAAI,IAAO,GAAW,EAAS,CACpC,OACO,qBAAoB,CACzB,WACA,WACA,YAKU,CACV,GAAM,GAAe,EAAS,WAAW,IAAI,EAAS,KAAK,EACrD,EAAkB,EAAS,kBAAkB,IAAI,EAAS,KAAK,EAErE,MAAO,IAAI,YAAQ,EAAS,SAAS,IAAI,EAAS,KAAK,EAAE,IAAI,CAAe,EAAE,SAAS,CAAC,EACrF,IAAI,EAAS,SAAS,IAAI,EAAS,KAAK,EAAE,IAAI,CAAY,EAAE,SAAS,CAAC,EACtE,IAAI,IAAO,GAAW,EAAS,CACpC,OAEO,cAAa,CAClB,SACA,mBACA,YACA,oBACA,cAOC,CACD,GAAM,GAAoB,EAAO,IAAI,CAAiB,EAEtD,GAAI,EAAkB,IAAI,GAAI,YAAG,CAAC,CAAC,EAAG,KAAM,OAAM,iBAAiB,EAEnE,GAAM,GAAc,GAAI,YAAG,CAAC,EAAE,IAAI,CAAgB,EAAE,IAAI,CAAU,EAE5D,EAAkB,AADN,EAAiB,IAAI,CAAiB,EACtB,IAAI,CAAW,EAIjD,GAAI,EAAgB,GAAG,GAAI,YAAG,CAAC,CAAC,GAAK,EAAiB,GAAG,GAAI,YAAG,CAAC,CAAC,EAAG,KAAM,OAAM,iBAAiB,EAElG,MAAO,CAAE,EAAG,EAAiB,EAAG,EAAkB,EAAG,CAAgB,CACvE,OAEO,YAAW,CAChB,WACA,UAIK,CACL,MAAO,MAAK,aAAa,CAAE,SAAU,EAAQ,UAAW,EAAS,SAAU,WAAY,EAAS,QAAS,CAAC,CAC5G,OAEO,aAAY,CACjB,WACA,UAIK,CACL,MAAO,MAAK,YAAY,CAAE,UAAW,EAAQ,UAAW,EAAS,SAAU,WAAY,EAAS,QAAS,CAAC,CAC5G,OAEO,aAAY,CACjB,WACA,UAIK,CACL,MAAO,MAAK,aAAa,CAAE,SAAU,EAAQ,UAAW,EAAS,SAAU,WAAY,EAAS,QAAS,CAAC,CAC5G,OAEO,cAAa,CAClB,WACA,UAIK,CACL,MAAO,MAAK,YAAY,CAAE,UAAW,EAAQ,UAAW,EAAS,SAAU,WAAY,EAAS,QAAS,CAAC,CAC5G,OAEO,cAAa,CAAE,WAAU,YAAW,cAA+D,CAGxG,MADkB,AADA,GAAW,IAAI,CAAQ,EACb,IAAI,CAAS,CAE3C,OAEO,aAAY,CAAE,YAAW,YAAW,cAAgE,CACzG,GAAM,GAAY,EAAU,IAAI,CAAS,EAEzC,MADiB,IAAU,EAAW,CAAU,CAElD,CACF,EChKA,OAAe,oBACf,GAAoB,yBCDpB,OAAe,oBACf,GAAoB,yBAGb,QAAiB,OAGf,YAAW,EAAkB,CAClC,MAAO,IAAI,YAAQ,EAAE,EAAE,IAAI,CAAQ,CACrC,OAEO,UAAS,CAAC,WAAU,WAAU,YAA8D,CAIjG,MAFc,AADY,IAAI,YAAQ,EAAS,SAAS,CAAC,EAAE,IAAI,KAAK,IAAI,EACxC,IAAI,KAAK,WAAW,CAAQ,CAAC,EAAE,IAAI,KAAK,WAAW,CAAQ,CAAC,CAG9F,OAEO,aAAY,CAAC,QAAO,WAAU,YAAiE,CACpG,GAAM,GAAoB,EAAM,IAAI,KAAK,WAAW,CAAQ,CAAC,EAAE,IAAI,KAAK,WAAW,CAAQ,CAAC,EAE5F,MADiB,IAAI,YAAG,EAAkB,IAAI,KAAK,IAAI,EAAE,QAAQ,CAAC,CAAC,CAErE,CACF,EAlBS,AADF,GACE,KAAO,GAAI,YAAQ,GAAI,YAAG,CAAC,EAAE,KAAK,EAAE,EAAE,SAAS,CAAC,EDKlD,oBAA+B,GAAU,OACvC,wBAAuB,CAC5B,WACA,WACA,YAKU,CACV,MAAO,IAAI,YAAQ,CAAC,CACtB,OACO,wBAAuB,CAC5B,IACA,IACA,WACA,YAMU,CACV,MAAO,IAAI,YAAQ,CAAC,CACtB,OACO,cAAa,CAClB,WACA,WACA,YAKU,CACV,MAAO,IAAI,YAAQ,EAAS,SAAS,IAAI,EAAS,KAAK,EAAE,SAAS,CAAC,EAChE,IAAI,GAAW,IAAI,EACnB,IAAI,IAAO,GAAW,EAAS,CACpC,OACO,iBAAgB,CACrB,SACA,YACA,oBACA,mBACA,aACA,WACA,YASU,CACV,MAAO,IAAI,YAAQ,EAAiB,IAAI,CAAU,EAAE,SAAS,CAAC,EAC3D,IAAI,EAAO,IAAI,CAAS,EAAE,IAAI,CAAiB,EAAE,SAAS,CAAC,EAC3D,IAAI,IAAO,GAAW,EAAS,CACpC,OACO,qBAAoB,CACzB,WACA,WACA,YAKU,CACV,GAAM,GAAe,EAAS,WAAW,IAAI,EAAS,KAAK,EACrD,EAAkB,EAAS,kBAAkB,IAAI,EAAS,KAAK,EAErE,MAAO,IAAI,YAAQ,EAAS,SAAS,IAAI,EAAS,KAAK,EAAE,IAAI,CAAe,EAAE,SAAS,CAAC,EACrF,IAAI,EAAS,SAAS,IAAI,EAAS,KAAK,EAAE,IAAI,CAAY,EAAE,SAAS,CAAC,EACtE,IAAI,IAAO,GAAW,EAAS,CACpC,OAEO,cAAa,CAClB,SACA,mBACA,YACA,oBACA,cAOC,CACD,GAAM,GAAoB,EAAO,IAAI,CAAiB,EACtD,GAAI,EAAkB,IAAI,GAAI,YAAG,CAAC,CAAC,EAAG,KAAM,OAAM,6BAA6B,EAC/E,GAAM,GAAc,EAAiB,IAAI,GAAI,YAAG,CAAC,CAAC,EAAE,IAAI,CAAU,EAG5D,EAAkB,AAFN,EAAiB,IAAI,GAAI,YAAG,CAAC,CAAC,EAAE,IAAI,CAAiB,EAErC,IAAI,CAAW,EAI3C,EAAmB,EAAgB,IAAI,CAAe,EACtD,EAAI,EAAiB,IAAI,GAAI,YAAG,CAAC,CAAC,EAAE,IAAI,EAAG,EAAE,IAAI,CAAgB,EAEvE,GAAI,CAAC,EAAE,GAAG,GAAI,YAAG,CAAC,CAAC,EAAG,KAAM,OAAM,aAAa,EAE/C,GAAI,CAAC,GAAO,GAAG,CAAC,EAAG,KAAM,OAAM,mBAAmB,EAElD,GAAI,EAAE,GAAG,GAAI,YAAG,CAAC,CAAC,GAAK,EAAgB,GAAG,GAAI,YAAG,CAAC,CAAC,EAAG,KAAM,OAAM,iBAAiB,EAEnF,MAAO,CAAE,IAAG,EAAG,GAAI,YAAG,CAAC,EAAG,EAAG,CAAgB,CAC/C,OAEO,YAAW,CAChB,WACA,UAIK,CACL,GAAM,GAAW,EAAS,MAAM,IAAI,CAAM,EACpC,EAAiB,GAAI,YAAG,CAAC,EAAE,IAAI,CAAQ,EAAE,IAAI,EAAG,EAAE,IAAI,EAAS,QAAQ,EAI7E,MAFkB,AADD,IAAI,YAAG,GAAI,YAAQ,EAAe,SAAS,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,EACrD,IAAI,EAAS,KAAK,CAG/C,OAEO,aAAY,CACjB,WACA,UAIK,CACL,GAAM,GAAU,EAAS,MAAM,IAAI,CAAM,EACnC,EAAiB,EAAQ,IAAI,CAAO,EAE1C,MAAO,AADU,IAAU,EAAS,SAAS,IAAI,CAAc,EAAG,GAAI,YAAG,CAAC,EAAE,IAAI,EAAG,CAAC,EACpE,IAAI,EAAS,KAAK,CACpC,OAEO,aAAY,CACjB,WACA,UAIK,CACL,GAAM,GAAU,EAAS,MAAM,IAAI,CAAM,EACnC,EAAiB,EAAQ,IAAI,CAAO,EACpC,EAAW,GAAU,EAAS,SAAS,IAAI,CAAc,EAAG,GAAI,YAAG,CAAC,EAAE,IAAI,EAAG,CAAC,EACpF,MAAO,GAAS,MAAM,IAAI,CAAQ,CACpC,OAEO,cAAa,CAClB,WACA,UAIK,CACL,GAAM,GAAO,EAAS,MAAM,IAAI,CAAM,EAChC,EAAiB,GAAI,YAAG,CAAC,EAAE,IAAI,CAAI,EAAE,IAAI,EAAG,EAAE,IAAI,EAAS,QAAQ,EAEnE,EAAW,GAAI,YAAG,GAAI,YAAQ,EAAe,SAAS,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,EAIhF,MAFiB,GAAS,MAAM,IAAI,CAAQ,CAG9C,CACF,EJ9JO,YAAY,OACV,6BAA4B,CACjC,YACA,aACA,YAQE,CACF,MAAO,MAAK,wBAAwB,CAClC,YACA,aACA,OAAQ,EAAS,OACjB,iBAAkB,EAAS,kBAC3B,UAAW,EAAS,WACpB,kBAAmB,EAAS,gBAAgB,kBAC5C,WAAY,EAAS,WACrB,SAAU,EAAS,cACnB,SAAU,EAAS,aACrB,CAAC,CACH,OACO,yBAAwB,CAC7B,YACA,aACA,SACA,mBACA,YACA,oBACA,aACA,WACA,YAcE,CACF,GAAI,EAAa,EAAG,KAAM,OAAM,iBAAiB,EAEjD,GAAM,GAAQ,KAAK,SAAS,CAAS,EAC/B,EAAY,EAAM,aAAa,CAAE,SAAQ,mBAAkB,YAAW,oBAAmB,YAAW,CAAC,EACrG,EAAY,EAAM,uBAAuB,OAAK,GAAL,CAAgB,WAAU,UAAS,EAAC,EAE7E,EAAc,EAAiB,IAAI,GAAI,YAAG,EAAa,CAAC,CAAC,EAEzD,EAAO,GAAI,YAAG,CAAC,EAEf,EAA8D,CAAC,CAAE,MAAO,EAAW,gBAAiB,CAAE,CAAC,EACvG,CAAE,IAAG,KAAM,EACb,EAAQ,EACR,EAAQ,EACZ,OAAS,GAAI,EAAG,EAAI,EAAY,IAAK,CACnC,GAAM,GAAU,IAAM,EAAa,EAAI,EAAc,EAAiB,IAAI,CAAK,EACzE,EAAU,KAAK,WAAW,CAC9B,SAAU,CACR,SAAU,EACV,SAAU,EACV,QACA,QACA,kBAAmB,EACnB,WAAY,CACd,EACA,UACA,gBAAiB,EACjB,gBAAiB,EACjB,YACA,aAAc,EACd,eAAgB,EAChB,mBAAoB,OACpB,KAAM,CACR,CAAC,EACD,EAAQ,EAAM,IAAI,EAAQ,QAAQ,MAAM,EACxC,EAAQ,EAAM,IAAI,EAAQ,OAAO,EAEjC,GAAM,GAAe,KAAK,SAAS,CACjC,SAAU,CAAE,SAAU,EAAG,SAAU,EAAG,QAAO,OAAM,EACnD,WACA,WACA,WACF,CAAC,EACD,EAAa,KAAK,CAChB,MAAO,EACP,gBAAiB,GAAI,YAAQ,EAAM,SAAS,CAAC,EAAE,IAAI,IAAM,CAAQ,EAAE,SAAS,CAC9E,CAAC,CACH,CAEA,MAAO,EACT,OAEO,wBAAuB,CAC5B,WACA,WACA,WACA,aAMU,CAEV,MAAO,AADO,MAAK,SAAS,CAAS,EACxB,uBAAuB,CAAE,WAAU,WAAU,UAAS,CAAC,CACtE,OACO,wBAAuB,CAC5B,IACA,IACA,WACA,WACA,aAOU,CAEV,MAAO,AADO,MAAK,SAAS,CAAS,EACxB,uBAAuB,CAAE,IAAG,IAAG,WAAU,UAAS,CAAC,CAClE,OACO,UAAS,CACd,WACA,YACA,WACA,YAMU,CAEV,MAAO,AADO,MAAK,SAAS,CAAS,EACxB,aAAa,CAAE,WAAU,WAAU,UAAS,CAAC,CAC5D,OACO,aAAY,CACjB,WACA,YACA,WACA,YAMU,CAEV,MAAO,AADO,MAAK,SAAS,CAAS,EACxB,aAAa,CAAE,WAAU,WAAU,UAAS,CAAC,CAC5D,OACO,qBAAoB,CACzB,WACA,YACA,WACA,YAMU,CAEV,MAAO,AADO,MAAK,SAAS,CAAS,EACxB,oBAAoB,CAAE,WAAU,WAAU,UAAS,CAAC,CACnE,OAEO,YAAW,CAChB,SACA,mBACA,YACA,oBACA,WACA,SACA,eASO,CACP,GAAI,OAAO,CAAQ,IAAM,EAAG,KAAM,OAAM,cAAc,EAEtD,GAAI,AADe,EAAO,IAAI,EAAO,WAAW,EAAE,IAAI,EAA0B,EACjE,GAAG,CAAiB,EAAG,KAAM,OAAM,uCAAuC,EAEzF,GAAI,EAAO,GAAG,EAAO,WAAW,IAAI,GAAI,YAAG,IAAM,CAAQ,CAAC,CAAC,EAAG,KAAM,OAAM,sBAAsB,EAEhG,GAAM,GAAW,EAAO,IAAI,EAAO,YAAY,EAAE,IAAI,EAA0B,EAC/E,GAAI,EAAU,GAAG,CAAQ,EAAG,KAAM,OAAM,eAAe,EACvD,GAAI,EAAiB,GAAG,EAAO,eAAe,EAAG,KAAM,OAAM,wCAAwC,EAErG,GAAM,GAAgB,EAAO,IAAI,CAAS,EAAE,IAAI,CAAiB,EAC3D,EAAmB,EAAO,IAAI,EAAO,eAAe,EAAE,IAAI,EAA0B,EAE1F,GAAI,EAAc,GAAG,CAAgB,EAAG,KAAM,OAAM,gCAAgC,EAEpF,GAAM,GAAiB,EAAO,IAAI,CAAS,EAAE,IAAI,CAAiB,EAC5D,EAAY,GAAI,YAAG,GAAI,YAAQ,EAAe,IAAI,CAAgB,EAAE,SAAS,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,EAEvG,GAAI,IAAgB,MAAO,CACzB,GAAM,GAAY,GAAI,YAAG,EAAE,EAAE,IAAI,GAAI,YAAG,CAAQ,CAAC,EACjD,GAAI,EAAU,IAAI,CAAS,EAAG,KAAM,OAAM,wBAAwB,CACpE,SAAW,IAAgB,OAAQ,CACjC,GAAM,GAAY,GAAI,YAAG,GAAG,EAC5B,GAAI,EAAU,IAAI,CAAS,EAAG,KAAM,OAAM,wBAAwB,CACpE,KACE,MAAM,OAAM,oBAAoB,CAEpC,OAKO,YAAW,CAChB,WACA,UACA,kBACA,kBACA,YACA,eACA,iBACA,qBACA,QAYiB,CACjB,GAAM,GAAU,KAAK,aAAa,CAAE,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,EAC9F,EAAY,KAAK,aAAa,CAAE,OAAQ,EAAS,SAAQ,CAAC,EAE1D,EAAiB,EAAQ,IAAI,CAAS,EAEtC,EAAQ,KAAK,SAAS,CAAS,EAE/B,EAAW,EAAM,WAAW,CAAE,WAAU,OAAQ,CAAe,CAAC,EAEhE,EAAmB,EAAS,WAAW,IAAI,EAAS,KAAK,EAE3D,EACA,EACA,EACJ,GAAI,EAAS,GAAG,CAAgB,EAAG,CACjC,EAAU,EAEV,GAAM,GAAiB,EAAM,YAAY,CACvC,WACA,OAAQ,CACV,CAAC,EAED,EAAc,KAAK,gBAAgB,CAAE,cAAe,EAAgB,SAAQ,CAAC,EAC7E,EAAW,EAAY,IAAI,CAAc,CAC3C,KACE,GAAU,EACV,EAAc,EACd,EAAW,EAGb,GAAM,GAAW,KAAK,SAAS,CAAE,WAAU,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,EAE3G,MAAO,CACL,QAAS,GAA4B,EAAS,EAAoB,CAAI,EACtE,QAAS,EACT,UACF,CACF,OAKO,aAAY,CACjB,WACA,UACA,kBACA,kBACA,YACA,eACA,iBACA,qBACA,QAYiB,CACjB,GAAM,GAAmB,EAAS,WAAW,IAAI,EAAS,KAAK,EAEzD,EAAa,GAA6B,EAAS,EAAoB,CAAI,EAC7E,EAAc,EAAW,IAAM,EAAW,OAAO,IAAI,EAAW,GAAG,EAAI,EAAW,OACtF,AAAI,EAAQ,GAAG,CAAgB,GAC7B,GAAc,GAIhB,GAAM,GAAmB,AADX,KAAK,SAAS,CAAS,EACN,YAAY,CAAE,WAAU,OAAQ,CAAY,CAAC,EAEtE,EAAe,KAAK,aAAa,CAAE,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,EAEnG,EAAU,KAAK,gBAAgB,CAAE,cAAe,EAAkB,QAAS,CAAa,CAAC,EACzF,EAAW,EAAQ,IAAI,CAAgB,EAEvC,EAAW,KAAK,SAAS,CAAE,WAAU,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,EAE3G,MAAO,CAAE,QAAS,EAAY,UAAS,UAAS,CAClD,OAEO,aAAY,CACjB,WACA,QAAS,EACT,kBACA,kBACA,YACA,eACA,iBACA,qBACA,QAYiB,CACjB,GAAM,GAAQ,KAAK,SAAS,CAAS,EAE/B,EAAc,GAA4B,EAAU,EAAoB,CAAI,EAC5E,EAAU,EAAY,IAAM,EAAY,OAAO,IAAI,EAAY,GAAG,EAAI,EAAY,OAElF,EAAU,EAAM,YAAY,CAAE,WAAU,OAAQ,CAAQ,CAAC,EAEzD,EAAW,KAAK,aAAa,CACjC,OAAQ,EACR,QAAS,KAAK,aAAa,CAAE,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,CAC/F,CAAC,EAEK,EAAW,KAAK,SAAS,CAAE,WAAU,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,EAE3G,MAAO,CAAE,QAAS,EAAa,QAAS,EAAQ,IAAI,CAAQ,EAAG,UAAS,CAC1E,OAEO,cAAa,CAClB,WACA,UACA,kBACA,kBACA,YACA,eACA,iBACA,qBACA,QAYiB,CACjB,GAAM,GAAe,KAAK,aAAa,CAAE,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,EAEnG,EAAoB,KAAK,gBAAgB,CAAE,cAAe,EAAS,QAAS,CAAa,CAAC,EAChG,GAAI,EAAS,MAAM,GAAG,CAAiB,EAAG,KAAM,OAAM,wBAAwB,EAE9E,GAAM,GAAW,EAAkB,IAAI,CAAO,EAGxC,EAAU,AADF,GAAM,SAAS,CAAS,EAChB,aAAa,CAAE,WAAU,OAAQ,CAAkB,CAAC,EAE1E,GAAI,EAAQ,GAAG,EAAS,KAAK,EAAG,KAAM,OAAM,EAE5C,GAAM,GAAW,KAAK,SAAS,CAAE,WAAU,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,EAE3G,MAAO,CAAE,QAAS,GAA6B,EAAS,EAAoB,CAAI,EAAG,UAAS,UAAS,CACvG,OAEO,UAAS,CACd,WACA,kBACA,kBACA,eACA,kBAOqE,CACrE,GAAM,GAAe,KAAK,aAAa,CAAE,kBAAiB,kBAAiB,eAAc,gBAAe,CAAC,EACnG,EAAc,EAAa,OAAO,EAAI,GAAI,YAAG,CAAC,EAAI,EAAS,IAAI,CAAe,EAAE,IAAI,CAAY,EAChG,EAAW,EAAa,OAAO,EAAI,GAAI,YAAG,CAAC,EAAI,EAAS,IAAI,CAAY,EAAE,IAAI,CAAY,EAC1F,EAAa,EAAa,OAAO,EAAI,GAAI,YAAG,CAAC,EAAI,EAAS,IAAI,CAAc,EAAE,IAAI,CAAY,EAE9F,EAAc,EAAS,IAAI,CAAW,EAAE,IAAI,CAAQ,EAAE,IAAI,CAAU,EAE1E,MAAO,CAAE,cAAa,WAAU,cAAa,YAAW,CAC1D,OAEO,cAAa,CAAE,SAAQ,WAA4C,CACxE,MAAO,IAAQ,EAAQ,EAAS,EAA0B,CAC5D,OACO,iBAAgB,CAAE,gBAAe,WAAmD,CACzF,GAAI,EAAQ,OAAO,EAAG,MAAO,GAE7B,GAAM,GAAY,EAAc,IAAI,EAA0B,EACxD,EAAc,GAA2B,IAAI,CAAO,EAE1D,MAAO,GAAU,IAAI,CAAW,EAAE,IAAI,GAAI,YAAG,CAAC,CAAC,EAAE,IAAI,CAAW,CAClE,OAEO,cAAa,CAClB,kBACA,kBACA,eACA,kBAMK,CAEL,GAAI,AADiB,EAAgB,IAAI,CAAe,EAAE,IAAI,CAAY,EAAE,IAAI,CAAc,EAC7E,GAAG,GAAI,YAAG,GAAS,CAAC,EAAG,KAAM,OAAM,6BAA6B,EACjF,MAAO,GAAgB,IAAI,CAAe,EAAE,IAAI,CAAY,EAAE,IAAI,CAAc,CAClF,OAEO,UAAS,EAAqC,CACnD,OAAQ,OACD,GACH,MAAO,QACJ,GACH,MAAO,QACJ,GACH,MAAO,IAEX,KAAM,OAAM,kBAAkB,CAChC,CACF,E1C9ZA,OAAoB,yBAGP,GAAyB,CACpC,aAAc,GAAI,WAAG,iBAAiB,EACtC,OAAQ,GAAI,WAAG,IAAqB,EACpC,WAAY,GAAI,WAAG,OAAmB,EACtC,kBAAmB,GAAI,WAAG,IAAc,EACxC,kBAAmB,GAAI,WAAG,GAAG,EAC7B,YAAa,GAAI,WAAG,GAAG,EACvB,aAAc,GAAI,WAAG,GAAG,EACxB,SAAU,EACV,SAAU,GAAI,WAAG,kBAAkB,EACnC,SAAU,GAAI,WAAG,aAAa,EAC9B,MAAO,GAAI,WAAG,CAAC,EACf,MAAO,GAAI,WAAG,CAAC,EACf,YAAa,GAAI,WAAG,CAAC,EACrB,WAAY,GAAI,cAAU,8CAA8C,EACxE,gBAAiB,CACf,kBAAmB,GAAI,WAAG,CAAC,EAC3B,YAAa,GAAI,WAAG,CAAC,EACrB,aAAc,GAAI,WAAG,CAAC,EACtB,UAAW,GAAI,WAAG,CAAC,EACnB,oBAAqB,GAAI,WAAG,CAAC,CAC/B,CACF,EAEM,GAAgB,GAAI,WAAG,GAAK,EAMlC,gBAA6C,GAAW,CACtD,YAAY,EAAyB,CACnC,MAAM,CAAM,CACd,MAEa,WAAW,CACtB,QAAQ,IAAI,OAAO,CACrB,MAEa,iBAAqC,EAiC/C,CAjC+C,QAChD,aAAY,GACZ,gBACA,aAAa,GAAuB,WACpC,QACA,WAAW,EACX,gBAAgB,EAChB,OACA,SACA,MACA,cACA,WACA,UACA,WAAY,EACZ,kBACA,YACA,sBACA,cACA,WACA,YACA,iBACA,WACA,iBAAiB,GACjB,sBAAsB,GACtB,eAEA,YACA,6BACA,eAAe,GA5BiC,EA6B7C,KA7B6C,EA6B7C,CA5BH,YACA,gBACA,aACA,QACA,WACA,gBACA,OACA,SACA,MACA,cACA,WACA,UACA,aACA,kBACA,YACA,sBACA,cACA,WACA,YACA,iBACA,WACA,iBACA,sBACA,eAEA,YACA,6BACA,iBAjJJ,kCAuJI,GAAM,GAAa,CAAC,EACd,EAAY,KAAK,gBAAgB,CAAQ,EAC/C,EAAgB,UAAiB,GAAoB,CAAS,EAAE,UAEhE,EAAY,CAAC,CAAC,EACV,GAAW,GAAc,QAC7B,GAAI,GAAa,EACjB,GAAI,CAAC,GAAc,EAAU,CAC3B,GAAM,IAAI,KAAM,MAAK,MAAM,WAAW,eAAe,CAAQ,EAC7D,AAAI,IAAG,GAAa,GAAgB,OAAO,GAAE,IAAI,EACnD,CAEA,AAAK,GAAY,KAAK,kBAAkB,kBAAkB,EAC1D,GAAM,GAAQ,EAAY,MACpB,EAAU,EAAY,UAGtB,CAAE,UAAW,GAAW,GAAsB,EAAW,EAAO,CAAK,EACrE,CAAE,UAAW,IAAW,GAAuB,EAAW,EAAQ,CAAK,EACvE,CAAE,UAAW,GAAW,GAAuB,EAAW,EAAQ,CAAK,EACvE,CAAE,UAAW,IAAW,GAAkB,CAAK,EAErD,QAAQ,IACN,iBAAiB,EAAM,SAAS,aAAa,EAAM,SAAS,iBAAiB,OAAc,aAAyB,EAAS,SAAS,GACxI,EAEI,EAAO,OAAS,IAAI,KAAK,kBAAkB,sCAAsC,EAChF,GAAK,KAAK,kBAAkB,sBAAsB,EAEvD,GAAM,GAAS,qBAAc,SAAd,QAAwB,GAAuB,OACxD,EAAa,qBAAc,aAAd,QAA4B,GAAuB,WAChE,GAAoB,qBAAc,oBAAd,QAAmC,GAAuB,kBAC9E,GAAoB,qBAAc,oBAAd,QAAmC,GAAI,WAAG,CAAC,EAEjE,GAAyB,EAC7B,GAAI,CAAC,EAAiB,CACpB,GAAM,IAAe,KAAM,MAAK,MAAM,WAAW,eAAe,CAAU,EAC1E,AAAK,IAAc,KAAK,kBAAkB,yBAA0B,EAAW,SAAS,CAAC,EACzF,GAAyB,GAAe,OAAO,GAAc,IAAI,EAAE,OACrE,CAGA,GAAM,IAAY,AADJ,GAAM,SAAS,EAAY,SAAS,EAC1B,aAAa,CACnC,SACA,iBAAkB,GAClB,UAAW,EACX,qBACA,WAAY,EAAY,UAC1B,CAAC,EAEK,GAA8B,CAClC,MAAO,GAAI,WAAG,GAAG,EACjB,KAAM,IACN,OAAQ,EACR,cAAe,EACf,cAAe,EACf,SACA,aACA,MAAO,GAAI,cAAU,CAAK,EAC1B,QACA,SAAU,GAAU,EACpB,SAAU,GAAU,EACpB,MAAO,GAAuB,MAC9B,MAAO,GAAuB,MAC9B,WAAY,EAAY,WACxB,YAAa,IAAgB,MAAQ,EAAI,EACzC,YAAa,GAAuB,YACpC,YAAa,GACb,aACA,WACA,UACA,SACA,QAAS,KAAK,MAAM,YACpB,qBACA,gBAAiB,CACf,qBACA,YAAa,GAAI,WAAG,CAAC,EACrB,aAAc,GAAI,WAAG,CAAC,EACtB,UAAW,GAAI,WAAG,CAAC,EACnB,oBAAqB,GAAI,WAAG,CAAC,CAC/B,EACA,gBAAiB,EAAY,EAAI,EACjC,iBAAkB,CACpB,EAEM,GAAY,GAAM,SAAS,EAAY,SAAS,EAChD,CAAE,MAAM,GAAU,aAAa,CACnC,OAAQ,GAAS,OACjB,iBAAkB,GAAS,kBAC3B,qBACA,UAAW,EAAY,YAAc,EAAI,GAAS,WAAa,GAAI,WAAG,CAAC,EACvE,WAAY,EAAY,UAC1B,CAAC,EAED,GAAI,CACF,GAAM,WAAW,CACf,OAAQ,GAAS,OACjB,iBAAkB,GAAS,kBAC3B,UAAW,GACX,qBACA,SAAU,GAAS,cACnB,OAAQ,EACR,aACF,CAAC,EACD,KAAK,SAAS,2BAA2B,CAC3C,OAAS,GAAP,CACA,KAAK,kBAAkB,oCAAoC,GAAE,SAAS,CACxE,CAEA,EAAU,eAAe,CACvB,aAAc,CACZ,EACI,GACE,EACA,UAAY,KAAK,MAAM,YACvB,KAAK,MAAM,YACX,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EAEA,EACA,EACA,EACA,GAAO,WAEP,CACE,KACE,IAAY,EACR,gBACA,IAAY,EACZ,aACA,IAAY,EACZ,cACA,gBACN,aACA,cACA,SACA,oBACF,EACA,GACA,qBAAc,cAAd,QAA6B,GAAI,WAAG,CAAC,EACrC,qBAAc,eAAd,QAA8B,GAAI,WAAG,CAAC,EACtC,EACA,CACF,EACA,GACE,EACA,UAAY,KAAK,MAAM,YACvB,KAAK,MAAM,YACX,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GAEA,EACA,EACA,EACA,GAAO,WAEP,CACE,KACE,IAAY,EACR,gBACA,IAAY,EACZ,aACA,IAAY,EACZ,cACA,gBACN,aACA,cACA,SACA,oBACF,EACA,GACA,qBAAc,cAAd,QAA6B,GAAI,WAAG,CAAC,EACrC,qBAAc,eAAd,QAA8B,GAAI,WAAG,CAAC,EACtC,CACF,CACN,CACF,CAAC,EAED,GAAM,IAAQ,EAAY,KAAM,MAAK,MAAM,WAAW,aAAa,EAAI,OACjE,GAAM,EACR,CACE,MAAO,OAAO,oBAAO,QAAS,CAAC,EAC/B,WAAY,OAAO,qBAA4B,WAAW,aAAvC,QAAqD,CAAC,EACzE,uBAAwB,qBAA4B,wBAA5B,QAAqD,CAC/E,EACA,OAEA,GAA2B,CAC7B,QAAS,CACP,OAAQ,GAAI,WAAG,CAAC,EAChB,IAAK,OACL,eAAgB,MAClB,EACA,QAAS,GAAI,WAAG,CAAC,EACjB,SAAU,CACR,YAAa,GAAI,WAAG,CAAC,EACrB,SAAU,GAAI,WAAG,CAAC,EAClB,YAAa,GAAI,WAAG,CAAC,EACrB,WAAY,GAAI,WAAG,CAAC,CACtB,CACF,EACI,GAEJ,GADI,WAAc,QAAQ,EAAU,eAAe,CAAE,QAAS,CAAa,CAAC,EACxE,CAAC,EAAa,WAAY,CAE5B,GAAM,CAAE,WAAS,YAAY,KAAM,MAAK,SAAS,CAC/C,YACA,gBACA,aAAc,EAAY,wBAAwB,OAClD,QACA,QACA,YACA,YACA,iBACA,aAAc,EAAa,aAC3B,iBAAkB,EAAa,iBAC/B,aACA,gBAAiB,GACjB,WACA,iBACA,sBACA,eAAgB,CAAC,GACjB,mBAAoB,GAChB,CACE,2BAA4B,EAC5B,0BAA2B,EAC3B,eAAgB,OAAO,CAAC,EACxB,iBAAkB,GAClB,iBAAkB,EACpB,EACA,OACJ,WAAY,EACd,CAAC,EAED,QAAQ,IAAI,QAAS,EAAG,EACxB,QAAQ,IAAI,+BAA+B,EAC3C,OAAW,MAAU,GAAS,CAE5B,GAAM,CAAE,QAAS,GAAe,YAAY,KAAM,MAAK,SAAS,CAC9D,YACA,gBACA,aAAc,EAAY,wBAAwB,OAClD,QACA,QACA,YACA,UAAW,GAAO,OAClB,iBACA,aAAc,EAAa,aAC3B,iBAAkB,EAAa,iBAC/B,aACA,gBAAiB,GACjB,WACA,UACA,iBACA,sBACA,eAAgB,CAAC,GACjB,mBAAoB,GAChB,CACE,2BAA4B,EAC5B,0BAA2B,EAC3B,eAAgB,OAAO,CAAC,EACxB,iBAAkB,GAClB,iBAAkB,EACpB,EACA,OACJ,WAAY,EACd,CAAC,EACD,EAAI,KAAK,OACJ,GAAc,WADV,CAEP,UAAW,KAAK,MAAM,mBACxB,EAAC,CACH,CAEA,EAAU,eAAe,KAAK,GAAQ,UAAW,EACjD,GAAW,KAAK,IAChB,GACG,MAAK,MAAM,UAAY,UAAY,IAAc,IAAqB,EAAa,iBAChF,CAAC,GAAQ,gBAAgB,EAAE,EAC3B,MACR,CAIA,MAAI,KAAc,EAChB,SAAQ,IAAI,YAAY,EAajB,CACL,GAAI,KAbkB,GAAU,iBAAiB,CACjD,sBACA,YACA,YACA,QAAS,OACJ,IADI,CAEP,QACF,EACF,CAAC,EAMC,IAAK,CACP,GAIF,SAAQ,IAAI,eAAe,EAYpB,CACL,GAAI,KAZkB,GAAU,eAAe,CAC/C,sBACA,YACA,YACA,QAAS,OACJ,IADI,CAEP,QACF,EACF,CAAC,EAKC,IAAK,CACP,EACF,MAEa,kBAAsC,CACjD,YAAY,GACZ,gBACA,QACA,eAAe,mBACf,QAAQ,cACR,SAAU,EAEV,WAAY,EACZ,kBAEA,YACA,sBACA,cACA,WACA,YACA,eAAgB,EAChB,WACA,SACA,eAAe,GAAI,WAAG,CAAC,EACvB,mBAEA,iBAAiB,GACjB,sBAAsB,GACtB,aAAa,GACb,mBAAoB,EACpB,iBAAiB,IACwC,CAjgB7D,WAkgBI,AAAI,EAAU,IAAI,GAAI,WAAG,CAAC,CAAC,GAAG,KAAK,kBAAkB,0BAA2B,EAAU,SAAS,CAAC,EAEpG,GAAM,GAAY,EAAS,KAAK,sBAAsB,EAAO,MAAO,EAAO,MAAM,SAAS,EAAI,KAAK,gBAAgB,CAAQ,EAKrH,CAAE,UAAW,GAAW,GAAsB,EAAW,EAAO,CAAK,EAC3E,EAAgB,UAAiB,GAAoB,CAAS,EAAE,UAEhE,GAAI,GAAqB,EACzB,GAAI,CAAC,EAEH,GADA,QAAQ,IAAI,oBAAqB,CAAc,EAC1C,EAUH,QAAQ,IAAI,0BAA2B,uBAAqB,EAC5D,EAAe,4BAXQ,CACvB,QAAQ,IAAI,wBAAyB,CAAkB,EACvD,GAAM,IAAW,KAAM,MAAK,MAAM,WAAW,eAAe,CAAK,EACjE,GAAI,IAAY,GAAS,MAAM,OAAO,uBAAqB,EAAG,CAC5D,QAAQ,IAAI,0BAA2B,CAAc,EACrD,EAAe,GAAS,MACxB,GAAM,IAAa,iBAAW,EAAO,GAAU,CAAY,EAC3D,EAAqB,2BAAqB,EAAU,GAAK,MAC3D,CACF,CAMF,GAAM,GAAoB,KAAK,MAAM,QAAQ,0BAA0B,EAAO,CAAY,EACtF,EAAsC,EACtC,KAAK,MAAM,QAAQ,0BAA0B,EAAO,kBAAgB,EACpE,KACE,EAAqB,EAAM,OAAO,aAAW,EA+BnD,GA7BA,EAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EACA,CACF,EACA,GAAI,EACA,CACE,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EACA,kBACF,EACA,iBAAc,SAAS,CACrB,WAAY,KAAK,MAAM,YACvB,SAAU,EACV,SAAU,OAAO,EAAU,SAAS,CAAC,CACvC,CAAC,EACD,kCAA4B,CAAkB,CAChD,EACA,CAAC,CACP,CACF,CAAC,EAEG,CAAC,EAAY,CACf,GAAM,CAAE,QAAS,GAAqB,kBAAmB,IACvD,KAAM,MAAK,MAAM,QAAQ,wBAAwB,CAC/C,KAAM,EACN,MAAO,KAAK,MAAM,YAClB,WAAY,EACR,CACE,MAAO,KAAK,MAAM,YAClB,OAAQ,CACV,EACA,OACJ,iBAAkB,CAAC,EACnB,mBAAoB,EACpB,eAAgB,EAAqB,GAAQ,EAC7C,qBACF,CAAC,EACH,AAAI,IAAqB,GAAoB,IAC7C,EAAU,eAAe,IAA6B,CAAC,CAAC,CAC1D,CACA,AAAI,IAAsB,QACxB,KAAK,kBACH,sBAAsB,EAAM,SAAS,oBACrC,gBACA,KAAK,MAAM,QAAQ,aACrB,EACF,GAAI,GAAW,EACf,GAAI,CAAC,EAAU,CACb,GAAM,IAAW,KAAM,MAAK,MAAM,WAAW,eAAe,EAAQ,CAAE,WAAY,WAAY,CAAC,EAC/F,AAAK,IAAU,KAAK,kBAAkB,qBAAsB,EAAO,SAAS,CAAC,EAC7E,EAAW,GAAc,OAAO,GAAU,IAAI,CAChD,CAEA,GAAI,GAAa,EACX,EAAU,KAAM,IACpB,KAAK,MAAM,WACX,CAAC,EAAa,OAAY,EAAS,SAAU,EAAS,UAAU,EAC7D,OAAO,OAAO,EACd,IAAI,AAAC,IAAS,EAAE,OAAQ,EAAK,EAAE,CACpC,EACA,GAAI,CAAC,EAAY,CACf,GAAM,IAAO,EAAQ,KAAK,AAAC,IAAM,GAAE,OAAO,OAAO,EAAU,QAAQ,CAAC,EACpE,AAAI,EAAC,IAAQ,CAAC,GAAK,cAAa,KAAK,kBAAkB,qBAAsB,EAAS,SAAS,SAAS,CAAC,EACzG,EAAa,GAAgB,OAAO,GAAM,YAAa,IAAI,CAC7D,CACA,GAAM,GAAe,EAAQ,KAAK,AAAC,IAAM,GAAE,OAAO,OAAO,EAAU,UAAU,CAAC,EAC9E,AAAI,EAAC,GAAgB,CAAC,EAAa,cACjC,KAAK,kBAAkB,4BAA6B,EAAS,SAAS,SAAS,CAAC,EAClF,GAAM,GAAe,GAAe,OAAO,EAAc,YAAa,IAAI,EAC1E,EAAkB,GAAmB,EAAa,QAElD,GAAM,GAAmB,GAAM,WAAW,CACxC,WACA,QAAS,EACT,gBAAiB,EAAW,aAC5B,kBACA,UAAW,EAAW,UACtB,eACA,eAAgB,EAAa,eAC7B,qBACA,KAAM,KAAM,MAAK,MAAM,WAAW,QAAQ,CAC5C,CAAC,EAEK,EAAiB,GAAI,YAAQ,EAAiB,QAAQ,OAAO,SAAS,CAAC,EAAE,IAC7E,QAAiB,QAAQ,MAAzB,cAA8B,aAA9B,OAA4C,CAC9C,EAEM,GAAa,EACf,GAAI,YAAQ,GAAc,IAAI,CAAQ,EAAE,SAAS,EAAI,GAAc,SAAS,CAAC,EAAE,UAAU,EAAG,CAAC,EAC7F,GAAI,YAAQ,CAAC,EAEX,EACJ,UACC,EACG,GAAI,WAAG,EAAe,IAAI,EAAU,EAAE,QAAQ,CAAC,CAAC,EAChD,EAAiB,QAAQ,OAAO,IAAI,MAAiB,QAAQ,MAAzB,QAAgC,GAAI,WAAG,CAAC,CAAC,EAEnF,AAAI,EAAiB,QAAQ,GAAG,CAAS,GACvC,QAAQ,IACN,WAAW,EAAM,SAAS,uBAAuB,EAAiB,QAAQ,SAAS,YAAY,EAAM,SAAS,aAAa,EAAiB,QAAQ,SAAS,GAC/J,EAGF,GAAM,IAAW,EAAmB,GAAc,EAAkB,EAAO,kBAAgB,EAAE,UAAY,OACzG,MAAI,KACF,EAAU,eAAe,CACvB,aAAc,CACZ,wDAAkD,KAAK,MAAM,YAAa,GAAU,EAAmB,CAAK,CAC9G,CACF,CAAC,EAGH,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,KAAK,MAAM,YACX,EACA,EAAS,SACT,EAAS,WACT,EACA,EACA,EACA,EAAS,OACT,EAAS,OACT,EACA,EACA,EACA,mBAEA,GAAoB,EAAW,EAAS,WAAY,CAAK,EAAE,UAC3D,GAAmB,EAAW,EAAS,QAAS,CAAK,EAAE,UAEvD,EAAiB,QAAQ,GAAG,CAAS,EAAI,EAAiB,QAAU,EACpE,EACA,EACA,EACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAgC,CAC/C,YACA,QAAS,OACJ,GADI,CAEP,iBAAkB,EAClB,oBAAqB,GAAI,YAAQ,EAAe,SAAS,CAAC,CAC5D,EACF,CAAC,CACH,MAEa,UAA8B,CACzC,YAAY,GACZ,gBACA,QACA,eAAe,mBACf,QAAQ,cACR,SAAU,EAEV,WAAY,EACZ,kBACA,YACA,sBACA,cACA,WACA,YACA,eAAgB,EAChB,WAEA,eAAe,GAAI,WAAG,CAAC,EACvB,mBACA,SACA,iBAAiB,GACjB,sBAAsB,GACtB,aAAa,GACb,mBAAoB,EACpB,iBAAiB,IACwC,CAhuB7D,YAiuBI,AAAI,EAAU,IAAI,GAAI,WAAG,CAAC,CAAC,GAAG,KAAK,kBAAkB,0BAA2B,EAAU,SAAS,CAAC,EACpG,GAAM,GAAY,EAAS,KAAK,sBAAsB,EAAO,MAAO,EAAO,MAAM,SAAS,EAAI,KAAK,gBAAgB,CAAQ,EACrH,CAAE,UAAW,GAAW,GAAsB,EAAW,EAAO,CAAK,EAC3E,EAAgB,UAAiB,GAAoB,CAAS,EAAE,UAEhE,GAAI,GAAqB,EACzB,GAAI,CAAC,EAEH,GADA,QAAQ,IAAI,oBAAqB,CAAc,EAC1C,EAUH,QAAQ,IAAI,iBAAkB,uBAAqB,EACnD,EAAe,4BAXQ,CACvB,QAAQ,IAAI,wBAAyB,CAAkB,EACvD,GAAM,IAAW,KAAM,MAAK,MAAM,WAAW,eAAe,CAAK,EACjE,GAAI,IAAY,GAAS,MAAM,OAAO,uBAAqB,EAAG,CAC5D,QAAQ,IAAI,cAAe,EAAQ,EACnC,EAAe,GAAS,MACxB,GAAM,IAAa,iBAAW,EAAO,GAAU,CAAY,EAC3D,EAAqB,2BAAqB,EAAU,GAAK,MAC3D,CACF,CAMF,GAAM,GAAoB,EACtB,KAAK,MAAM,QAAQ,iCAAiC,EAAO,MAAM,UAAW,EAAO,CAAY,EAC/F,KAAK,MAAM,QAAQ,0BAA0B,EAAO,CAAY,EAEhE,EAAsC,EAEtC,EACI,KAAK,MAAM,QAAQ,iCAAiC,EAAO,MAAM,UAAW,EAAO,kBAAgB,EACnG,KAAK,MAAM,QAAQ,0BAA0B,EAAO,kBAAgB,EACxE,KACE,EAAqB,EAAM,OAAO,aAAW,EAEnD,QAAQ,IAAI,sBAAuB,CAAiB,EACpD,QAAQ,IAAI,sBAAuB,CAAiB,EAEpD,GAAM,GAAM,CACR,wDACE,kBAAQ,MAAM,YAAa,KAAK,MAAM,YACtC,EACA,kBAAQ,MAAM,YAAa,KAAK,MAAM,YACtC,EACA,CACF,EACA,GAAI,EACA,CACE,wDACE,kBAAQ,MAAM,YAAa,KAAK,MAAM,YACtC,EACA,kBAAQ,MAAM,YAAa,KAAK,MAAM,YACtC,EACA,kBACF,EACA,iBAAc,SAAS,CACrB,WAAY,kBAAQ,MAAM,YAAa,KAAK,MAAM,YAClD,SAAU,EACV,SAAU,OAAO,EAAU,SAAS,CAAC,CACvC,CAAC,EACD,kCAA4B,CAAkB,CAChD,EACA,CAAC,CACP,EAoBF,GANA,QAAQ,IAAI,eAAgB,CAAG,EAE/B,EAAU,eAAe,CACvB,aAAc,CAChB,CAAC,EAEG,CAAC,EAAY,CACf,GAAM,CAAE,QAAS,GAAqB,kBAAmB,IACvD,KAAM,MAAK,MAAM,QAAQ,wBAAwB,CAC/C,KAAM,EACN,MAAO,KAAK,MAAM,YAClB,WAAY,EACR,CACE,MAAO,KAAK,MAAM,YAClB,OAAQ,CACV,EACA,OACJ,iBAAkB,CAAC,EACnB,mBAAoB,EACpB,eAAgB,EAAqB,GAAQ,EAC7C,qBACF,CAAC,EACH,AAAI,IAAqB,GAAoB,GAE/C,CACA,AAAI,IAAsB,QACxB,KAAK,kBACH,sBAAsB,EAAM,SAAS,oBACrC,gBACA,KAAK,MAAM,QAAQ,aACrB,EACF,GAAI,GAAW,EACf,GAAI,CAAC,EAAU,CACb,GAAM,IAAW,KAAM,MAAK,MAAM,WAAW,eAAe,EAAQ,CAAE,WAAY,WAAY,CAAC,EAC/F,AAAK,IAAU,KAAK,kBAAkB,qBAAsB,EAAO,SAAS,CAAC,EAC7E,EAAW,GAAc,OAAO,GAAU,IAAI,CAChD,CAEA,GAAI,GAAa,EACX,EAAU,KAAM,IACpB,KAAK,MAAM,WACX,CAAC,EAAa,OAAY,EAAS,SAAU,EAAS,UAAU,EAC7D,OAAO,OAAO,EACd,IAAI,AAAC,IAAS,EAAE,OAAQ,EAAK,EAAE,CACpC,EACA,GAAI,CAAC,EAAY,CACf,GAAM,IAAO,EAAQ,KAAK,AAAC,IAAM,GAAE,OAAO,OAAO,EAAU,QAAQ,CAAC,EACpE,AAAI,EAAC,IAAQ,CAAC,GAAK,cAAa,KAAK,kBAAkB,qBAAsB,EAAS,SAAS,SAAS,CAAC,EACzG,EAAa,GAAgB,OAAO,GAAM,YAAa,IAAI,CAC7D,CACA,GAAM,GAAe,EAAQ,KAAK,AAAC,IAAM,GAAE,OAAO,OAAO,EAAU,UAAU,CAAC,EAC9E,AAAI,EAAC,GAAgB,CAAC,EAAa,cACjC,KAAK,kBAAkB,4BAA6B,EAAS,SAAS,SAAS,CAAC,EAClF,GAAM,GAAe,GAAe,OAAO,EAAc,YAAa,IAAI,EAC1E,EAAkB,GAAmB,EAAa,QAElD,GAAM,GAAmB,GAAM,WAAW,CACxC,WACA,QAAS,EACT,gBAAiB,EAAW,aAC5B,kBACA,UAAW,EAAW,UACtB,eACA,eAAgB,EAAa,eAC7B,qBACA,KAAM,KAAM,MAAK,MAAM,WAAW,QAAQ,CAC5C,CAAC,EAEK,GAAiB,GAAI,YAAQ,EAAiB,QAAQ,OAAO,SAAS,CAAC,EAAE,IAC7E,SAAiB,QAAQ,MAAzB,cAA8B,aAA9B,QAA4C,CAC9C,EAEM,EAAa,EACf,GAAI,YAAQ,GAAc,IAAI,CAAQ,EAAE,SAAS,EAAI,GAAc,SAAS,CAAC,EAAE,UAAU,EAAG,CAAC,EAC7F,GAAI,YAAQ,CAAC,EAEX,GACJ,UACC,EACG,GAAI,WAAG,GAAe,IAAI,CAAU,EAAE,QAAQ,CAAC,CAAC,EAChD,EAAiB,QAAQ,OAAO,IAAI,MAAiB,QAAQ,MAAzB,QAAgC,GAAI,WAAG,CAAC,CAAC,EAEnF,AAAI,EAAiB,QAAQ,GAAG,CAAS,GACvC,QAAQ,IACN,WAAW,EAAM,SAAS,uBAAuB,EAAiB,QAAQ,SAAS,YAAY,EAAM,SAAS,aAAa,EAAiB,QAAQ,SAAS,GAC/J,EAGF,GAAM,GAAW,EAAmB,GAAc,EAAkB,EAAO,kBAAgB,EAAE,UAAY,OAsCzG,SAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAgC,CAC/C,YACA,QAAS,OACJ,GADI,CAEP,iBAAkB,GAClB,oBAAqB,GAAI,YAAQ,GAAe,SAAS,CAAC,CAC5D,EACF,CAAC,CACH,MAEa,kBAAsC,CACjD,YAAY,GACZ,gBACA,QACA,eAAe,mBACf,QAAQ,cACR,SAAU,EAEV,WAAY,EACZ,mBAAoB,EACpB,kBAEA,YACA,sBACA,cACA,WACA,eACA,YACA,WAEA,eAAe,GAAI,WAAG,CAAC,EACvB,mBAEA,iBAAiB,GACjB,sBAAsB,GACtB,iBAAiB,IACoE,CACrF,AAAI,EAAU,IAAI,GAAI,WAAG,CAAC,CAAC,GAAG,KAAK,kBAAkB,0BAA2B,EAAU,SAAS,CAAC,EACpG,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EACzC,CAAE,UAAW,GAAW,GAAsB,EAAW,EAAO,CAAK,EAC3E,EAAgB,UAAiB,GAAoB,CAAS,EAAE,UAEhE,GAAI,GAAW,EACf,GAAI,CAAC,EAAU,CACb,GAAM,GAAW,KAAM,MAAK,MAAM,WAAW,eAAe,EAAQ,CAAE,WAAY,WAAY,CAAC,EAC/F,AAAK,GAAU,KAAK,kBAAkB,qBAAsB,EAAO,SAAS,CAAC,EAC7E,EAAW,GAAc,OAAO,EAAU,IAAI,CAChD,CAEA,GAAI,GAAa,EACX,EAAU,KAAM,IACpB,KAAK,MAAM,WACX,CAAC,EAAa,OAAY,EAAS,SAAU,EAAS,UAAU,EAC7D,OAAO,OAAO,EACd,IAAI,AAAC,GAAS,EAAE,OAAQ,CAAK,EAAE,CACpC,EACA,GAAI,CAAC,EAAY,CACf,GAAM,GAAO,EAAQ,KAAK,AAAC,GAAM,EAAE,OAAO,OAAO,EAAU,QAAQ,CAAC,EACpE,AAAI,EAAC,GAAQ,CAAC,EAAK,cAAa,KAAK,kBAAkB,qBAAsB,EAAS,SAAS,SAAS,CAAC,EACzG,EAAa,GAAgB,OAAO,EAAM,YAAa,IAAI,CAC7D,CACA,GAAM,GAAe,EAAQ,KAAK,AAAC,GAAM,EAAE,OAAO,OAAO,EAAU,UAAU,CAAC,EAC9E,AAAI,EAAC,GAAgB,CAAC,EAAa,cACjC,KAAK,kBAAkB,4BAA6B,EAAS,SAAS,SAAS,CAAC,EAClF,GAAM,GAAe,GAAe,OAAO,EAAc,YAAa,IAAI,EAC1E,EAAkB,GAAmB,EAAa,QAElD,GAAI,GAAqB,EACzB,GAAI,CAAC,EACH,GAAK,EAQH,EAAe,4BARQ,CACvB,GAAM,GAAW,KAAM,MAAK,MAAM,WAAW,eAAe,CAAK,EACjE,GAAI,GAAY,EAAS,MAAM,OAAO,uBAAqB,EAAG,CAC5D,EAAe,EAAS,MACxB,GAAM,GAAa,iBAAW,EAAO,EAAU,CAAY,EAC3D,EAAqB,2BAAqB,CAAU,GAAK,MAC3D,CACF,CAKF,GAAM,GAAmB,GAAM,YAAY,CACzC,WACA,QAAS,EACT,gBAAiB,EAAW,aAC5B,kBACA,UAAW,EAAW,UACtB,eACA,eAAgB,EAAa,eAC7B,qBACA,KAAM,KAAM,MAAK,MAAM,WAAW,QAAQ,CAC5C,CAAC,EAEK,EAAiB,GAAI,YAAQ,EAAiB,QAAQ,SAAS,CAAC,EAChE,EAAa,EACf,GAAI,YAAQ,GAAc,IAAI,CAAQ,EAAE,SAAS,EAAI,GAAc,SAAS,CAAC,EAAE,UAC7E,EACA,OAAO,gBACT,EACA,GAAI,YAAQ,CAAC,EAEX,EACJ,WAAgB,GAAW,GAAI,WAAG,EAAe,IAAI,CAAU,EAAE,QAAQ,CAAC,CAAC,EAAI,EAAiB,QAE5F,EAAoB,KAAK,MAAM,QAAQ,0BAA0B,EAAO,CAAY,EACtF,EAAsC,KAEpC,EAAqB,EAAM,OAAO,aAAW,EAEnD,EAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EACA,CACF,CACF,CACF,CAAC,EAED,GAAM,CAAE,QAAS,GAAqB,kBAAmB,GACvD,KAAM,MAAK,MAAM,QAAQ,wBAAwB,CAC/C,KAAM,EACN,MAAO,KAAK,MAAM,YAClB,WAAY,EACR,CACE,MAAO,KAAK,MAAM,YAClB,OAAQ,EAAiB,OAC3B,EACA,OACJ,iBAAkB,CAAC,EACnB,mBAAoB,EACpB,eAAgB,EAAqB,GAAQ,EAC7C,qBACF,CAAC,EACH,AAAI,IAAqB,GAAoB,IAC7C,EAAU,eAAe,GAA6B,CAAC,CAAC,EACpD,IAAsB,QACxB,KAAK,kBACH,sBAAsB,EAAM,SAAS,oBACrC,gBACA,KAAK,MAAM,QAAQ,aACrB,EAEF,GAAM,IAAW,EAAmB,GAAc,EAAkB,EAAO,kBAAgB,EAAE,UAAY,OACzG,MAAI,KACF,EAAU,eAAe,CACvB,aAAc,CACZ,wDAAkD,KAAK,MAAM,YAAa,GAAU,EAAmB,CAAK,CAC9G,CACF,CAAC,EAGH,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EAEA,KAAK,MAAM,YACX,EACA,EAAS,SACT,EAAS,WACT,EACA,EACA,EACA,EAAS,OACT,EAAS,OACT,EACA,EACA,EACA,mBAEA,GAAoB,EAAW,EAAS,WAAY,CAAK,EAAE,UAC3D,GAAmB,EAAW,EAAS,QAAS,CAAK,EAAE,UAEvD,EACA,EACA,EACA,EACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAoD,CACnE,YACA,QAAS,CACP,eAAgB,EAChB,WACF,CACF,CAAC,CACH,MAEa,WAA+B,CAC1C,YAAY,GACZ,gBACA,eAAe,mBACf,QACA,QAAQ,cACR,SAAU,EACV,WAAY,EACZ,kBACA,YACA,sBACA,cACA,WACA,aACA,WAAY,EACZ,WAEA,eAAe,GAAI,WAAG,CAAC,EACvB,mBAEA,iBAAiB,GACjB,sBAAsB,GACtB,iBAAiB,IACyC,CAC1D,EAAgB,UAAiB,GAAoB,CAAS,EAAE,UAChE,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAE/C,AAAI,EAAW,IAAI,GAAI,WAAG,CAAC,CAAC,GAAG,KAAK,kBAAkB,4BAA4B,EAElF,GAAM,CAAE,UAAW,GAAW,GAAsB,EAAW,EAAO,CAAK,EAEvE,EACJ,GAAI,CAAC,EAAgB,CACnB,GAAM,GAAW,KAAM,MAAK,MAAM,WAAW,eAAe,CAAK,EACjE,GAAI,GAAY,EAAS,MAAM,OAAO,uBAAqB,EAAG,CAC5D,EAAe,EAAS,MACxB,GAAM,IAAa,iBAAW,EAAO,EAAU,CAAY,EAC3D,EAAqB,2BAAqB,EAAU,GAAK,MAC3D,CACF,CAEA,GAAI,GAAsC,KACtC,EAAsC,KAEpC,EAAqB,EAAM,OAAO,aAAW,EAE7C,CAAE,QAAS,EAAqB,kBAAmB,GACvD,KAAM,MAAK,MAAM,QAAQ,wBAAwB,CAC/C,aAAc,EACd,KAAM,EACN,MAAO,KAAK,MAAM,YAElB,WAAY,OACZ,iBAAkB,GAClB,mBAAoB,GACpB,iBACA,qBACF,CAAC,EACH,AAAI,GAAqB,GAAoB,GAC7C,EAAU,eAAe,GAA6B,CAAC,CAAC,EAEpD,IAAsB,QACxB,KAAK,kBAAkB,oCAAqC,gBAAiB,KAAK,MAAM,QAAQ,aAAa,EAC/G,GAAM,CAAE,QAAS,EAAqB,kBAAmB,GACvD,KAAM,MAAK,MAAM,QAAQ,wBAAwB,CAC/C,KAAM,EACN,MAAO,KAAK,MAAM,YAElB,WAAY,EACR,CACE,MAAO,KAAK,MAAM,YAClB,OAAQ,CACV,EACA,OACJ,iBAAkB,CAAC,EACnB,mBAAoB,EACpB,eAAgB,EAAqB,GAAQ,EAC7C,qBACF,CAAC,EACH,AAAI,GAAqB,GAAoB,GAC7C,EAAU,eAAe,GAA6B,CAAC,CAAC,EAEpD,IAAsB,QACxB,KAAK,kBAAkB,oCAAqC,gBAAiB,KAAK,MAAM,QAAQ,aAAa,EAE/G,GAAI,GAAW,EACf,GAAI,CAAC,EAAU,CACb,GAAM,GAAW,KAAM,MAAK,MAAM,WAAW,eAAe,EAAQ,CAAE,WAAY,WAAY,CAAC,EAC/F,AAAK,GAAU,KAAK,kBAAkB,oBAAqB,EAAO,SAAS,CAAC,EAC5E,EAAW,GAAc,OAAO,EAAU,IAAI,CAChD,CACA,GAAI,GAAa,EACX,EAAU,KAAM,IACpB,KAAK,MAAM,WACX,CAAC,EAAa,OAAY,EAAS,SAAU,EAAS,UAAU,EAC7D,OAAO,OAAO,EACd,IAAI,AAAC,GAAS,EAAE,OAAQ,CAAK,EAAE,CACpC,EACA,GAAI,CAAC,EAAY,CACf,GAAM,GAAO,EAAQ,KAAK,AAAC,IAAM,GAAE,OAAO,OAAO,EAAU,QAAQ,CAAC,EACpE,AAAI,EAAC,GAAQ,CAAC,EAAK,cAAa,KAAK,kBAAkB,qBAAsB,EAAS,SAAS,SAAS,CAAC,EACzG,EAAa,GAAgB,OAAO,EAAM,YAAa,IAAI,CAC7D,CAEA,GAAM,GAAe,EAAQ,KAAK,AAAC,GAAM,EAAE,OAAO,OAAO,EAAU,UAAU,CAAC,EAC9E,AAAI,EAAC,GAAgB,CAAC,EAAa,cACjC,KAAK,kBAAkB,4BAA6B,EAAS,SAAS,SAAS,CAAC,EAClF,GAAM,GAAe,GAAe,OAAO,EAAc,YAAa,IAAI,EAC1E,EAAkB,GAAmB,EAAa,QAElD,GAAM,GAAmB,GAAM,YAAY,CACzC,WACA,QAAS,EACT,gBAAiB,EAAW,aAC5B,kBACA,UAAW,EAAW,UACtB,eACA,eAAgB,EAAa,eAC7B,qBACA,KAAM,KAAM,MAAK,MAAM,WAAW,QAAQ,CAC5C,CAAC,EAEK,GAAiB,GAAI,YAAQ,EAAiB,QAAQ,SAAS,CAAC,EAChE,EAAa,EACf,GAAI,YAAQ,GAAc,IAAI,CAAQ,EAAE,SAAS,EAAI,GAAc,SAAS,CAAC,EAAE,UAAU,EAAG,CAAC,EAC7F,GAAI,YAAQ,CAAC,EAEX,GACJ,UAAmB,EAAW,GAAI,WAAG,GAAe,IAAI,CAAU,EAAE,QAAQ,CAAC,CAAC,EAAI,EAAiB,QAErG,AAAI,GAAW,IAAI,GAAI,WAAG,CAAC,CAAC,GAAG,KAAK,kBAAkB,OAAO,EAAM,SAAS,yBAAyB,EAErG,GAAM,GAAW,EAAmB,GAAc,EAAkB,EAAO,kBAAgB,EAAE,UAAY,OACzG,MAAI,IACF,EAAU,eAAe,CACvB,aAAc,CACZ,wDAAkD,KAAK,MAAM,YAAa,EAAU,EAAmB,CAAK,CAC9G,CACF,CAAC,EAGH,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,KAAK,MAAM,YACX,EACA,EAAS,SACT,EAAS,WACT,EACA,EACA,EACA,EAAS,OACT,EAAS,OACT,EACA,EACA,EACA,mBAEA,GAAoB,EAAW,EAAS,WAAY,CAAK,EAAE,UAC3D,GAAmB,EAAW,EAAS,QAAS,CAAK,EAAE,UAEvD,EAAiB,QAAQ,OAAO,GAAG,CAAU,EAAI,EAAiB,QAAQ,OAAS,EACnF,GACA,EACA,CACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAgC,CAC/C,YACA,QAAS,CACP,UAAW,EACb,CACF,CAAC,CACH,MAEa,mBAAuC,CAClD,YAAY,GACZ,gBACA,eAAe,mBACf,QACA,QAAQ,cACR,SAAU,EACV,WAAY,EACZ,kBACA,YACA,sBACA,cACA,WACA,WACA,gBACA,WAEA,eAAe,GAAI,WAAG,CAAC,EACvB,mBAEA,iBAAiB,GACjB,sBAAsB,GACtB,iBAAiB,IACqD,CACtE,EAAgB,UAAiB,GAAoB,CAAS,EAAE,UAChE,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAE/C,AAAI,WAAe,IAAI,GAAI,WAAG,CAAC,IAAI,KAAK,kBAAkB,gCAAgC,EAE1F,GAAM,CAAE,UAAW,GAAW,GAAsB,EAAW,EAAO,CAAK,EAEvE,EACJ,GAAI,CAAC,EAAgB,CACnB,GAAM,GAAW,KAAM,MAAK,MAAM,WAAW,eAAe,CAAK,EACjE,GAAI,GAAY,EAAS,MAAM,OAAO,uBAAqB,EAAG,CAC5D,EAAe,EAAS,MACxB,GAAM,IAAa,iBAAW,EAAO,EAAU,CAAY,EAC3D,EAAqB,2BAAqB,EAAU,GAAK,MAC3D,CACF,CAEA,GAAI,GAAsC,KACtC,EAAsC,KAEpC,EAAqB,EAAM,OAAO,aAAW,EAE7C,CAAE,QAAS,EAAqB,kBAAmB,GACvD,KAAM,MAAK,MAAM,QAAQ,wBAAwB,CAC/C,aAAc,EACd,KAAM,EACN,MAAO,KAAK,MAAM,YAElB,WAAY,OACZ,iBAAkB,GAClB,mBAAoB,GACpB,iBACA,qBACF,CAAC,EACH,AAAI,GAAqB,GAAoB,GAC7C,EAAU,eAAe,GAA6B,CAAC,CAAC,EAEpD,IAAsB,QACxB,KAAK,kBAAkB,oCAAqC,gBAAiB,KAAK,MAAM,QAAQ,aAAa,EAE/G,GAAM,CAAE,QAAS,EAAqB,kBAAmB,GACvD,KAAM,MAAK,MAAM,QAAQ,wBAAwB,CAC/C,KAAM,EACN,MAAO,KAAK,MAAM,YAElB,WAAY,EACR,CACE,MAAO,KAAK,MAAM,YAClB,OAAQ,CACV,EACA,OACJ,iBAAkB,CAAC,EACnB,mBAAoB,EACpB,eAAgB,EAAqB,GAAQ,EAC7C,qBACF,CAAC,EACH,AAAI,GAAqB,GAAoB,GAC7C,EAAU,eAAe,GAA6B,CAAC,CAAC,EAEpD,IAAsB,QACxB,KAAK,kBAAkB,oCAAqC,gBAAiB,KAAK,MAAM,QAAQ,aAAa,EAE/G,GAAI,GAAW,EACf,GAAI,CAAC,EAAU,CACb,GAAM,GAAW,KAAM,MAAK,MAAM,WAAW,eAAe,EAAQ,CAAE,WAAY,WAAY,CAAC,EAC/F,AAAK,GAAU,KAAK,kBAAkB,oBAAqB,EAAO,SAAS,CAAC,EAC5E,EAAW,GAAc,OAAO,EAAU,IAAI,CAChD,CAEA,GAAI,GAAa,EACX,EAAU,KAAM,IACpB,KAAK,MAAM,WACX,CAAC,EAAa,OAAY,EAAS,SAAU,EAAS,UAAU,EAC7D,OAAO,OAAO,EACd,IAAI,AAAC,GAAS,EAAE,OAAQ,CAAK,EAAE,CACpC,EACA,GAAI,CAAC,EAAY,CACf,GAAM,GAAO,EAAQ,KAAK,AAAC,IAAM,GAAE,OAAO,OAAO,EAAU,QAAQ,CAAC,EACpE,AAAI,EAAC,GAAQ,CAAC,EAAK,cAAa,KAAK,kBAAkB,qBAAsB,EAAS,SAAS,SAAS,CAAC,EACzG,EAAa,GAAgB,OAAO,EAAM,YAAa,IAAI,CAC7D,CAEA,GAAM,GAAe,EAAQ,KAAK,AAAC,GAAM,EAAE,OAAO,OAAO,EAAU,UAAU,CAAC,EAC9E,AAAI,EAAC,GAAgB,CAAC,EAAa,cACjC,KAAK,kBAAkB,4BAA6B,EAAS,SAAS,SAAS,CAAC,EAClF,GAAM,GAAe,GAAe,OAAO,EAAc,YAAa,IAAI,EAC1E,EAAkB,GAAmB,EAAa,QAElD,GAAM,GAAmB,GAAM,aAAa,CAC1C,WACA,QAAS,EACT,gBAAiB,EAAW,aAC5B,kBACA,UAAW,EAAW,UACtB,eACA,eAAgB,EAAa,eAC7B,qBACA,KAAM,KAAM,MAAK,MAAM,WAAW,QAAQ,CAC5C,CAAC,EAEK,GAAiB,GAAI,YAAQ,EAAiB,QAAQ,OAAO,SAAS,CAAC,EACvE,EAAa,EACf,GAAI,YAAQ,GAAc,IAAI,CAAQ,EAAE,SAAS,EAAI,GAAc,SAAS,CAAC,EAAE,UAC7E,EACA,OAAO,gBACT,EACA,GAAI,YAAQ,CAAC,EAEX,GACJ,WAAiB,GAAW,GAAI,WAAG,GAAe,IAAI,CAAU,EAAE,QAAQ,CAAC,CAAC,EAAI,EAAiB,QAAQ,OAErG,EAAW,EAAmB,GAAc,EAAkB,EAAO,kBAAgB,EAAE,UAAY,OACzG,MAAI,IACF,EAAU,eAAe,CACvB,aAAc,CACZ,wDAAkD,KAAK,MAAM,YAAa,EAAU,EAAmB,CAAK,CAC9G,CACF,CAAC,EAGH,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,KAAK,MAAM,YACX,EACA,EAAS,SACT,EAAS,WACT,EACA,EACA,EACA,EAAS,OACT,EAAS,OACT,EACA,EACA,EACA,mBAEA,GAAoB,EAAW,EAAS,WAAY,CAAK,EAAE,UAC3D,GAAmB,EAAW,EAAS,QAAS,CAAK,EAAE,UAEvD,EACA,GAEA,EACA,CACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAoC,CACnD,YACA,QAAS,CACP,cAAe,EACjB,CACF,CAAC,CACH,MAEa,sBAA0C,CACrD,YAAY,GACZ,gBACA,yBACA,wBACA,aACA,wBACA,2BACA,iBACA,UACA,OACA,MACA,MACA,YACA,sBACA,cACA,YACuE,CACvE,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAEzC,CAAE,UAAW,GAAe,GAAiB,EAAW,CAAa,EAE3E,SAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,EACA,EACA,EACA,EAEA,EAEA,EAEA,EAEA,EACA,EACA,EACA,EACA,CACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAa,CAC5B,YACA,QAAS,CACP,YACF,CACF,CAAC,CACH,MAEa,sBAA0C,CACrD,YAAY,GACZ,gBACA,WAAY,EACZ,aACA,YACA,sBACA,cACA,YACyC,CACzC,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAEzC,EAAa,UAAmB,GAAiB,EAAW,CAAa,EAAE,UAEjF,SAAU,eAAe,CACvB,aAAc,CAAC,GAAqB,EAAW,EAAe,EAAY,CAAU,CAAC,CACvF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAa,CAC5B,WACF,CAAC,CACH,MAEa,kBAAsC,CACjD,YAAY,GACZ,gBACA,aACA,SACA,yBAEA,MAAO,EACP,OAAQ,EACR,eAAe,mBAEf,YACA,sBACA,cACA,YAC2C,CAnkD/C,MAokDI,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAC/C,EAAgB,UAAiB,GAAoB,CAAS,EAAE,UAEhE,GAAI,GAAQ,EACR,EAAS,EAEb,GAAI,CAAC,EAAO,CACV,GAAM,GAAW,KAAM,MAAK,MAAM,WAAW,eAAe,EAAQ,CAAE,WAAY,WAAY,CAAC,EAC/F,AAAK,GAAU,KAAK,kBAAkB,qBAAsB,EAAO,SAAS,CAAC,EAC7E,GAAM,GAAW,GAAc,OAAO,EAAU,IAAI,EAE9C,EAAa,KAAM,MAAK,MAAM,WAAW,eAAe,EAAS,SAAU,CAAE,WAAY,WAAY,CAAC,EAC5G,AAAK,GAAY,KAAK,kBAAkB,uBAAwB,EAAS,SAAS,SAAS,CAAC,EAG5F,EAAQ,AAFW,GAAgB,OAAO,EAAY,IAAI,EAEvC,MACnB,EAAS,UAAU,EAAS,MAC9B,CAEA,AAAI,EAAC,GAAS,CAAC,IACb,KAAK,kBACH,kCACA,EAAM,SAAS,EACf,aACA,oBAAQ,aAAR,OAAsB,EACxB,EAGF,GAAM,GAAoB,GAAc,KAAK,MAAM,YAAa,EAAO,kBAAgB,EAAE,UACzF,SAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,CACF,CACF,CACF,CAAC,EAED,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,CACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAa,CAC5B,WACF,CAAC,CACH,MAEa,qBAAyC,CACpD,YAAY,GACZ,gBACA,aACA,yBAEA,YACA,sBACA,cACA,YACsD,CACtD,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EA6C/C,MA5CA,GAAgB,UAAiB,GAAoB,CAAS,EAAE,UAShE,AAPwB,MAAM,MAAK,MAAM,WAAW,mBAAmB,EAAW,CAChF,QAAS,CACP,CAAE,SAAU,GAAc,IAAK,EAC/B,CAAE,OAAQ,CAAE,OAAQ,GAAc,SAAS,YAAY,EAAG,MAAO,EAAW,SAAS,CAAE,CAAE,CAC3F,CACF,CAAC,GAEe,QAAQ,AAAC,GAAS,CAChC,GAAM,GAAO,GAAc,OAAO,EAAK,QAAQ,IAAI,EACnD,GAAI,EAAK,YAAY,IAAI,GAAI,WAAG,CAAC,CAAC,EAAG,OAErC,GAAM,GAAoB,GAAc,KAAK,MAAM,YAAa,EAAK,MAAO,kBAAgB,EAAE,UAC9F,EAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EAAK,KACP,CACF,CACF,CAAC,EAED,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,EACA,EACA,EAAK,OACL,EACA,EAAK,OACL,EACA,EAAK,MACL,kBACF,CACF,CACF,CAAC,CACH,CAAC,EAED,EAAU,kBAAkB,CAAW,EAEnC,IAAc,EACT,EAAU,iBAAiB,CAAE,qBAAoB,CAAC,EAEpD,EAAU,eAAe,CAC9B,qBACF,CAAC,CACH,MAEa,eAAmC,CAC9C,YAAY,GACZ,SACA,cACA,cACA,YACA,sBACA,cACA,YACwC,CACxC,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAEzC,EAAW,KAAM,MAAK,eAAe,CAAE,QAAO,CAAC,EACrD,AAAI,EAAY,IAAI,EAAS,gBAAgB,mBAAmB,EAAE,GAAG,EAAS,gBAAgB,iBAAiB,GAC7G,KAAK,kBAAkB,yCAAyC,EAElE,GAAM,GAAgB,GAAa,EAAW,EAAQ,CAAW,EAAE,UACnE,SAAU,eAAe,CACvB,aAAc,CACZ,GAAqB,EAAW,KAAK,MAAM,YAAa,EAAa,EAAQ,EAAe,CAAW,CACzG,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAa,CAC5B,WACF,CAAC,CACH,MAEa,uBAA2C,CACtD,YAAY,GACZ,SACA,kBACA,YACA,sBACA,YACwD,CACxD,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAC/C,AAAI,EAAgB,SAAW,GAAG,KAAK,kBAAkB,yBAAyB,EAElF,GAAM,GAAW,KAAM,MAAK,eAAe,CAAE,QAAO,CAAC,EAyBrD,MAnBI,AALmB,GAAgB,OACrC,CAAC,EAAK,IAAQ,EAAI,IAAI,EAAI,WAAW,EACrC,EAAS,gBAAgB,mBAC3B,EAEmB,GAAG,EAAS,gBAAgB,iBAAiB,GAC9D,KAAK,kBAAkB,yCAAyC,EAElE,EAAgB,QAAQ,AAAC,GAAgB,CACvC,GAAM,GAAgB,GAAa,EAAW,EAAQ,EAAY,MAAM,EAAE,UAC1E,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,KAAK,MAAM,YACX,EAAY,OACZ,EACA,EACA,EAAY,WACd,CACF,CACF,CAAC,CACH,CAAC,EAEG,IAAc,EACT,EAAU,iBAAiB,CAAE,qBAAoB,CAAC,EACpD,EAAU,eAAe,CAAE,qBAAoB,CAAC,CACzD,MAEa,cAAkC,CAC7C,YAAY,GACZ,SACA,SAAU,EACV,cAAe,EACf,YACA,sBACA,cACA,YACuC,CACvC,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAEzC,EAAgB,GAAoB,CAAS,EAAE,UAC/C,EAAgB,GAAsB,GAAa,EAAW,EAAQ,KAAK,MAAM,WAAW,EAAE,UAEhG,EAAW,EACf,GAAI,CAAC,EAAU,CACb,GAAM,GAAI,KAAM,MAAK,MAAM,WAAW,eAAe,CAAM,EAC3D,AAAK,GAAG,KAAK,kBAAkB,gBAAgB,EAC/C,EAAW,GAAc,OAAO,EAAG,IAAI,CACzC,CAEA,GAAM,GAAoB,GAAc,KAAK,MAAM,YAAa,EAAS,MAAO,kBAAgB,EAAE,UAClG,SAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EAAS,KACX,CACF,CACF,CAAC,EAED,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,KAAK,MAAM,YACX,EACA,EACA,EACA,EACA,EAAS,OACT,EAAS,MACT,kBACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAa,CAC5B,WACF,CAAC,CACH,MAEa,mBAAuC,CAClD,YAAY,GACZ,aACA,UAAW,EAAiB,CAAC,EAC7B,iBAAiB,CAAC,EAClB,YACA,sBACA,YACoD,CACpD,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAE3C,EAAY,KAAK,GACf,EAAgB,GAAoB,CAAS,EAAE,UAC/C,EAAiB,EAAW,OAAO,AAAC,GAAO,CAAC,EAAU,EAAG,SAAS,EAAE,EAC1E,GAAI,EAAe,OAAQ,CACzB,GAAM,GAAe,KAAM,MAAK,gBAAgB,CAAE,WAAY,CAAe,CAAC,EAC9E,EAAY,OACP,GACA,EAAa,YAEpB,CAqCA,MAnCA,GAAW,QAAQ,AAAC,GAAW,CAC7B,GAAM,GAAY,EAAO,SAAS,EAC5B,EAAW,EAAU,GAC3B,AAAK,GAAU,KAAK,kBAAkB,wBAAwB,GAAW,EACzE,GAAM,GACJ,EAAe,IAAc,GAAa,EAAW,EAAQ,KAAK,MAAM,WAAW,EAAE,UACjF,EAAoB,GAAc,KAAK,MAAM,YAAa,EAAS,MAAO,kBAAgB,EAAE,UAClG,EAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EAAS,KACX,CACF,CACF,CAAC,EAED,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,KAAK,MAAM,YACX,EACA,EACA,EACA,EACA,EAAS,OACT,EAAS,MACT,kBACF,CACF,CACF,CAAC,CACH,CAAC,EAEG,IAAc,EACT,EAAU,iBAAiB,CAAE,qBAAoB,CAAC,EACpD,EAAU,eAAe,CAAE,qBAAoB,CAAC,CACzD,MAEa,uBAA2C,CACtD,YAAY,GACZ,aACA,QACA,eAAe,mBACf,iBACA,YACA,sBACA,cACA,YACgD,CAChD,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAEzC,EAAmB,GAAoB,EAAW,EAAY,CAAK,EAAE,UACrE,EAAkB,GAA2B,CAAS,EAAE,UAExD,EAAmB,KAAK,MAAM,QAAQ,0BAA0B,EAAO,CAAY,EAEzF,SAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EACA,CACF,EACA,GACE,EACA,EACA,UAAkB,KAAK,MAAM,YAC7B,EACA,EACA,EACA,EACA,CACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAa,CAC5B,WACF,CAAC,CACH,MAEa,+BAAmD,CAC9D,YAAY,GACZ,eACA,YAAY,GACZ,YACA,sBACA,WACA,iBAAiB,GACjB,sBAAsB,IAC0C,CAChE,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAIzC,EAAgD,CAAC,EAkDvD,MAhDA,GAAa,QAAQ,KAAO,IAAa,CAp8D7C,QAq8DM,GAAM,GAAkB,GAA2B,CAAS,EAAE,UACxD,EAAmB,GAAoB,EAAW,EAAS,GAAI,EAAS,KAAK,EAAE,UAC/E,EAAgB,EAAS,MAAM,OAAO,aAAW,GAAK,EACxD,EAA0C,EAAmB,EAAS,MAAM,SAAS,GAEzF,GAAI,CAAC,EAAkB,CACrB,GAAM,CAAE,QAAS,EAAmB,kBAAmB,GACrD,KAAM,MAAK,MAAM,QAAQ,wBAAwB,CAC/C,KAAM,EAAS,MACf,MAAO,KAAK,MAAM,YAClB,WAAY,EACR,CACE,MAAO,KAAK,MAAM,YAClB,OAAQ,CACV,EACA,OACJ,iBAAkB,CAAC,EACnB,mBAAoB,EACpB,eAAgB,EAAgB,GAAQ,EACxC,qBACF,CAAC,EACH,AAAI,GAAmB,GAAmB,GAC1C,EAAU,eAAe,GAA4B,CAAC,CAAC,EACnD,IAAqB,QACvB,KAAK,kBACH,yBAAyB,EAAS,GAAG,SAAS,WAAW,EAAS,MAAM,SAAS,oBACjF,gBACA,KAAK,MAAM,QAAQ,aACrB,CACJ,CAEA,EAAU,eAAe,CACvB,aAAc,CACZ,GACE,EACA,EAAS,GACT,KAAS,iBAAT,OAA2B,KAAK,MAAM,YACtC,EACA,EACA,EACA,EAAS,MACT,KAAS,eAAT,OAAyB,kBAC3B,CACF,CACF,CAAC,CACH,CAAC,EAEG,IAAc,EACT,EAAU,iBAAiB,CAAE,qBAAoB,CAAC,EACpD,EAAU,eAAe,CAAE,qBAAoB,CAAC,CACzD,MAEa,iBAAqC,CAChD,YAAY,GACZ,QACA,eAAe,mBACf,YACA,sBACA,cACA,YAC0C,CAC1C,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EAEzC,EAAkB,GAAmB,EAAW,KAAK,MAAM,YAAa,CAAK,EAAE,UAC/E,EAAsB,GAA0B,CAAS,EAAE,UAC3D,EAAmB,KAAK,MAAM,QAAQ,0BAA0B,EAAO,CAAY,EAEzF,SAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EACA,CACF,EACA,GACE,EACA,KAAK,MAAM,YACX,EACA,EACA,EACA,EACA,CACF,CACF,CACF,CAAC,EAED,EAAU,uBAAuB,CAAmB,EACpD,EAAU,kBAAkB,CAAW,EAEhC,EAAU,aAAa,CAC5B,WACF,CAAC,CACH,MAEa,yBAA6C,CACxD,YAAY,GACZ,YACA,YACA,sBACA,YACuD,CACvD,GAAM,GAAY,KAAK,gBAAgB,CAAQ,EA+B/C,MA7BA,GAAU,QAAQ,AAAC,GAAS,CA9iEhC,MA+iEM,GAAM,GAAQ,EAAK,OACb,EAAe,KAAK,YAAL,OAAkB,mBACjC,EAAkB,GAAmB,EAAW,KAAK,MAAM,YAAa,CAAK,EAAE,UAC/E,EAAsB,GAA0B,CAAS,EAAE,UAC3D,EAAmB,KAAK,MAAM,QAAQ,0BAA0B,EAAO,CAAY,EAEzF,EAAU,eAAe,CACvB,aAAc,CACZ,wDACE,KAAK,MAAM,YACX,EACA,KAAK,MAAM,YACX,EACA,CACF,EACA,GACE,EACA,KAAK,MAAM,YACX,EACA,EACA,EACA,EACA,CACF,CACF,CACF,CAAC,CACH,CAAC,EAEG,GAAa,EACR,EAAU,iBAAiB,CAAE,qBAAoB,CAAC,EACpD,EAAU,eAAe,CAAE,qBAAoB,CAAC,CACzD,MAEa,gBAAe,CAC1B,UAGmE,CAGnE,MAAO,AAFM,MAAM,MAAK,gBAAgB,CAAE,WAAY,CAAC,CAAM,CAAE,CAAC,GAEpD,YAAY,EAAO,SAAS,EAC1C,MAEa,iBAAgB,CAC3B,aACA,UAYC,CACD,GAAM,GAAW,KAAM,IACrB,KAAK,MAAM,WACX,EAAW,IAAI,AAAC,GAAO,EAAE,OAAQ,CAAE,EAAE,EACrC,CACF,EAEM,EAA+E,CAAC,EAChF,EAA0B,CAAC,EAEjC,OAAS,GAAI,EAAG,EAAI,EAAW,OAAQ,IAAK,CAC1C,GAAM,GAAO,EAAS,GACtB,GAAI,IAAS,MAAQ,CAAC,EAAK,YAAa,KAAM,OAAM,0BAA4B,EAAW,GAAG,SAAS,CAAC,EACxG,GAAM,GAAW,GAAc,OAAO,EAAK,YAAY,IAAI,EAC3D,EAAY,EAAW,GAAG,SAAS,GAAK,OACnC,GADmC,CAEtC,OAAQ,EAAK,YAAY,KAC3B,GACA,EAAW,KAAK,EAAS,QAAQ,CACnC,CAEA,GAAM,GAAiB,KAAM,IAC3B,KAAK,MAAM,WACX,EAAW,IAAI,AAAC,GAAO,EAAE,OAAQ,CAAE,EAAE,EACrC,CACF,EAEM,EAAqF,CAAC,EAE5F,OAAS,GAAI,EAAG,EAAI,EAAW,OAAQ,IAAK,CAC1C,GAAM,GAAO,EAAe,GAC5B,GAAI,IAAS,MAAQ,CAAC,EAAK,YAAa,KAAM,OAAM,4BAA8B,EAAW,GAAG,SAAS,CAAC,EAC1G,GAAM,GAAa,GAAgB,OAAO,EAAK,YAAY,IAAI,EAC/D,EAAc,EAAW,GAAG,SAAS,GAAK,OACrC,GADqC,CAExC,SAAU,EAAK,YAAY,KAC7B,EACF,CAEA,MAAO,CACL,YAAa,OAAO,KAAK,CAAW,EAAE,OACpC,CAAC,EAAK,IAAS,OACV,GADU,EAEZ,GAAM,OACF,EAAY,IADV,CAEL,WAAY,EAAc,EAAY,GAAK,SAAS,SAAS,EAC/D,EACF,GACA,CAAC,CACH,CACF,CACF,CACF","names":[]}