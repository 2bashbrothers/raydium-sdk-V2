{"version":3,"sources":["../../../src/raydium/farm/farm.ts","../../../src/common/accountInfo.ts","../../../src/common/logger.ts","../../../src/common/bignumber.ts","../../../src/module/amount.ts","../../../src/module/formatter.ts","../../../src/module/fraction.ts","../../../src/common/constant.ts","../../../src/raydium/token/constant.ts","../../../src/module/token.ts","../../../src/common/pubKey.ts","../../../src/module/currency.ts","../../../src/module/percent.ts","../../../src/module/price.ts","../../../src/common/utility.ts","../../../src/common/lodash.ts","../../../src/common/owner.ts","../../../src/common/pda.ts","../../../src/common/txTool/txUtils.ts","../../../src/common/txTool/txType.ts","../../../src/common/programId.ts","../../../src/common/transfer.ts","../../../src/common/txTool/lookupTable.ts","../../../src/common/txTool/txTool.ts","../../../src/common/fee.ts","../../../src/raydium/account/util.ts","../../../node_modules/@noble/hashes/src/_assert.ts","../../../node_modules/@noble/hashes/src/utils.ts","../../../node_modules/@noble/hashes/src/_md.ts","../../../node_modules/@noble/hashes/src/sha256.ts","../../../src/marshmallow/index.ts","../../../src/marshmallow/buffer-layout.ts","../../../src/raydium/account/layout.ts","../../../src/raydium/account/instruction.ts","../../../src/raydium/moduleBase.ts","../../../src/raydium/farm/config.ts","../../../src/raydium/farm/layout.ts","../../../src/raydium/farm/instruction.ts","../../../src/raydium/farm/util.ts"],"sourcesContent":["import { PublicKey, SystemProgram } from \"@solana/web3.js\";\r\nimport { createAssociatedTokenAccountIdempotentInstruction } from \"@solana/spl-token\";\r\nimport { parseBigNumberish } from \"@/common\";\r\n\r\nimport { FormatFarmKeyOut } from \"../../api/type\";\r\nimport { AddInstructionParam, jsonInfo2PoolKeys } from \"@/common\";\r\nimport { BN_ZERO } from \"@/common/bignumber\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport { FARM_PROGRAM_ID_V6, DEVNET_PROGRAM_ID } from \"@/common/programId\";\r\nimport { SOLMint, solToWSol, WSOLMint } from \"@/common/pubKey\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { generatePubKey } from \"../account/util\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport { FormatFarmInfoOut, FormatFarmKeyOutV6 } from \"../../api/type\";\r\nimport { ComputeBudgetConfig, TxTipConfig } from \"../../raydium/type\";\r\nimport { createWSolAccountInstructions } from \"../account/instruction\";\r\nimport ModuleBase from \"../moduleBase\";\r\nimport { TOKEN_WSOL } from \"../token/constant\";\r\nimport {\r\n  FARM_LOCK_MINT,\r\n  FARM_LOCK_VAULT,\r\n  FARM_PROGRAM_TO_VERSION,\r\n  isValidFarmVersion,\r\n  poolTypeV6,\r\n  validateFarmRewards,\r\n} from \"./config\";\r\nimport {\r\n  createAssociatedLedgerAccountInstruction,\r\n  makeAddNewRewardInstruction,\r\n  makeCreateFarmInstruction,\r\n  makeCreatorWithdrawFarmRewardInstruction,\r\n  makeDepositInstructionV3,\r\n  makeDepositInstructionV5,\r\n  makeDepositInstructionV6,\r\n  makeRestartRewardInstruction,\r\n  makeWithdrawInstructionV3,\r\n  makeWithdrawInstructionV4,\r\n  makeWithdrawInstructionV5,\r\n  makeWithdrawInstructionV6,\r\n} from \"./instruction\";\r\nimport { FarmLedger, farmStateV6Layout } from \"./layout\";\r\nimport {\r\n  CreateFarm,\r\n  CreateFarmExtInfo,\r\n  FarmDWParam,\r\n  FarmRewardInfo,\r\n  FarmRewardInfoConfig,\r\n  RewardInfoKey,\r\n  UpdateFarmReward,\r\n  UpdateFarmRewards,\r\n} from \"./type\";\r\nimport {\r\n  calFarmRewardAmount,\r\n  farmRewardInfoToConfig,\r\n  getAssociatedAuthority,\r\n  getAssociatedLedgerAccount,\r\n  getAssociatedLedgerPoolAccount,\r\n  getFarmLedgerLayout,\r\n} from \"./util\";\r\n\r\nexport default class Farm extends ModuleBase {\r\n  // token account needed\r\n  private async _getUserRewardInfo({ payer, rewardInfo }: { payer: PublicKey; rewardInfo: FarmRewardInfo }): Promise<{\r\n    rewardPubKey?: PublicKey;\r\n    newInstruction?: AddInstructionParam;\r\n  }> {\r\n    if (rewardInfo.mint.equals(SOLMint)) {\r\n      const txInstructions = await createWSolAccountInstructions({\r\n        connection: this.scope.connection,\r\n        owner: this.scope.ownerPubKey,\r\n        payer,\r\n        amount: calFarmRewardAmount({\r\n          ...rewardInfo,\r\n          openTime: rewardInfo.openTime.toString(),\r\n          endTime: rewardInfo.endTime.toString(),\r\n        }),\r\n      });\r\n      return {\r\n        rewardPubKey: txInstructions.addresses.newAccount,\r\n        newInstruction: txInstructions,\r\n      };\r\n    }\r\n\r\n    return {\r\n      rewardPubKey: await this.scope.account.getCreatedTokenAccount({\r\n        mint: rewardInfo.mint,\r\n        associatedOnly: false,\r\n      })!,\r\n    };\r\n  }\r\n\r\n  // token account needed\r\n  public async create<T extends TxVersion>({\r\n    poolInfo: propPoolInfo,\r\n    rewardInfos,\r\n    payer,\r\n    programId = FARM_PROGRAM_ID_V6,\r\n    txVersion,\r\n    feePayer,\r\n    lockProgram,\r\n  }: CreateFarm<T>): Promise<MakeTxData<T, CreateFarmExtInfo>> {\r\n    this.checkDisabled();\r\n    this.scope.checkOwner();\r\n\r\n    const lpMint = new PublicKey(propPoolInfo.lpMint.address);\r\n    const poolInfo = {\r\n      lpMint,\r\n      lockInfo: { lockMint: lockProgram?.mint ?? FARM_LOCK_MINT, lockVault: lockProgram?.vault ?? FARM_LOCK_VAULT },\r\n      version: 6,\r\n      rewardInfos,\r\n      programId,\r\n    };\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const farmKeyPair = generatePubKey({ fromPublicKey: payerPubKey, programId: poolInfo.programId });\r\n    const lamports = await this.scope.connection.getMinimumBalanceForRentExemption(farmStateV6Layout.span);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        SystemProgram.createAccountWithSeed({\r\n          fromPubkey: payerPubKey,\r\n          basePubkey: payerPubKey,\r\n          seed: farmKeyPair.seed,\r\n          newAccountPubkey: farmKeyPair.publicKey,\r\n          lamports,\r\n          space: farmStateV6Layout.span,\r\n          programId: poolInfo.programId,\r\n        }),\r\n      ],\r\n    });\r\n\r\n    const { publicKey: authority, nonce } = getAssociatedAuthority({\r\n      programId: new PublicKey(poolInfo.programId),\r\n      poolId: farmKeyPair.publicKey,\r\n    });\r\n\r\n    const lpVault = getAssociatedLedgerPoolAccount({\r\n      programId: poolInfo.programId,\r\n      poolId: farmKeyPair.publicKey,\r\n      mint: poolInfo.lpMint,\r\n      type: \"lpVault\",\r\n    });\r\n\r\n    const rewardInfoConfig: FarmRewardInfoConfig[] = [];\r\n    const rewardInfoKey: RewardInfoKey[] = [];\r\n\r\n    for (const rewardInfo of poolInfo.rewardInfos) {\r\n      if (rewardInfo.openTime >= rewardInfo.endTime)\r\n        this.logAndCreateError(\"start time error\", \"rewardInfo.rewardOpenTime\", rewardInfo.openTime.toString());\r\n      if (isNaN(poolTypeV6[rewardInfo.rewardType])) this.logAndCreateError(\"rewardType error\", rewardInfo.rewardType);\r\n      if (Number(rewardInfo.perSecond) <= 0) this.logAndCreateError(\"rewardPerSecond error\", rewardInfo.perSecond);\r\n\r\n      rewardInfoConfig.push(farmRewardInfoToConfig(rewardInfo));\r\n\r\n      const { rewardPubKey, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n      if (!rewardPubKey) this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n      const rewardMint = rewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : rewardInfo.mint;\r\n      rewardInfoKey.push({\r\n        rewardMint,\r\n        rewardVault: getAssociatedLedgerPoolAccount({\r\n          programId: poolInfo.programId,\r\n          poolId: farmKeyPair.publicKey,\r\n          mint: rewardMint,\r\n          type: \"rewardVault\",\r\n        }),\r\n        userRewardToken: rewardPubKey!,\r\n      });\r\n    }\r\n\r\n    const { account: lockUserAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n      mint: new PublicKey(poolInfo.lockInfo.lockMint),\r\n      owner: this.scope.ownerPubKey,\r\n      skipCloseAccount: false,\r\n      createInfo: {\r\n        payer: this.scope.ownerPubKey,\r\n        amount: 0,\r\n      },\r\n      associatedOnly: false,\r\n    });\r\n    instructionParams && txBuilder.addInstruction(instructionParams);\r\n    if (!lockUserAccount)\r\n      this.logAndCreateError(\"cannot found lock vault\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const { instruction, instructionType } = makeCreateFarmInstruction({\r\n      farmId: farmKeyPair.publicKey,\r\n      owner: this.scope.ownerPubKey,\r\n      farmAuthority: authority,\r\n      lpVault,\r\n      lpMint: poolInfo.lpMint,\r\n      lockVault: poolInfo.lockInfo.lockVault,\r\n      lockMint: poolInfo.lockInfo.lockMint,\r\n      lockUserAccount,\r\n      programId: poolInfo.programId,\r\n      rewardInfo: rewardInfoKey,\r\n      rewardInfoConfig,\r\n      nonce,\r\n    });\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [instruction],\r\n        instructionTypes: [instructionType],\r\n      })\r\n      .versionBuild<CreateFarmExtInfo>({\r\n        txVersion,\r\n        extInfo: {\r\n          farmId: farmKeyPair.publicKey,\r\n          farmAuthority: authority,\r\n          lpVault,\r\n          lockUserAccount: lockUserAccount!,\r\n          nonce,\r\n        },\r\n      }) as Promise<MakeTxData<T, CreateFarmExtInfo>>;\r\n  }\r\n\r\n  public async restartReward<T extends TxVersion>({\r\n    farmInfo,\r\n    payer,\r\n    newRewardInfo,\r\n    txVersion,\r\n    feePayer,\r\n  }: UpdateFarmReward): Promise<MakeTxData<T>> {\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n\r\n    const farmKeys = {\r\n      id: farmInfoKeys.id,\r\n      rewardInfos: farmInfo.rewardInfos,\r\n      lpVault: farmInfoKeys.lpVault,\r\n      programId: farmInfoKeys.programId,\r\n    };\r\n\r\n    if (newRewardInfo.openTime >= newRewardInfo.endTime)\r\n      this.logAndCreateError(\"start time error\", \"newRewardInfo\", newRewardInfo);\r\n\r\n    const payerPubKey = payer || this.scope.ownerPubKey;\r\n\r\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\r\n    const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\r\n      new PublicKey(item.mint.address).equals(rewardMint),\r\n    );\r\n    const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\r\n\r\n    if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\r\n\r\n    const rewardVault = rewardInfo!.vault ?? SOLMint;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n      rewardInfo: newRewardInfo,\r\n      payer: payerPubKey,\r\n    });\r\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n    if (!userRewardTokenPub)\r\n      this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [\r\n          makeRestartRewardInstruction({\r\n            payer: this.scope.ownerPubKey,\r\n            rewardVault,\r\n            userRewardTokenPub: userRewardTokenPub!,\r\n            farmKeys,\r\n            rewardInfo: newRewardInfo,\r\n          }),\r\n        ],\r\n        instructionTypes: [InstructionType.FarmV6Restart],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async restartRewards<T extends TxVersion>({\r\n    farmInfo,\r\n    payer,\r\n    newRewardInfos,\r\n    txVersion,\r\n    feePayer,\r\n  }: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n\r\n    const farmKeys = {\r\n      id: farmInfoKeys.id,\r\n      rewardInfos: farmInfo.rewardInfos,\r\n      lpVault: farmInfoKeys.lpVault,\r\n      programId: farmInfoKeys.programId,\r\n    };\r\n\r\n    newRewardInfos.forEach((reward) => {\r\n      if (reward.openTime >= reward.endTime) this.logAndCreateError(\"start time error\", \"newRewardInfo\", reward);\r\n    });\r\n\r\n    const payerPubKey = payer || this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    for (const itemReward of newRewardInfos) {\r\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\r\n      const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\r\n        new PublicKey(item.mint.address).equals(rewardMint),\r\n      );\r\n      const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\r\n      if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\r\n      const rewardVault = rewardInfo!.vault ?? SOLMint;\r\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo: itemReward,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n      if (!userRewardTokenPub)\r\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n      const ins = makeRestartRewardInstruction({\r\n        payer: this.scope.ownerPubKey,\r\n        rewardVault,\r\n        userRewardTokenPub: userRewardTokenPub!,\r\n        farmKeys,\r\n        rewardInfo: itemReward,\r\n      });\r\n      txBuilder.addInstruction({\r\n        instructions: [ins],\r\n        instructionTypes: [InstructionType.FarmV6Restart],\r\n      });\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async addNewRewardToken<T extends TxVersion>(params: UpdateFarmReward): Promise<MakeTxData<T>> {\r\n    const { txVersion, farmInfo, newRewardInfo, payer, feePayer } = params;\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\r\n\r\n    const rewardVault = getAssociatedLedgerPoolAccount({\r\n      programId: new PublicKey(farmInfo.programId),\r\n      poolId: new PublicKey(farmInfo.id),\r\n      mint: rewardMint,\r\n      type: \"rewardVault\",\r\n    });\r\n\r\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n      rewardInfo: newRewardInfo,\r\n      payer: payerPubKey,\r\n    });\r\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n    if (!userRewardTokenPub)\r\n      this.logAndCreateError(\"annot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n    newRewardInfo.mint = rewardMint;\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [\r\n          makeAddNewRewardInstruction({\r\n            payer: this.scope.ownerPubKey,\r\n            userRewardTokenPub: userRewardTokenPub!,\r\n            farmKeys,\r\n            rewardVault,\r\n            rewardInfo: newRewardInfo,\r\n          }),\r\n        ],\r\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async addNewRewardsToken<T extends TxVersion>(params: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\r\n    const { txVersion, farmInfo, newRewardInfos, payer, feePayer } = params;\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    for (const itemReward of newRewardInfos) {\r\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\r\n      const rewardVault = getAssociatedLedgerPoolAccount({\r\n        programId: new PublicKey(farmInfo.programId),\r\n        poolId: new PublicKey(farmInfo.id),\r\n        mint: rewardMint,\r\n        type: \"rewardVault\",\r\n      });\r\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo: itemReward,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n      if (!userRewardTokenPub)\r\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n      const ins = makeAddNewRewardInstruction({\r\n        payer: this.scope.ownerPubKey,\r\n        userRewardTokenPub: userRewardTokenPub!,\r\n        farmKeys,\r\n        rewardVault,\r\n        rewardInfo: { ...itemReward, mint: rewardMint },\r\n      });\r\n      txBuilder.addInstruction({\r\n        instructions: [ins],\r\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\r\n      });\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async deposit<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      txVersion,\r\n      farmInfo,\r\n      amount,\r\n      feePayer,\r\n      useSOLBalance,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n    } = params;\r\n\r\n    if (this.scope.availability.addFarm === false)\r\n      this.logAndCreateError(\"farm deposit feature disabled in your region\");\r\n\r\n    const { rewardInfos, programId } = farmInfo;\r\n    const version = FARM_PROGRAM_TO_VERSION[programId];\r\n    if (version === 4) this.logAndCreateError(\"V4 has suspended deposits:\", farmInfo.programId);\r\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\r\n    const [farmProgramId, farmId] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\r\n\r\n    const ledger = getAssociatedLedgerAccount({\r\n      programId: farmProgramId,\r\n      poolId: farmId,\r\n      owner: this.scope.ownerPubKey,\r\n      version: version as 3 | 5 | 6,\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint, item.programId).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    const lpMint = farmKeys.lpMint;\r\n    const ownerLpTokenAccount = ownerMintToAccount[lpMint.address];\r\n    if (!ownerLpTokenAccount) this.logAndCreateError(\"you don't have any lp\", \"lp zero\", ownerMintToAccount);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of rewardInfos) {\r\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n\r\n      if (!ownerRewardAccount) {\r\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: itemReward.mint.programId,\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerRewardAccount = _ownerRewardAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount);\r\n    }\r\n\r\n    let ledgerInfo: FarmLedger | undefined = undefined;\r\n    const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n    if (ledgerData) {\r\n      const ledgerLayout = getFarmLedgerLayout(version)!;\r\n      ledgerInfo = ledgerLayout.decode(ledgerData.data);\r\n    }\r\n\r\n    if (\r\n      farmInfo.programId !== FARM_PROGRAM_ID_V6.toString() &&\r\n      farmInfo.programId !== DEVNET_PROGRAM_ID.FARM_PROGRAM_ID_V6.toString() &&\r\n      !ledgerInfo\r\n    ) {\r\n      const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n        id: farmId,\r\n        programId: farmProgramId,\r\n        version,\r\n        ledger,\r\n        owner: this.scope.ownerPubKey,\r\n      });\r\n      txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n    }\r\n\r\n    const errorMsg = validateFarmRewards({\r\n      version,\r\n      rewardInfos,\r\n      rewardTokenAccountsPublicKeys: rewardAccounts,\r\n    });\r\n    if (errorMsg) this.logAndCreateError(errorMsg);\r\n\r\n    const insParams = {\r\n      amount: parseBigNumberish(amount),\r\n      owner: this.scope.ownerPubKey,\r\n      farmInfo,\r\n      farmKeys,\r\n      lpAccount: ownerLpTokenAccount,\r\n      rewardAccounts,\r\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n    };\r\n\r\n    const newInstruction =\r\n      version === 6\r\n        ? makeDepositInstructionV6(insParams)\r\n        : version === 5\r\n        ? makeDepositInstructionV5(insParams)\r\n        : makeDepositInstructionV3(insParams);\r\n\r\n    const insType = {\r\n      3: InstructionType.FarmV3Deposit,\r\n      5: InstructionType.FarmV5Deposit,\r\n      6: InstructionType.FarmV6Deposit,\r\n    };\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [newInstruction],\r\n        instructionTypes: [insType[version]],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async withdraw<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      txVersion,\r\n      farmInfo,\r\n      amount,\r\n      deposited,\r\n      useSOLBalance,\r\n      feePayer,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n    } = params;\r\n    const { rewardInfos } = farmInfo;\r\n\r\n    if (this.scope.availability.removeFarm === false)\r\n      this.logAndCreateError(\"farm withdraw feature disabled in your region\");\r\n\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n\r\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\r\n\r\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    if (version !== 4) {\r\n      const ledger = getAssociatedLedgerAccount({\r\n        programId: new PublicKey(farmInfo.programId),\r\n        poolId: new PublicKey(farmInfo.id),\r\n        owner: this.scope.ownerPubKey,\r\n        version,\r\n      });\r\n      const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n\r\n      if (!ledgerData) {\r\n        // user has old none ata farm vault and don't have ata vault\r\n        if (version !== 6) {\r\n          const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n            id: new PublicKey(farmKeys.id),\r\n            programId: new PublicKey(farmKeys.programId),\r\n            version,\r\n            ledger,\r\n            owner: this.scope.ownerPubKey,\r\n          });\r\n          txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n        }\r\n      } else {\r\n        const ledgerLayout = getFarmLedgerLayout(version)!;\r\n        const ledgerInfo = ledgerLayout.decode(ledgerData!.data);\r\n        if (ledgerInfo.deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n      }\r\n    }\r\n\r\n    if (deposited && deposited.isZero() && !(userAuxiliaryLedgers || []).length)\r\n      this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n\r\n    // if (!deposited && version !== 4) {\r\n    // const ledger = getAssociatedLedgerAccount({\r\n    //   programId: new PublicKey(farmInfo.programId),\r\n    //   poolId: new PublicKey(farmInfo.id),\r\n    //   owner: this.scope.ownerPubKey,\r\n    //   version,\r\n    // });\r\n    // const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n    // if (!ledgerData) {\r\n    // user has old not ata farm vault and don't have ata vault\r\n    // if (version !== 6 && (userAuxiliaryLedgers || []).length > 0) {\r\n    //   const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n    //     id: new PublicKey(farmKeys.id),\r\n    //     programId: new PublicKey(farmKeys.programId),\r\n    //     version,\r\n    //     ledger,\r\n    //     owner: this.scope.ownerPubKey,\r\n    //   });\r\n    //   txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n    // } else {\r\n    //   this.logAndCreateError(\"no lp data\", { farmId: farmInfo.id, version, ledgerData });\r\n    // }\r\n    // } else {\r\n    //   const ledgerLayout = getFarmLedgerLayout(version)!;\r\n    //   const ledgerInfo = ledgerLayout.decode(ledgerData!.data);\r\n    //   if (ledgerInfo.deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n    // }\r\n    // } else if (deposited) {\r\n    //   if (deposited.isZero() && !(userAuxiliaryLedgers || []).length)\r\n    //     this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n    // }\r\n\r\n    const lpMint = farmKeys.lpMint.address;\r\n    const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\r\n\r\n    let ownerLpTokenAccount = ownerMintToAccount[lpMint.toString()];\r\n    if (!ownerLpTokenAccount) {\r\n      const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: farmKeys.lpMint.programId,\r\n        mint: new PublicKey(lpMint),\r\n        notUseTokenAccount: lpMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: true,\r\n        associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerLpTokenAccount = _ownerRewardAccount!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n    ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of rewardInfos) {\r\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n      if (!ownerRewardAccount) {\r\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: itemReward.mint.programId,\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerRewardAccount = _ownerRewardAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount);\r\n    }\r\n\r\n    const errorMsg = validateFarmRewards({\r\n      version,\r\n      rewardInfos,\r\n      rewardTokenAccountsPublicKeys: rewardAccounts,\r\n    });\r\n    if (errorMsg) this.logAndCreateError(errorMsg);\r\n\r\n    const insParams = {\r\n      amount: parseBigNumberish(amount),\r\n      owner: this.scope.ownerPubKey,\r\n      farmInfo,\r\n      farmKeys,\r\n      lpAccount: ownerLpTokenAccount,\r\n      rewardAccounts,\r\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n    };\r\n\r\n    const newInstruction =\r\n      version === 6\r\n        ? makeWithdrawInstructionV6(insParams)\r\n        : version === 5\r\n        ? makeWithdrawInstructionV5(insParams)\r\n        : version === 4\r\n        ? makeWithdrawInstructionV4(insParams)\r\n        : makeWithdrawInstructionV3(insParams);\r\n\r\n    const insType = {\r\n      3: InstructionType.FarmV3Withdraw,\r\n      4: InstructionType.FarmV4Withdraw,\r\n      5: InstructionType.FarmV5Withdraw,\r\n      6: InstructionType.FarmV6Withdraw,\r\n    };\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [newInstruction],\r\n        instructionTypes: [insType[version]],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  // token account needed\r\n  public async withdrawFarmReward<T extends TxVersion>({\r\n    farmInfo,\r\n    withdrawMint,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    farmInfo: FormatFarmInfoOut;\r\n    withdrawMint: PublicKey;\r\n    payer?: PublicKey;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    txVersion?: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    this.scope.checkOwner();\r\n    const farmKeys = jsonInfo2PoolKeys(\r\n      (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0] as FormatFarmKeyOutV6,\r\n    );\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version\", version);\r\n\r\n    // const rewardInfoIdx = farmInfo.rewardInfos.findIndex((item) =>\r\n    //   item.mint.address === SOLMint.toString() ? new PublicKey(TOKEN_WSOL.address) : withdrawMint,\r\n    // );\r\n    const rewardInfo = farmKeys.rewardInfos.find((r) => solToWSol(r.mint.address).equals(solToWSol(withdrawMint)));\r\n    if (!rewardInfo) this.logAndCreateError(\"withdraw mint error\", \"rewardInfos\", farmInfo);\r\n\r\n    const rewardVault = rewardInfo?.vault ?? SOLMint;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let userRewardToken: PublicKey;\r\n\r\n    if (withdrawMint.equals(SOLMint) || withdrawMint.equals(PublicKey.default)) {\r\n      const txInstruction = await createWSolAccountInstructions({\r\n        connection: this.scope.connection,\r\n        owner: this.scope.ownerPubKey,\r\n        payer: this.scope.ownerPubKey,\r\n        amount: calFarmRewardAmount({\r\n          ...rewardInfo,\r\n          openTime: rewardInfo!.openTime as unknown as string,\r\n          endTime: rewardInfo!.endTime as unknown as string,\r\n          perSecond: new Decimal(rewardInfo!.perSecond).mul(10 ** rewardInfo!.mint.decimals).toString(),\r\n        }),\r\n      });\r\n      userRewardToken = txInstruction.addresses.newAccount;\r\n      txBuilder.addInstruction(txInstruction);\r\n    } else {\r\n      const selectUserRewardToken = await this.scope.account.getCreatedTokenAccount({\r\n        mint: withdrawMint,\r\n      });\r\n\r\n      if (selectUserRewardToken === null) {\r\n        userRewardToken = await this.scope.account.getAssociatedTokenAccount(withdrawMint);\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            createAssociatedTokenAccountIdempotentInstruction(\r\n              this.scope.ownerPubKey,\r\n              userRewardToken,\r\n              this.scope.ownerPubKey,\r\n              withdrawMint,\r\n            ),\r\n          ],\r\n          instructionTypes: [InstructionType.CreateATA],\r\n        });\r\n      } else {\r\n        userRewardToken = selectUserRewardToken!;\r\n      }\r\n    }\r\n\r\n    const { instruction, instructionType } = makeCreatorWithdrawFarmRewardInstruction({\r\n      programId: farmKeys.programId,\r\n      id: farmKeys.id,\r\n      authority: farmKeys.authority,\r\n      lpVault: farmKeys.lpVault,\r\n      rewardVault,\r\n      userRewardToken,\r\n      owner: this.scope.ownerPubKey,\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [instruction],\r\n        instructionTypes: [instructionType],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>(params: {\r\n    farmInfoList: Record<string, FormatFarmInfoOut>;\r\n    feePayer?: PublicKey;\r\n    useSOLBalance?: boolean;\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    userAuxiliaryLedgers?: string[];\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n  }): Promise<MakeMultiTxData<T>> {\r\n    const {\r\n      farmInfoList,\r\n      useSOLBalance,\r\n      feePayer,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      txVersion,\r\n      computeBudgetConfig,\r\n    } = params;\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    const allFarmKeys = await this.scope.api.fetchFarmKeysById({\r\n      ids: Object.values(farmInfoList)\r\n        .map((f) => f.id)\r\n        .join(\",\"),\r\n    });\r\n    const farmKeyMap: { [key: string]: FormatFarmKeyOut } = allFarmKeys.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.id]: cur }),\r\n      {},\r\n    );\r\n    for (const farmInfo of Object.values(farmInfoList)) {\r\n      const { programId, lpMint: farmLpMint, rewardInfos, id } = farmInfo;\r\n      const version = FARM_PROGRAM_TO_VERSION[programId];\r\n\r\n      const lpMint = farmLpMint.address;\r\n      const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\r\n      let ownerLpTokenAccount = ownerMintToAccount[lpMint];\r\n\r\n      if (!ownerLpTokenAccount) {\r\n        const { account: _ownerLpAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: farmLpMint.programId,\r\n          mint: new PublicKey(lpMint),\r\n          notUseTokenAccount: lpMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: true,\r\n          associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerLpTokenAccount = _ownerLpAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n      ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n      for (const itemReward of rewardInfos) {\r\n        const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          if (rewardUseSOLBalance) {\r\n            const { account: _ownerRewardAccount, instructionParams } =\r\n              await this.scope.account.getOrCreateTokenAccount({\r\n                tokenProgram: itemReward.mint.programId,\r\n                mint: new PublicKey(itemReward.mint.address),\r\n                notUseTokenAccount: rewardUseSOLBalance,\r\n                createInfo: {\r\n                  payer: feePayer || this.scope.ownerPubKey,\r\n                  amount: 0,\r\n                },\r\n                owner: this.scope.ownerPubKey,\r\n                skipCloseAccount: !rewardUseSOLBalance,\r\n                associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n                checkCreateATAOwner,\r\n              });\r\n            ownerRewardAccount = _ownerRewardAccount!;\r\n            instructionParams && txBuilder.addInstruction(instructionParams);\r\n          } else {\r\n            const mint = new PublicKey(itemReward.mint.address);\r\n            ownerRewardAccount = this.scope.account.getAssociatedTokenAccount(mint);\r\n            txBuilder.addInstruction({\r\n              instructions: [\r\n                createAssociatedTokenAccountIdempotentInstruction(\r\n                  this.scope.ownerPubKey,\r\n                  ownerRewardAccount,\r\n                  this.scope.ownerPubKey,\r\n                  mint,\r\n                ),\r\n              ],\r\n            });\r\n          }\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount);\r\n      }\r\n\r\n      const farmKeys = farmKeyMap[id];\r\n      const insParams = {\r\n        amount: BN_ZERO,\r\n        owner: this.scope.ownerPubKey,\r\n        farmInfo,\r\n        farmKeys,\r\n        lpAccount: ownerLpTokenAccount,\r\n        rewardAccounts,\r\n        userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n      };\r\n\r\n      const withdrawInstruction =\r\n        version === 6\r\n          ? makeWithdrawInstructionV6(insParams)\r\n          : version === 5\r\n          ? makeWithdrawInstructionV5(insParams)\r\n          : makeWithdrawInstructionV3(insParams);\r\n\r\n      const insType = {\r\n        3: InstructionType.FarmV3Withdraw,\r\n        5: InstructionType.FarmV5Withdraw,\r\n        6: InstructionType.FarmV6Withdraw,\r\n      };\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [withdrawInstruction],\r\n        instructionTypes: [insType[version]],\r\n      });\r\n    }\r\n\r\n    if (txVersion === TxVersion.LEGACY)\r\n      return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n}\r\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\r\nimport { WSOLMint, chunkArray, solToWSol } from \"./\";\r\nimport { createLogger } from \"./logger\";\r\nimport { MINT_SIZE, TOKEN_PROGRAM_ID, getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\r\n\r\ninterface MultipleAccountsJsonRpcResponse {\r\n  jsonrpc: string;\r\n  id: string;\r\n  error?: {\r\n    code: number;\r\n    message: string;\r\n  };\r\n  result: {\r\n    context: { slot: number };\r\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\r\n  };\r\n}\r\n\r\nexport interface GetMultipleAccountsInfoConfig {\r\n  batchRequest?: boolean;\r\n  commitment?: Commitment;\r\n  chunkCount?: number;\r\n}\r\n\r\nconst logger = createLogger(\"Raydium_accountInfo_util\");\r\n\r\nexport async function getMultipleAccountsInfo(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<(AccountInfo<Buffer> | null)[]> {\r\n  const {\r\n    batchRequest,\r\n    commitment = \"confirmed\",\r\n    chunkCount = 100,\r\n  } = {\r\n    batchRequest: false,\r\n    ...config,\r\n  };\r\n\r\n  const chunkedKeys = chunkArray(publicKeys, chunkCount);\r\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\r\n\r\n  if (batchRequest) {\r\n    const batch = chunkedKeys.map((keys) => {\r\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\r\n      return {\r\n        methodName: \"getMultipleAccounts\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const _batch = chunkArray(batch, 10);\r\n\r\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\r\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\r\n    ).flat();\r\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\r\n      if (unsafeRes.error)\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\r\n\r\n      return unsafeRes.result.value.map((accountInfo) => {\r\n        if (accountInfo) {\r\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\r\n\r\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\r\n\r\n          return {\r\n            data: Buffer.from(data[0], \"base64\"),\r\n            executable,\r\n            lamports,\r\n            owner: new PublicKey(owner),\r\n            rentEpoch,\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n    });\r\n  } else {\r\n    try {\r\n      results = (await Promise.all(\r\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\r\n      )) as (AccountInfo<Buffer> | null)[][];\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return results.flat();\r\n}\r\n\r\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\r\n  connection: Connection,\r\n  publicKeysWithCustomFlag: T[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\r\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\r\n    connection,\r\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\r\n    config,\r\n  );\r\n\r\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\r\n}\r\n\r\nexport enum AccountType {\r\n  Uninitialized,\r\n  Mint,\r\n  Account,\r\n}\r\nexport const ACCOUNT_TYPE_SIZE = 1;\r\n\r\nexport async function fetchMultipleMintInfos({\r\n  connection,\r\n  mints,\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  mints: PublicKey[];\r\n  config?: { batchRequest?: boolean };\r\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\r\n  if (mints.length === 0) return {};\r\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\r\n    connection,\r\n    mints.map((i) => ({ pubkey: solToWSol(i) })),\r\n    config,\r\n  );\r\n\r\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\r\n  for (const i of mintInfos) {\r\n    if (!i.accountInfo || i.accountInfo.data.length < MINT_SIZE) {\r\n      console.log(\"invalid mint account\", i.pubkey.toBase58());\r\n      continue;\r\n    }\r\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\r\n    mintK[i.pubkey.toString()] = {\r\n      ...t,\r\n      programId: i.accountInfo?.owner || TOKEN_PROGRAM_ID,\r\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\r\n    };\r\n  }\r\n  mintK[PublicKey.default.toBase58()] = mintK[WSOLMint.toBase58()];\r\n\r\n  return mintK;\r\n}\r\n","import { get, set } from \"lodash\";\r\n\r\nexport type ModuleName = \"Common.Api\";\r\n\r\nexport enum LogLevel {\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug,\r\n}\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n  private name: string;\r\n  constructor(params: { name: string; logLevel?: LogLevel }) {\r\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\r\n    this.name = params.name;\r\n  }\r\n\r\n  set level(logLevel: LogLevel) {\r\n    this.logLevel = logLevel;\r\n  }\r\n  get time(): string {\r\n    return Date.now().toString();\r\n  }\r\n  get moduleName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private isLogLevel(level: LogLevel): boolean {\r\n    return level <= this.logLevel;\r\n  }\r\n\r\n  public error(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Error)) return this;\r\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public logWithError(...props): Logger {\r\n    // this.error(...props)\r\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\r\n    throw new Error(msg);\r\n  }\r\n\r\n  public warning(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\r\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public info(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Info)) return this;\r\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public debug(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\r\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\r\n    return this;\r\n  }\r\n}\r\n\r\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\r\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\r\n\r\nexport function createLogger(moduleName: string): Logger {\r\n  let logger = get(moduleLoggers, moduleName);\r\n  if (!logger) {\r\n    // default level is error\r\n    const logLevel = get(moduleLevels, moduleName);\r\n\r\n    logger = new Logger({ name: moduleName, logLevel });\r\n    set(moduleLoggers, moduleName, logger);\r\n  }\r\n\r\n  return logger;\r\n}\r\n\r\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\r\n  set(moduleLevels, moduleName, level);\r\n\r\n  const logger = get(moduleLoggers, moduleName);\r\n  if (logger) logger.level = level;\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { CurrencyAmount, TokenAmount } from \"../module/amount\";\r\nimport { Currency } from \"../module/currency\";\r\nimport { Fraction } from \"../module/fraction\";\r\nimport { Percent } from \"../module/percent\";\r\nimport { Price } from \"../module/price\";\r\nimport { Token } from \"../module/token\";\r\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\nimport { parseBigNumberish } from \"./constant\";\r\nimport { mul } from \"./fractionUtil\";\r\nimport { notInnerObject } from \"./utility\";\r\n\r\nexport const BN_ZERO = new BN(0);\r\nexport const BN_ONE = new BN(1);\r\nexport const BN_TWO = new BN(2);\r\nexport const BN_THREE = new BN(3);\r\nexport const BN_FIVE = new BN(5);\r\nexport const BN_TEN = new BN(10);\r\nexport const BN_100 = new BN(100);\r\nexport const BN_1000 = new BN(1000);\r\nexport const BN_10000 = new BN(10000);\r\nexport type BigNumberish = BN | string | number | bigint;\r\nexport type Numberish = number | string | bigint | Fraction | BN;\r\n\r\nexport function tenExponential(shift: BigNumberish): BN {\r\n  return BN_TEN.pow(parseBigNumberish(shift));\r\n}\r\n\r\n/**\r\n *\r\n * @example\r\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\r\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\r\n */\r\nexport function parseNumberInfo(n: Numberish | undefined): {\r\n  denominator: string;\r\n  numerator: string;\r\n  sign?: string;\r\n  int?: string;\r\n  dec?: string;\r\n} {\r\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\r\n  if (n instanceof BN) {\r\n    return { numerator: n.toString(), denominator: \"1\" };\r\n  }\r\n\r\n  if (n instanceof Fraction) {\r\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\r\n  }\r\n\r\n  const s = String(n);\r\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  const denominator = \"1\" + \"0\".repeat(dec.length);\r\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\r\n  return { denominator, numerator, sign, int, dec };\r\n}\r\n\r\n// round up\r\nexport function divCeil(a: BN, b: BN): BN {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const dm = a.divmod(b);\r\n\r\n  // Fast case - exact division\r\n  if (dm.mod.isZero()) return dm.div;\r\n\r\n  // Round up\r\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\r\n}\r\n\r\nexport function shakeFractionDecimal(n: Fraction): string {\r\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  return `${sign}${int}`;\r\n}\r\n\r\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\r\n  if (n instanceof BN) return n;\r\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\r\n}\r\n\r\nexport function toFraction(value: Numberish): Fraction {\r\n  //  to complete math format(may have decimal), not int\r\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\r\n\r\n  if (value instanceof Price) return value.adjusted;\r\n\r\n  // to complete math format(may have decimal), not BN\r\n  if (value instanceof TokenAmount)\r\n    try {\r\n      return toFraction(value.toExact());\r\n    } catch {\r\n      return new Fraction(BN_ZERO);\r\n    }\r\n\r\n  // do not ideal with other fraction value\r\n  if (value instanceof Fraction) return value;\r\n\r\n  // wrap to Fraction\r\n  const n = String(value);\r\n  const details = parseNumberInfo(n);\r\n  return new Fraction(details.numerator, details.denominator);\r\n}\r\n\r\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\r\n}\r\n\r\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\r\n}\r\n\r\n/**\r\n * @example\r\n * toPercent(3.14) // => Percent { 314.00% }\r\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\r\n */\r\nexport function toPercent(\r\n  n: Numberish,\r\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\r\n): Percent {\r\n  const { numerator, denominator } = parseNumberInfo(n);\r\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\r\n}\r\n\r\nexport function toTokenPrice(params: {\r\n  token: TokenJson | Token | SplToken;\r\n  numberPrice: Numberish;\r\n  decimalDone?: boolean;\r\n}): Price {\r\n  const { token, numberPrice, decimalDone } = params;\r\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\r\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\r\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\r\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\r\n\r\n  return new Price({\r\n    baseToken: usdCurrency,\r\n    denominator: parsedDenominator.toString(),\r\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\r\n    numerator: parsedNumerator.toString(),\r\n  });\r\n}\r\n\r\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\r\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\r\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\r\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\r\n}\r\n\r\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\r\n  if (!price || !amount) return toUsdCurrency(0);\r\n  return toUsdCurrency(mul(amount, price)!);\r\n}\r\n\r\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\r\n  if (n == null) return undefined;\r\n  const { numerator, denominator } = parseNumberInfo(n.toString());\r\n  return new Fraction(numerator, denominator);\r\n}\r\n\r\nexport function isDecimal(val: unknown): boolean {\r\n  return val instanceof Decimal;\r\n}\r\n\r\nexport function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\r\n  // @ts-expect-error no need type for inner code\r\n  return isDecimal(info)\r\n    ? decimalToFraction(info as any)\r\n    : Array.isArray(info)\r\n    ? info.map((k) => recursivelyDecimalToFraction(k))\r\n    : notInnerObject(info)\r\n    ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\r\n    : info;\r\n}\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { BigNumberish, BN_TEN } from \"../common/bignumber\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common\";\r\nimport { Currency } from \"./currency\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_amount\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nexport function splitNumber(num: string, decimals: number): [string, string] {\r\n  let integral = \"0\";\r\n  let fractional = \"0\";\r\n\r\n  if (num.includes(\".\")) {\r\n    const splited = num.split(\".\");\r\n    if (splited.length === 2) {\r\n      [integral, fractional] = splited;\r\n      fractional = fractional.padEnd(decimals, \"0\");\r\n    } else {\r\n      logger.logWithError(`invalid number string, num: ${num}`);\r\n    }\r\n  } else {\r\n    integral = num;\r\n  }\r\n\r\n  // fix decimals is 0\r\n  return [integral, fractional.slice(0, decimals) || fractional];\r\n}\r\n\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token;\r\n  protected logger: Logger;\r\n\r\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.token = token;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n  public gt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\r\n    return new TokenAmount(this.token, this.raw.add(other.raw));\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\r\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.token.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n  protected logger: Logger;\r\n\r\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.currency = currency;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n\r\n  /**\r\n   * a greater than b\r\n   */\r\n  public gt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\r\n  }\r\n\r\n  public sub(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\r\n\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\r\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\r\nimport _toFarmat from \"toformat\";\r\n\r\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\r\ninterface FormatOptions {\r\n  decimalSeparator?: string;\r\n  groupSeparator?: string;\r\n  groupSize?: number;\r\n  fractionGroupSeparator?: string;\r\n  fractionGroupSize?: number;\r\n}\r\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\r\n  new (value: BigSource): WrappedBig;\r\n  (value: BigSource): WrappedBig;\r\n  (): WrappedBigConstructor;\r\n\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedBig extends Big {\r\n  add(n: BigSource): WrappedBig;\r\n  abs(): WrappedBig;\r\n  div(n: BigSource): WrappedBig;\r\n  minus(n: BigSource): WrappedBig;\r\n  mod(n: BigSource): WrappedBig;\r\n  mul(n: BigSource): WrappedBig;\r\n  plus(n: BigSource): WrappedBig;\r\n  pow(exp: number): WrappedBig;\r\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\r\n  sqrt(): WrappedBig;\r\n  sub(n: BigSource): WrappedBig;\r\n  times(n: BigSource): WrappedBig;\r\n  toFormat(): string;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\ntype DecimalConstructor = typeof Decimal;\r\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\r\n  new (value: Numeric): WrappedDecimal;\r\n  clone(config?: Config): WrappedDecimalConstructor;\r\n  config(config: Config): WrappedDecimal;\r\n  set(config: Config): WrappedDecimal;\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedDecimal extends Decimal {\r\n  absoluteValue(): WrappedDecimal;\r\n  abs(): WrappedDecimal;\r\n  dividedBy(y: Numeric): WrappedDecimal;\r\n  div(y: Numeric): WrappedDecimal;\r\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\r\n  idiv(y: Numeric): WrappedDecimal;\r\n  logarithm(base?: Numeric): WrappedDecimal;\r\n  log(base?: Numeric): WrappedDecimal;\r\n  minus(y: Numeric): WrappedDecimal;\r\n  sub(y: Numeric): WrappedDecimal;\r\n  modulo(y: Numeric): WrappedDecimal;\r\n  mod(y: Numeric): WrappedDecimal;\r\n  naturalExponetial(): WrappedDecimal;\r\n  exp(): WrappedDecimal;\r\n  naturalLogarithm(): WrappedDecimal;\r\n  ln(): WrappedDecimal;\r\n  negated(): WrappedDecimal;\r\n  neg(): WrappedDecimal;\r\n  plus(y: Numeric): WrappedDecimal;\r\n  add(y: Numeric): WrappedDecimal;\r\n  squareRoot(): WrappedDecimal;\r\n  sqrt(): WrappedDecimal;\r\n  times(y: Numeric): WrappedDecimal;\r\n  mul(y: Numeric): WrappedDecimal;\r\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\r\n  todp(dp?: number, rm?: number): WrappedDecimal;\r\n  toInteger(): WrappedDecimal;\r\n  toint(): WrappedDecimal;\r\n  toPower(y: Numeric): WrappedDecimal;\r\n  pow(y: Numeric): WrappedDecimal;\r\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\r\n  tosd(sd?: number, rm?: number): WrappedDecimal;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\nconst toFormat: {\r\n  (fn: BigConstructor): WrappedBigConstructor;\r\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\r\n} = _toFarmat;\r\nexport default toFormat;\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\nimport _Decimal from \"decimal.js-light\";\r\n\r\nimport { BigNumberish } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common/constant\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\n\r\nconst logger = createLogger(\"module/fraction\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nconst Decimal = toFormat(_Decimal);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\r\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\r\n  [Rounding.ROUND_UP]: _Big.roundUp,\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: BN;\r\n  public readonly denominator: BN;\r\n\r\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\r\n    this.numerator = parseBigNumberish(numerator);\r\n    this.denominator = parseBigNumberish(denominator);\r\n  }\r\n\r\n  public get quotient(): BN {\r\n    return this.numerator.div(this.denominator);\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  }\r\n\r\n  public add(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public sub(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public mul(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\r\n  }\r\n\r\n  public div(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\r\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\r\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding] || 1;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.numerator.isZero();\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { BigNumberish } from \"./bignumber\";\r\nimport { createLogger } from \"./logger\";\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nconst MAX_SAFE = 0x1fffffffffffff;\r\n\r\nexport function parseBigNumberish(value: BigNumberish): BN {\r\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\r\n  // BN\r\n  if (value instanceof BN) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === \"string\") {\r\n    if (value.match(/^-?[0-9]+$/)) {\r\n      return new BN(value);\r\n    }\r\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\r\n  }\r\n\r\n  if (typeof value === \"number\") {\r\n    if (value % 1) {\r\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\r\n    }\r\n\r\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\r\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\r\n    }\r\n\r\n    return new BN(String(value));\r\n  }\r\n\r\n  if (typeof value === \"bigint\") {\r\n    return new BN(value.toString());\r\n  }\r\n  logger.error(`invalid BigNumberish value: ${value}`);\r\n  return new BN(0); // never reach, because logWithError will throw error\r\n}","import { PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nexport const SOL_INFO: TokenInfo = {\r\n  chainId: 101,\r\n  address: PublicKey.default.toBase58(),\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"SOL\",\r\n  name: \"solana\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n\r\nexport const TOKEN_WSOL: TokenInfo = {\r\n  chainId: 101,\r\n  address: \"So11111111111111111111111111111111111111112\",\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"WSOL\",\r\n  name: \"Wrapped SOL\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\r\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\r\n\r\n/**\r\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n */\r\nexport interface TokenProps {\r\n  mint: PublicKeyish;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n  skipMint?: boolean;\r\n  isToken2022?: boolean;\r\n}\r\n\r\nexport class Token {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n  public readonly isToken2022: boolean;\r\n\r\n  public readonly mint: PublicKey;\r\n  public static readonly WSOL: Token = new Token({\r\n    ...TOKEN_WSOL,\r\n    mint: TOKEN_WSOL.address,\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\r\n   */\r\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\r\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\r\n      this.decimals = TOKEN_WSOL.decimals;\r\n      this.symbol = TOKEN_WSOL.symbol;\r\n      this.name = TOKEN_WSOL.name;\r\n      this.mint = new PublicKey(TOKEN_WSOL.address);\r\n      this.isToken2022 = false;\r\n      return;\r\n    }\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol || mint.toString().substring(0, 6);\r\n    this.name = name || mint.toString().substring(0, 6);\r\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\r\n    this.isToken2022 = isToken2022;\r\n  }\r\n\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.mint.equals(other.mint);\r\n  }\r\n}\r\n","import { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\ninterface AccountMetaProps {\r\n  pubkey: PublicKey;\r\n  isSigner?: boolean;\r\n  isWritable?: boolean;\r\n}\r\n\r\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\r\n  return {\r\n    pubkey,\r\n    isWritable,\r\n    isSigner,\r\n  };\r\n}\r\n\r\nexport const commonSystemAccountMeta = [\r\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n];\r\n\r\nexport type PublicKeyish = PublicKey | string;\r\n\r\nexport function validateAndParsePublicKey({\r\n  publicKey: orgPubKey,\r\n  transformSol,\r\n}: {\r\n  publicKey: PublicKeyish;\r\n  transformSol?: boolean;\r\n}): PublicKey {\r\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\r\n\r\n  if (publicKey instanceof PublicKey) {\r\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\r\n    return publicKey;\r\n  }\r\n\r\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\r\n\r\n  if (typeof publicKey === \"string\") {\r\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\r\n    try {\r\n      const key = new PublicKey(publicKey);\r\n      return key;\r\n    } catch {\r\n      throw new Error(\"invalid public key\");\r\n    }\r\n  }\r\n\r\n  throw new Error(\"invalid public key\");\r\n}\r\n\r\nexport function tryParsePublicKey(v: string): PublicKey | string {\r\n  try {\r\n    return new PublicKey(v);\r\n  } catch (e) {\r\n    return v;\r\n  }\r\n}\r\n\r\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\r\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\r\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\r\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\r\n\r\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\r\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\r\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\r\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\r\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\r\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\r\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\r\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\r\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\r\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\r\nexport const SOLMint = PublicKey.default;\r\n\r\nexport function solToWSol(mint: PublicKeyish): PublicKey {\r\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\r\n}\r\n","import { SOL_INFO } from \"../raydium/token/constant\";\r\n\r\nimport { Token } from \"./token\";\r\n\r\ninterface CurrencyProps {\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n/**\r\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n * The only instance of the base class `Currency` is SOL.\r\n */\r\nexport class Currency {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\r\n   * @param decimals - decimals of the currency\r\n   * @param symbol - symbol of the currency\r\n   * @param name - name of the currency\r\n   */\r\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { Rounding } from \"../common\";\r\nimport { Fraction } from \"./fraction\";\r\n\r\nexport const _100_PERCENT = new Fraction(new BN(100));\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { Rounding } from \"../common\";\r\nimport { BigNumberish, tenExponential } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_price\");\r\n\r\ninterface PriceProps {\r\n  baseToken: Token;\r\n  denominator: BigNumberish;\r\n  quoteToken: Token;\r\n  numerator: BigNumberish;\r\n}\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseToken: Token; // input i.e. denominator\r\n  public readonly quoteToken: Token; // output i.e. numerator\r\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n  public readonly scalar: Fraction;\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(params: PriceProps) {\r\n    const { baseToken, quoteToken, numerator, denominator } = params;\r\n    super(numerator, denominator);\r\n\r\n    this.baseToken = baseToken;\r\n    this.quoteToken = quoteToken;\r\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.mul(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price({\r\n      baseToken: this.quoteToken,\r\n      quoteToken: this.baseToken,\r\n      denominator: this.numerator,\r\n      numerator: this.denominator,\r\n    });\r\n  }\r\n\r\n  public mul(other: Price): Price {\r\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\r\n\r\n    const fraction = super.mul(other);\r\n    return new Price({\r\n      baseToken: this.baseToken,\r\n      quoteToken: other.quoteToken,\r\n      denominator: fraction.denominator,\r\n      numerator: fraction.numerator,\r\n    });\r\n  }\r\n\r\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\n\r\nimport { tryParsePublicKey } from \"./pubKey\";\r\n\r\nexport async function sleep(ms: number): Promise<void> {\r\n  new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function getTimestamp(): number {\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function notInnerObject(v: unknown): v is Record<string, any> {\r\n  return (\r\n    typeof v === \"object\" &&\r\n    v !== null &&\r\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\r\n  );\r\n}\r\n\r\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\r\n  // @ts-expect-error no need type for inner code\r\n  return typeof jsonInfo === \"string\"\r\n    ? tryParsePublicKey(jsonInfo)\r\n    : Array.isArray(jsonInfo)\r\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\r\n    : notInnerObject(jsonInfo)\r\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\r\n    : jsonInfo;\r\n}\r\n","/**\r\n * https://youmightnotneed.com/lodash/\r\n */\r\n\r\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\r\n  const tmp = [...arr];\r\n  if (chunkSize <= 0) return cache;\r\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\r\n  return cache;\r\n}\r\n\r\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\r\n}\r\n\r\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\r\n}\r\n\r\nexport function uniq<T>(arr: T[]): T[] {\r\n  return [...new Set(arr)];\r\n}\r\n","import { Keypair, PublicKey, Signer } from \"@solana/web3.js\";\r\n\r\ntype _Owner = Keypair | PublicKey;\r\n\r\nexport class Owner {\r\n  private readonly _owner: _Owner;\r\n\r\n  constructor(owner: _Owner) {\r\n    this._owner = owner;\r\n  }\r\n\r\n  get publicKey(): PublicKey {\r\n    if (Owner.isKeyPair(this._owner)) {\r\n      return this._owner.publicKey;\r\n    }\r\n\r\n    return this._owner;\r\n  }\r\n\r\n  get signer(): Signer | undefined {\r\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\r\n  }\r\n\r\n  get isKeyPair(): boolean {\r\n    return Owner.isKeyPair(this._owner);\r\n  }\r\n\r\n  get isPublicKey(): boolean {\r\n    return Owner.isPublicKey(this._owner);\r\n  }\r\n\r\n  static isKeyPair(owner: _Owner): owner is Keypair {\r\n    return (owner as Keypair).secretKey !== undefined;\r\n  }\r\n\r\n  static isPublicKey(owner: _Owner): owner is PublicKey {\r\n    return !Owner.isKeyPair(owner);\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { findProgramAddress } from \"./txTool/txUtils\";\r\n\r\nexport function getATAAddress(\r\n  owner: PublicKey,\r\n  mint: PublicKey,\r\n  programId?: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\r\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\r\n  );\r\n}\r\n","import {\r\n  Commitment,\r\n  ComputeBudgetProgram,\r\n  Connection,\r\n  EpochInfo,\r\n  Keypair,\r\n  PublicKey,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"../logger\";\r\nimport { CacheLTA } from \"./lookupTable\";\r\nimport { InstructionType } from \"./txType\";\r\n\r\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst logger = createLogger(\"Raydium_txUtil\");\r\n\r\nexport const MAX_BASE64_SIZE = 1644;\r\n\r\nexport function addComputeBudget(config: ComputeBudgetConfig): {\r\n  instructions: TransactionInstruction[];\r\n  instructionTypes: string[];\r\n} {\r\n  const ins: TransactionInstruction[] = [];\r\n  const insTypes: string[] = [];\r\n  if (config.microLamports) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\r\n    insTypes.push(InstructionType.SetComputeUnitPrice);\r\n  }\r\n  if (config.units) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\r\n    insTypes.push(InstructionType.SetComputeUnitLimit);\r\n  }\r\n\r\n  return {\r\n    instructions: ins,\r\n    instructionTypes: insTypes,\r\n  };\r\n}\r\n\r\nexport async function getRecentBlockHash(connection: Connection, propsCommitment?: Commitment): Promise<string> {\r\n  const commitment = propsCommitment ?? \"confirmed\";\r\n  return (await connection.getLatestBlockhash?.({ commitment }))?.blockhash;\r\n}\r\n\r\nexport async function confirmTransaction(connection: Connection, txId: string): Promise<string> {\r\n  connection.getSignatureStatuses([txId]);\r\n  return new Promise((resolve, reject) => {\r\n    const id = setTimeout(reject, 60 * 1000);\r\n    connection.onSignature(\r\n      txId,\r\n      (signatureResult) => {\r\n        clearTimeout(id);\r\n        if (!signatureResult.err) {\r\n          resolve(\"\");\r\n          return;\r\n        }\r\n        reject(Object.assign(signatureResult.err, { txId }));\r\n      },\r\n      \"confirmed\",\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Forecast transaction size\r\n */\r\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\r\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\r\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\r\n\r\n  const transaction = new Transaction();\r\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\r\n  transaction.feePayer = signers[0];\r\n  transaction.add(...instructions);\r\n\r\n  try {\r\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Simulates multiple instruction\r\n */\r\n/**\r\n * Simulates multiple instruction\r\n */\r\nexport async function simulateMultipleInstruction(\r\n  connection: Connection,\r\n  instructions: TransactionInstruction[],\r\n  keyword: string,\r\n  batchRequest = true,\r\n): Promise<string[]> {\r\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\r\n\r\n  const transactions: Transaction[] = [];\r\n\r\n  let transaction = new Transaction();\r\n  transaction.feePayer = feePayer;\r\n\r\n  for (const instruction of instructions) {\r\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\r\n      transactions.push(transaction);\r\n      transaction = new Transaction();\r\n      transaction.feePayer = feePayer;\r\n    }\r\n    transaction.add(instruction);\r\n  }\r\n  if (transaction.instructions.length > 0) {\r\n    transactions.push(transaction);\r\n  }\r\n\r\n  let results: SimulatedTransactionResponse[] = [];\r\n\r\n  try {\r\n    results = await simulateTransaction(connection, transactions, batchRequest);\r\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  const logs: string[] = [];\r\n  for (const result of results) {\r\n    logger.debug(\"simulate result:\", result);\r\n\r\n    if (result.logs) {\r\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\r\n      logger.debug(\"filteredLog:\", logs);\r\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\r\n      logs.push(...filteredLog);\r\n    }\r\n  }\r\n\r\n  return logs;\r\n}\r\n\r\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\r\n  const results = log.match(/{[\"\\w:,]+}/g);\r\n  if (!results || results.length !== 1) {\r\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\r\n  }\r\n\r\n  return results[0];\r\n}\r\n\r\nexport function parseSimulateValue(log: string, key: string): any {\r\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\r\n\r\n  const results = reg.exec(log);\r\n  if (!results || results.length !== 2) {\r\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\r\n  }\r\n\r\n  return results[1];\r\n}\r\n\r\nexport interface ProgramAddress {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n}\r\nexport function findProgramAddress(\r\n  seeds: Array<Buffer | Uint8Array>,\r\n  programId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\r\n  return { publicKey, nonce };\r\n}\r\n\r\nexport async function simulateTransaction(\r\n  connection: Connection,\r\n  transactions: Transaction[],\r\n  batchRequest?: boolean,\r\n): Promise<any[]> {\r\n  let results: any[] = [];\r\n  if (batchRequest) {\r\n    const getLatestBlockhash = await connection.getLatestBlockhash();\r\n\r\n    const encodedTransactions: string[] = [];\r\n    for (const transaction of transactions) {\r\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\r\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const message = transaction._compile();\r\n      const signData = message.serialize();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const wireTransaction = transaction._serialize(signData);\r\n      const encodedTransaction = wireTransaction.toString(\"base64\");\r\n\r\n      encodedTransactions.push(encodedTransaction);\r\n    }\r\n\r\n    const batch = encodedTransactions.map((keys) => {\r\n      const args = connection._buildArgs([keys], undefined, \"base64\");\r\n      return {\r\n        methodName: \"simulateTransaction\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const reqData: { methodName: string; args: any[] }[][] = [];\r\n    const itemReqIndex = 20;\r\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\r\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    results = await (\r\n      await Promise.all(\r\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\r\n      )\r\n    ).flat();\r\n  } else {\r\n    try {\r\n      results = await Promise.all(\r\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function checkLegacyTxSize({\r\n  instructions,\r\n  payer,\r\n  signers,\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  signers: PublicKey[];\r\n}): boolean {\r\n  return forecastTransactionSize(instructions, [payer, ...signers]);\r\n}\r\n\r\nexport function checkV0TxSize({\r\n  instructions,\r\n  payer,\r\n  lookupTableAddressAccount,\r\n  recentBlockhash = Keypair.generate().publicKey.toString(),\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  lookupTableAddressAccount?: CacheLTA;\r\n  recentBlockhash?: string;\r\n}): boolean {\r\n  const transactionMessage = new TransactionMessage({\r\n    payerKey: payer,\r\n    recentBlockhash,\r\n    instructions,\r\n  });\r\n\r\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\r\n  try {\r\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\r\n    return buildLength < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\r\n  time: 0,\r\n  data: undefined,\r\n};\r\n\r\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\r\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\r\n    const data = await connection.getEpochInfo();\r\n    epochInfoCache = {\r\n      time: Date.now(),\r\n      data,\r\n    };\r\n    return data;\r\n  } else {\r\n    return epochInfoCache.data;\r\n  }\r\n}\r\n\r\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\r\n  if (Buffer.isBuffer(arr)) {\r\n    return arr;\r\n  } else if (arr instanceof Uint8Array) {\r\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\r\n  } else {\r\n    return Buffer.from(arr);\r\n  }\r\n};\r\n\r\nexport const txToBase64 = (transaction: Transaction | VersionedTransaction): string => {\r\n  let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  try {\r\n    return serialized instanceof Buffer ? serialized.toString(\"base64\") : Buffer.from(serialized).toString(\"base64\");\r\n  } catch {\r\n    return serialized.toString(\"base64\");\r\n  }\r\n};\r\n\r\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\r\n  const allBase64: string[] = [];\r\n  transactions.forEach((transaction) => {\r\n    if (transaction instanceof Transaction) {\r\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\r\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\r\n    }\r\n    allBase64.push(txToBase64(transaction));\r\n  });\r\n  console.log(\"simulate tx string:\", allBase64);\r\n\r\n  return allBase64;\r\n}\r\n\r\nexport function transformTxToBase64(tx: Transaction | VersionedTransaction): string {\r\n  let serialized = tx.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (tx instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  return serialized.toString(\"base64\");\r\n}\r\n","export enum TxVersion {\r\n  \"V0\",\r\n  \"LEGACY\",\r\n}\r\n\r\nexport const InstructionType = {\r\n  CreateAccount: \"CreateAccount\",\r\n  InitAccount: \"InitAccount\",\r\n  CreateATA: \"CreateATA\",\r\n  CloseAccount: \"CloseAccount\",\r\n  TransferAmount: \"TransferAmount\",\r\n  InitMint: \"InitMint\",\r\n  MintTo: \"MintTo\",\r\n\r\n  InitMarket: \"InitMarket\", // create market main ins\r\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\r\n\r\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\r\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\r\n\r\n  // CLMM\r\n  ClmmCreatePool: \"ClmmCreatePool\",\r\n  ClmmOpenPosition: \"ClmmOpenPosition\",\r\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\r\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\r\n  ClmmClosePosition: \"ClmmClosePosition\",\r\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\r\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\r\n  ClmmInitReward: \"ClmmInitReward\",\r\n  ClmmSetReward: \"ClmmSetReward\",\r\n  ClmmCollectReward: \"ClmmCollectReward\",\r\n  ClmmLockPosition: \"ClmmLockPosition\",\r\n  ClmmHarvestLockPosition: \"ClmmHarvestLockPosition\",\r\n\r\n  AmmV4Swap: \"AmmV4Swap\",\r\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\r\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\r\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\r\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\r\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\r\n  AmmV4CreatePool: \"AmmV4CreatePool\",\r\n  AmmV4InitPool: \"AmmV4InitPool\",\r\n\r\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\r\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\r\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\r\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\r\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\r\n\r\n  RouteSwap: \"RouteSwap\",\r\n  RouteSwap1: \"RouteSwap1\",\r\n  RouteSwap2: \"RouteSwap2\",\r\n\r\n  FarmV3Deposit: \"FarmV3Deposit\",\r\n  FarmV3Withdraw: \"FarmV3Withdraw\",\r\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\r\n\r\n  FarmV4Withdraw: \"FarmV4Withdraw\",\r\n\r\n  FarmV5Deposit: \"FarmV5Deposit\",\r\n  FarmV5Withdraw: \"FarmV5Withdraw\",\r\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\r\n\r\n  FarmV6Deposit: \"FarmV6Deposit\",\r\n  FarmV6Withdraw: \"FarmV6Withdraw\",\r\n  FarmV6Create: \"FarmV6Create\",\r\n  FarmV6Restart: \"FarmV6Restart\",\r\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\r\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\r\n\r\n  CpmmCreatePool: \"CpmmCreatePool\",\r\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\r\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\r\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\r\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\r\n\r\n  CpmmLockLp: \"CpmmLockLp\",\r\n  CpmmCollectLockFee: \"CpmmCollectLockFee\",\r\n  TransferTip: \"TransferTip\",\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\n// raydium\r\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\r\n// temp fusion\r\nexport const FARM_PROGRAM_ID_V4 = new PublicKey(\"CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T\");\r\n// \"fusion\"\r\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\r\n// echosystem\r\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\r\n\r\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\r\n\r\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\r\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\r\n\r\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\r\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\r\nexport const LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\r\nexport const CLMM_LOCK_PROGRAM_ID = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const CLMM_LOCK_AUTH_ID = new PublicKey(\"kN1kEznaF5Xbd8LYuqtEFcxzWSBk5Fv6ygX6SqEGJVy\");\r\n\r\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\n\r\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\r\nexport const FEE_DESTINATION_ID = new PublicKey(\"7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5\");\r\n\r\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\r\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\r\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\r\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\r\n\r\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C\");\r\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL\");\r\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8\");\r\n\r\nexport const LOCK_CPMM_PROGRAM = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\n\r\nexport const LOCK_CPMM_AUTH = new PublicKey(\"3f7GcQFG397GAaEnv51zR6tsTVihYRydnydDD1cXekxH\");\r\n\r\nexport const LAUNCHPAD_PROGRAM = new PublicKey(\"LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj\");\r\nexport const LAUNCHPAD_AUTH = new PublicKey(\"WLHv2UAZm6z4KyaaELi5pjdbJh6RESMva1Rnn8pJVVh\");\r\n\r\nexport const DEV_LAUNCHPAD_PROGRAM = new PublicKey(\"DRay6fNdQ5J82H7xV6uq2aV3mNrUZ1J4PgSKsWgptcm6\");\r\nexport const DEV_LAUNCHPAD_AUTH = new PublicKey(\"5xqNaZXX5eUi4p5HU4oz9i5QnwRNT2y6oN7yyn4qENeq\");\r\n\r\nexport const LAUNCHPAD_PLATFORM = new PublicKey(\"4Bu96XjU84XjPDSpveTVf6LYGCkfW5FK7SNkREWcEfV4\");\r\n\r\nexport const LAUNCHPAD_CONFIG = new PublicKey(\"6s1xP3hpbAfFoNtUNF8mfHsjr2Bd97JxFJRWLbL6aHuX\");\r\n\r\nexport const IDO_ALL_PROGRAM = {\r\n  IDO_PROGRAM_ID_V1,\r\n  IDO_PROGRAM_ID_V2,\r\n  IDO_PROGRAM_ID_V3,\r\n  IDO_PROGRAM_ID_V4,\r\n};\r\n\r\nexport const ALL_PROGRAM_ID = {\r\n  AMM_V4,\r\n  AMM_STABLE,\r\n\r\n  CLMM_PROGRAM_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_LOCK_AUTH_ID,\r\n\r\n  FARM_PROGRAM_ID_V3,\r\n  FARM_PROGRAM_ID_V4,\r\n  FARM_PROGRAM_ID_V5,\r\n  FARM_PROGRAM_ID_V6,\r\n\r\n  OPEN_BOOK_PROGRAM,\r\n  SERUM_PROGRAM_ID_V3,\r\n\r\n  UTIL1216,\r\n\r\n  Router,\r\n\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  LOCK_CPMM_PROGRAM,\r\n  LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH,\r\n\r\n  LAUNCHPAD_PLATFORM,\r\n  LAUNCHPAD_CONFIG,\r\n\r\n  FEE_DESTINATION_ID,\r\n\r\n  MODEL_DATA_PUBKEY,\r\n};\r\n\r\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\r\n\r\nexport const DEVNET_PROGRAM_ID: typeof ALL_PROGRAM_ID = {\r\n  OPEN_BOOK_PROGRAM: new PublicKey(\"EoTcMgcDRTJVZDMZWBoU6rhYHZfkNTVEAfz3uUJRcYGj\"),\r\n  SERUM_PROGRAM_ID_V3: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n  AMM_V4: new PublicKey(\"DRaya7Kj3aMWQSy19kSjvmuwq9docCHofyP9kanQGaav\"),\r\n  AMM_STABLE: new PublicKey(\"DRayDdXc1NZQ9C3hRWmoSf8zK4iapgMnjdNZWrfwsP8m\"),\r\n\r\n  CLMM_PROGRAM_ID: new PublicKey(\"DRayAUgENGQBKVaX8owNhgzkEDyoHTGVEGHVJT1E9pfH\"),\r\n  CLMM_LOCK_PROGRAM_ID: new PublicKey(\"DRay25Usp3YJAi7beckgpGUC7mGJ2cR1AVPxhYfwVCUX\"),\r\n  CLMM_LOCK_AUTH_ID: new PublicKey(\"6Aoh8h2Lw2m5UGxYR8AdAL87jTWYeKoxM52mJRzfYwN\"),\r\n\r\n  CREATE_CPMM_POOL_PROGRAM: new PublicKey(\"DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb\"),\r\n  CREATE_CPMM_POOL_AUTH: new PublicKey(\"CXniRufdq5xL8t8jZAPxsPZDpuudwuJSPWnbcD5Y5Nxq\"),\r\n  CREATE_CPMM_POOL_FEE_ACC: new PublicKey(\"3oE58BKVt8KuYkGxx8zBojugnymWmBiyafWgMrnb6eYy\"),\r\n\r\n  LOCK_CPMM_PROGRAM: new PublicKey(\"DRay25Usp3YJAi7beckgpGUC7mGJ2cR1AVPxhYfwVCUX\"),\r\n  LOCK_CPMM_AUTH: new PublicKey(\"7qWVV8UY2bRJfDLP4s37YzBPKUkVB46DStYJBpYbQzu3\"),\r\n\r\n  UTIL1216: PublicKey.default,\r\n\r\n  Router: new PublicKey(\"DRaybByLpbUL57LJARs3j8BitTxVfzBg351EaMr5UTCd\"),\r\n\r\n  FARM_PROGRAM_ID_V3: new PublicKey(\"DRayWyrLmEW5KEeqs8kdTMMaBabapqagaBC7KWpGtJeZ\"),\r\n  FARM_PROGRAM_ID_V4: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n  FARM_PROGRAM_ID_V5: new PublicKey(\"DRayiCGSZgku1GTK6rXD6mVDdingXy6APAH1R6R5L2LC\"),\r\n  FARM_PROGRAM_ID_V6: new PublicKey(\"DRayzbYakXs45ELHkzH6vC3fuhQqTAnv5A68gdFuvZyZ\"),\r\n\r\n  LAUNCHPAD_PROGRAM: new PublicKey(\"DRay6fNdQ5J82H7xV6uq2aV3mNrUZ1J4PgSKsWgptcm6\"),\r\n  LAUNCHPAD_AUTH: new PublicKey(\"5xqNaZXX5eUi4p5HU4oz9i5QnwRNT2y6oN7yyn4qENeq\"),\r\n\r\n  LAUNCHPAD_PLATFORM: new PublicKey(\"2Jx4KTDrVSdWNazuGpcA8n3ZLTRGGBDxAWhuKe2Xcj2a\"),\r\n  LAUNCHPAD_CONFIG: new PublicKey(\"7ZR4zD7PYfY2XxoG1Gxcy2EgEeGYrpxrwzPuwdUBssEt\"),\r\n\r\n  FEE_DESTINATION_ID: new PublicKey(\"9y8ENuuZ3b19quffx9hQvRVygG5ky6snHfRvGpuSfeJy\"),\r\n\r\n  MODEL_DATA_PUBKEY: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n};\r\n","import { EpochInfo } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { TransferFee, TransferFeeConfig } from \"@solana/spl-token\";\r\n\r\nimport { TransferFeeDataBaseType } from \"../api/type\";\r\nimport { GetTransferAmountFee } from \"../raydium/type\";\r\n\r\nconst POINT = 10_000;\r\nexport function getTransferAmountFee(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function getTransferAmountFeeV2(\r\n  amount: BN,\r\n  _feeConfig: TransferFeeDataBaseType | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (_feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const feeConfig = {\r\n    ..._feeConfig,\r\n    olderTransferFee: {\r\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\r\n    },\r\n    newerTransferFee: {\r\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\r\n    },\r\n  };\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function minExpirationTime(\r\n  expirationTime1: number | undefined,\r\n  expirationTime2: number | undefined,\r\n): number | undefined {\r\n  if (expirationTime1 === undefined) return expirationTime2;\r\n  if (expirationTime2 === undefined) return expirationTime1;\r\n\r\n  return Math.min(expirationTime1, expirationTime2);\r\n}\r\n\r\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\r\n  const { div, mod } = bn1.divmod(bn2);\r\n\r\n  if (mod.gt(new BN(0))) {\r\n    return div.add(new BN(1));\r\n  } else {\r\n    return div;\r\n  }\r\n}\r\n\r\nexport function ceilDivBN(amountA: BN, amountB: BN): BN {\r\n  if (amountA.isZero()) return new BN(0);\r\n\r\n  const quotient = amountA.div(amountB);\r\n\r\n  if (quotient.isZero()) return new BN(1);\r\n\r\n  const remainder = amountA.mod(amountB);\r\n  if (remainder.gt(new BN(0))) {\r\n    return quotient.add(new BN(1));\r\n  }\r\n  return quotient;\r\n}\r\n\r\nexport function getTransferAmountFeeFromPre(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  slot: number,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const epoch = Math.floor(slot / 432000);\r\n  const nowFeeConfig: TransferFee =\r\n    epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * 432000 - slot) * 400) / 1000\r\n      : undefined;\r\n  const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n  const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n  return {\r\n    amount,\r\n    fee,\r\n    expirationTime,\r\n  };\r\n}\r\nexport function getTransferAmountFeeFromPost(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  slot: number,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const epoch = Math.floor(slot / 432000);\r\n  const nowFeeConfig: TransferFee =\r\n    epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * 432000 - slot) * 400) / 1000\r\n      : undefined;\r\n  if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n    const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n    return {\r\n      amount: amount.add(nowMaxFee),\r\n      fee: nowMaxFee,\r\n      expirationTime,\r\n    };\r\n  } else {\r\n    const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n    const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n    const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n    const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n    return {\r\n      amount: TAmount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\r\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\r\n\r\nexport interface CacheLTA {\r\n  [key: string]: AddressLookupTableAccount;\r\n}\r\n\r\nexport async function getMultipleLookupTableInfo({\r\n  connection,\r\n  address,\r\n  cluster = \"mainnet\",\r\n}: {\r\n  connection: Connection;\r\n  address: PublicKey[];\r\n  cluster?: \"mainnet\" | \"devnet\";\r\n}): Promise<CacheLTA> {\r\n  const dataInfos = await getMultipleAccountsInfo(\r\n    connection,\r\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\r\n  );\r\n\r\n  const outDict: CacheLTA = {};\r\n  for (let i = 0; i < address.length; i++) {\r\n    const info = dataInfos[i];\r\n    const key = address[i];\r\n    if (!info) continue;\r\n    const lookupAccount = new AddressLookupTableAccount({\r\n      key,\r\n      state: AddressLookupTableAccount.deserialize(info.data),\r\n    });\r\n    outDict[key.toString()] = lookupAccount;\r\n\r\n    if (cluster === \"devnet\") DEV_LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n    else LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n  }\r\n\r\n  return outDict;\r\n}\r\n\r\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\r\n  AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU: new AddressLookupTableAccount({\r\n    key: new PublicKey(\"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\"),\r\n    state: AddressLookupTableAccount.deserialize(\r\n      Buffer.from(\r\n        \"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\",\r\n        \"base64\",\r\n      ),\r\n    ),\r\n  }),\r\n};\r\n\r\nexport const DEV_LOOKUP_TABLE_CACHE: CacheLTA = {};\r\nexport const getDevLookupTableCache = async (connection: Connection) => {\r\n  const devAltStr = \"EFhMuDw1PKEuckuFRW9PavNfTH4LKP5uKHgyXDmWpFCq\";\r\n  if (DEV_LOOKUP_TABLE_CACHE[devAltStr]) return DEV_LOOKUP_TABLE_CACHE;\r\n\r\n  const devAlt = new PublicKey(devAltStr);\r\n  const data = await connection.getAccountInfo(devAlt);\r\n  if (!data) return DEV_LOOKUP_TABLE_CACHE;\r\n  DEV_LOOKUP_TABLE_CACHE[devAltStr] = new AddressLookupTableAccount({\r\n    key: devAlt,\r\n    state: AddressLookupTableAccount.deserialize(data.data),\r\n  });\r\n\r\n  return DEV_LOOKUP_TABLE_CACHE;\r\n};\r\n","import {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  sendAndConfirmTransaction,\r\n  SignatureResult,\r\n  Signer,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\nimport axios from \"axios\";\r\n\r\nimport { Api } from \"../../api\";\r\nimport { ComputeBudgetConfig, SignAllTransactions, TxTipConfig } from \"../../raydium/type\";\r\nimport { Cluster } from \"../../solana\";\r\nimport { Owner } from \"../owner\";\r\nimport { CacheLTA, getDevLookupTableCache, getMultipleLookupTableInfo, LOOKUP_TABLE_CACHE } from \"./lookupTable\";\r\nimport { InstructionType, TxVersion } from \"./txType\";\r\nimport {\r\n  addComputeBudget,\r\n  checkLegacyTxSize,\r\n  checkV0TxSize,\r\n  confirmTransaction,\r\n  getRecentBlockHash,\r\n  printSimulate,\r\n} from \"./txUtils\";\r\n\r\ninterface SolanaFeeInfo {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  priorityTx: number;\r\n  nonVotes: number;\r\n  priorityRatio: number;\r\n  avgCuPerBlock: number;\r\n  blockspaceUsageRatio: number;\r\n}\r\ntype SolanaFeeInfoJson = {\r\n  \"1\": SolanaFeeInfo;\r\n  \"5\": SolanaFeeInfo;\r\n  \"15\": SolanaFeeInfo;\r\n};\r\n\r\ninterface ExecuteParams {\r\n  skipPreflight?: boolean;\r\n  recentBlockHash?: string;\r\n  sendAndConfirm?: boolean;\r\n  notSendToRpc?: boolean;\r\n}\r\n\r\ninterface TxBuilderInit {\r\n  connection: Connection;\r\n  feePayer: PublicKey;\r\n  cluster: Cluster;\r\n  owner?: Owner;\r\n  blockhashCommitment?: Commitment;\r\n  loopMultiTxStatus?: boolean;\r\n  api?: Api;\r\n  signAllTransactions?: SignAllTransactions;\r\n}\r\n\r\nexport interface AddInstructionParam {\r\n  addresses?: Record<string, PublicKey>;\r\n  instructions?: TransactionInstruction[];\r\n  endInstructions?: TransactionInstruction[];\r\n  lookupTableAddress?: string[];\r\n  signers?: Signer[];\r\n  instructionTypes?: string[];\r\n  endInstructionTypes?: string[];\r\n}\r\n\r\nexport interface TxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transaction: Transaction;\r\n  instructionTypes: string[];\r\n  signers: Signer[];\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transaction: VersionedTransaction;\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\r\n}\r\n\r\ntype TxUpdateParams = {\r\n  txId: string;\r\n  status: \"success\" | \"error\" | \"sent\";\r\n  signedTx: Transaction | VersionedTransaction;\r\n};\r\nexport interface MultiTxExecuteParam extends ExecuteParams {\r\n  sequentially: boolean;\r\n  skipTxCount?: number;\r\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\r\n}\r\nexport interface MultiTxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transactions: Transaction[];\r\n  instructionTypes: string[];\r\n  signers: Signer[][];\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface MultiTxV0BuildData<T = Record<string, any>>\r\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transactions: VersionedTransaction[];\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\r\n}\r\n\r\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? MultiTxBuildData<O>\r\n  : MultiTxV0BuildData<O>;\r\n\r\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? TxBuildData<O>\r\n  : TxV0BuildData<O>;\r\n\r\nconst LOOP_INTERVAL = 2000;\r\n\r\nexport class TxBuilder {\r\n  private connection: Connection;\r\n  private owner?: Owner;\r\n  private instructions: TransactionInstruction[] = [];\r\n  private endInstructions: TransactionInstruction[] = [];\r\n  private lookupTableAddress: string[] = [];\r\n  private signers: Signer[] = [];\r\n  private instructionTypes: string[] = [];\r\n  private endInstructionTypes: string[] = [];\r\n  private feePayer: PublicKey;\r\n  private cluster: Cluster;\r\n  private signAllTransactions?: SignAllTransactions;\r\n  private blockhashCommitment?: Commitment;\r\n  private loopMultiTxStatus: boolean;\r\n\r\n  constructor(params: TxBuilderInit) {\r\n    this.connection = params.connection;\r\n    this.feePayer = params.feePayer;\r\n    this.signAllTransactions = params.signAllTransactions;\r\n    this.owner = params.owner;\r\n    this.cluster = params.cluster;\r\n    this.blockhashCommitment = params.blockhashCommitment;\r\n    this.loopMultiTxStatus = !!params.loopMultiTxStatus;\r\n  }\r\n\r\n  get AllTxData(): {\r\n    instructions: TransactionInstruction[];\r\n    endInstructions: TransactionInstruction[];\r\n    signers: Signer[];\r\n    instructionTypes: string[];\r\n    endInstructionTypes: string[];\r\n    lookupTableAddress: string[];\r\n  } {\r\n    return {\r\n      instructions: this.instructions,\r\n      endInstructions: this.endInstructions,\r\n      signers: this.signers,\r\n      instructionTypes: this.instructionTypes,\r\n      endInstructionTypes: this.endInstructionTypes,\r\n      lookupTableAddress: this.lookupTableAddress,\r\n    };\r\n  }\r\n\r\n  get allInstructions(): TransactionInstruction[] {\r\n    return [...this.instructions, ...this.endInstructions];\r\n  }\r\n\r\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\r\n    const json = (\r\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\r\n    ).data;\r\n    const { avg } = json?.[15] ?? {};\r\n    if (!avg) return undefined;\r\n    return {\r\n      units: 600000,\r\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\r\n    };\r\n  }\r\n\r\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\r\n    if (config) {\r\n      const { instructions, instructionTypes } = addComputeBudget(config);\r\n      this.instructions.unshift(...instructions);\r\n      this.instructionTypes.unshift(...instructionTypes);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public addTipInstruction(tipConfig?: TxTipConfig): boolean {\r\n    if (tipConfig) {\r\n      this.endInstructions.push(\r\n        SystemProgram.transfer({\r\n          fromPubkey: tipConfig.feePayer ?? this.feePayer,\r\n          toPubkey: new PublicKey(tipConfig.address),\r\n          lamports: BigInt(tipConfig.amount.toString()),\r\n        }),\r\n      );\r\n      this.endInstructionTypes.push(InstructionType.TransferTip);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async calComputeBudget({\r\n    config: propConfig,\r\n    defaultIns,\r\n  }: {\r\n    config?: ComputeBudgetConfig;\r\n    defaultIns?: TransactionInstruction[];\r\n  }): Promise<void> {\r\n    try {\r\n      const config = propConfig || (await this.getComputeBudgetConfig());\r\n      if (this.addCustomComputeBudget(config)) return;\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    } catch {\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    }\r\n  }\r\n\r\n  public addInstruction({\r\n    instructions = [],\r\n    endInstructions = [],\r\n    signers = [],\r\n    instructionTypes = [],\r\n    endInstructionTypes = [],\r\n    lookupTableAddress = [],\r\n  }: AddInstructionParam): TxBuilder {\r\n    this.instructions.push(...instructions);\r\n    this.endInstructions.push(...endInstructions);\r\n    this.signers.push(...signers);\r\n    this.instructionTypes.push(...instructionTypes);\r\n    this.endInstructionTypes.push(...endInstructionTypes);\r\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\r\n    return this;\r\n  }\r\n\r\n  public async versionBuild<O = Record<string, any>>({\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    txVersion?: TxVersion;\r\n    extInfo?: O;\r\n  }): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\r\n    if (txVersion === TxVersion.V0) return (await this.buildV0({ ...(extInfo || {}) })) as MakeTxData<TxVersion.V0, O>;\r\n    return this.build<O>(extInfo) as MakeTxData<TxVersion.LEGACY, O>;\r\n  }\r\n\r\n  public build<O = Record<string, any>>(extInfo?: O): MakeTxData<TxVersion.LEGACY, O> {\r\n    const transaction = new Transaction();\r\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\r\n    transaction.feePayer = this.feePayer;\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        transaction.recentBlockhash = recentBlockHash;\r\n        if (this.signers.length) transaction.sign(...this.signers);\r\n\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = sendAndConfirm\r\n            ? await sendAndConfirmTransaction(\r\n                this.connection,\r\n                transaction,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              )\r\n            : await this.connection.sendRawTransaction(transaction.serialize(), { skipPreflight });\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(...this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || ({} as O),\r\n    };\r\n  }\r\n\r\n  public buildMultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\r\n    extInfo?: T;\r\n  }): MultiTxBuildData {\r\n    const { extraPreBuildData = [], extInfo } = params;\r\n    const { transaction } = this.build(extInfo);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\r\n\r\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            let i = 0;\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) continue;\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                tx.recentBlockhash = recentBlockHash;\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\r\n            tx.recentBlockhash = recentBlockHash;\r\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n            return tx;\r\n          });\r\n          printSimulate(partialSignedTxs);\r\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return {\r\n              txIds,\r\n              signedTxs,\r\n            };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\r\n    extraPreBuildData,\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\r\n    txVersion?: T;\r\n    extInfo?: O;\r\n  }): Promise<MakeMultiTxData<T, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0MultiTx({\r\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\r\n        buildProps: extInfo || {},\r\n      })) as MakeMultiTxData<T, O>;\r\n    return this.buildMultiTx<O>({\r\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\r\n      extInfo,\r\n    }) as MakeMultiTxData<T, O>;\r\n  }\r\n\r\n  public async buildV0<O = Record<string, any>>(\r\n    props?: O & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    },\r\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\r\n    const {\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      forerunCreate,\r\n      recentBlockhash: propRecentBlockhash,\r\n      ...extInfo\r\n    } = props || {};\r\n\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? await getDevLookupTableCache(this.connection) : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const recentBlockhash = forerunCreate\r\n      ? PublicKey.default.toBase58()\r\n      : propRecentBlockhash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n    const messageV0 = new TransactionMessage({\r\n      payerKey: this.feePayer,\r\n      recentBlockhash,\r\n      instructions: [...this.allInstructions],\r\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n    const transaction = new VersionedTransaction(messageV0);\r\n\r\n    transaction.sign(this.signers);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\r\n          if (sendAndConfirm) {\r\n            await confirmTransaction(this.connection, txId);\r\n          }\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendTransaction(txs[0], { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: (extInfo || {}) as O,\r\n    };\r\n  }\r\n\r\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\r\n    buildProps?: T & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    };\r\n  }): Promise<MultiTxV0BuildData> {\r\n    const { extraPreBuildData = [], buildProps } = params;\r\n    const { transaction } = await this.buildV0(buildProps);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\r\n\r\n    const allTransactions: VersionedTransaction[] = [\r\n      transaction,\r\n      ...filterExtraBuildData.map((data) => data.transaction),\r\n    ];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach(async (tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      buildProps,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: buildProps || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuild(\r\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig; splitIns?: TransactionInstruction[] },\r\n  ): Promise<MultiTxBuildData> {\r\n    const { splitIns = [], computeBudgetConfig, ...extInfo } = props || {};\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n\r\n    const allTransactions: Transaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      const _signerStrs = new Set<string>(\r\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\r\n\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer }) ||\r\n          checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          checkLegacyTxSize({\r\n            instructions: computeBudgetConfig\r\n              ? [...computeBudgetData.instructions, ...instructionQueue]\r\n              : [...instructionQueue],\r\n            payer: this.feePayer,\r\n            signers: _signer,\r\n          })\r\n        ) {\r\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n        } else {\r\n          allTransactions.push(new Transaction().add(...instructionQueue));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        checkLegacyTxSize({\r\n          instructions: computeBudgetConfig\r\n            ? [...computeBudgetData.instructions, ...instructionQueue]\r\n            : [...instructionQueue],\r\n          payer: this.feePayer,\r\n          signers: _signers.map((s) => s.publicKey),\r\n        })\r\n      ) {\r\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n      } else {\r\n        allTransactions.push(new Transaction().add(...instructionQueue));\r\n      }\r\n      allSigners.push(_signers);\r\n    }\r\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        allTransactions.forEach(async (tx, idx) => {\r\n          tx.recentBlockhash = recentBlockHash;\r\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n              }\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuildV0(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n      sniperTransactions?: VersionedTransaction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? await getDevLookupTableCache(this.connection) : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                console.log(\"skip tx: \", i);\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n\r\n\r\n  public async buildSniperTransaction(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? await getDevLookupTableCache(this.connection) : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                console.log(\"skip tx: \", i);\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n\r\n}\r\n","import BN from \"bn.js\";\r\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\r\n","import { AccountInfo, GetProgramAccountsResponse, Keypair, PublicKey, RpcResponseAndContext } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { createLogger, getATAAddress } from \"../../common\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { sha256 } from \"@noble/hashes/sha256\";\r\nimport { splAccountLayout } from \"./layout\";\r\nimport { TokenAccount, TokenAccountRaw } from \"./types\";\r\n\r\nconst logger = createLogger(\"Raydium_Util\");\r\n\r\nexport interface ParseTokenAccount {\r\n  owner: PublicKey;\r\n  solAccountResp?: AccountInfo<Buffer> | null;\r\n  tokenAccountResp: RpcResponseAndContext<GetProgramAccountsResponse>;\r\n}\r\n\r\nexport function parseTokenAccountResp({ owner, solAccountResp, tokenAccountResp }: ParseTokenAccount): {\r\n  tokenAccounts: TokenAccount[];\r\n  tokenAccountRawInfos: TokenAccountRaw[];\r\n} {\r\n  const tokenAccounts: TokenAccount[] = [];\r\n  const tokenAccountRawInfos: TokenAccountRaw[] = [];\r\n\r\n  for (const { pubkey, account } of tokenAccountResp.value) {\r\n    const accountInfo = splAccountLayout.decode(account.data);\r\n    const { mint, amount } = accountInfo;\r\n    tokenAccounts.push({\r\n      publicKey: pubkey,\r\n      mint,\r\n      amount,\r\n      isAssociated: getATAAddress(owner, mint, account.owner).publicKey.equals(pubkey),\r\n      isNative: false,\r\n      programId: account.owner,\r\n    });\r\n    // todo programId should get from api\r\n    tokenAccountRawInfos.push({ pubkey, accountInfo, programId: account.owner });\r\n  }\r\n\r\n  if (solAccountResp) {\r\n    tokenAccounts.push({\r\n      mint: PublicKey.default,\r\n      amount: new BN(String(solAccountResp.lamports)),\r\n      isNative: true,\r\n      programId: solAccountResp.owner,\r\n    });\r\n  }\r\n\r\n  return {\r\n    tokenAccounts,\r\n    tokenAccountRawInfos,\r\n  };\r\n}\r\n\r\nexport function generatePubKey({\r\n  fromPublicKey,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  assignSeed,\r\n}: {\r\n  fromPublicKey: PublicKey;\r\n  programId: PublicKey;\r\n  assignSeed?: string;\r\n}): { publicKey: PublicKey; seed: string } {\r\n  const seed = assignSeed ? btoa(assignSeed).slice(0, 32) : Keypair.generate().publicKey.toBase58().slice(0, 32);\r\n  const publicKey = createWithSeed(fromPublicKey, seed, programId);\r\n  return { publicKey, seed };\r\n}\r\n\r\nfunction createWithSeed(fromPublicKey: PublicKey, seed: string, programId: PublicKey): PublicKey {\r\n  const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\r\n  const publicKeyBytes = sha256(buffer);\r\n  return new PublicKey(publicKeyBytes);\r\n}\r\n",null,null,null,null,"import { PublicKey } from \"@solana/web3.js\";\r\nimport BN, { isBN } from \"bn.js\";\r\n\r\nimport {\r\n  bits,\r\n  blob,\r\n  Blob,\r\n  Layout,\r\n  offset as _offset,\r\n  seq as _seq,\r\n  Structure as _Structure,\r\n  u32 as _u32,\r\n  u8 as _u8,\r\n  UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n} from \"./buffer-layout\";\r\n\r\nexport * from \"./buffer-layout\";\r\nexport { blob };\r\n\r\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\r\n  blob: Layout<Buffer>;\r\n  signed: boolean;\r\n\r\n  constructor(span: number, signed: boolean, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\r\n    super(span, property);\r\n    this.blob = blob(span);\r\n    this.signed = signed;\r\n  }\r\n\r\n  /** @override */\r\n  decode(b: Buffer, offset = 0): BN {\r\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\r\n    if (this.signed) {\r\n      return num.fromTwos(this.span * 8).clone();\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /** @override */\r\n  encode(src: BN, b: Buffer, offset = 0): number {\r\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\r\n    if (this.signed) {\r\n      src = src.toTwos(this.span * 8);\r\n    }\r\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\r\n  }\r\n}\r\n\r\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\r\n  _lower: any;\r\n  _upper: any;\r\n  // TODO: unknown\r\n  constructor(property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(8, property);\r\n    this._lower = bits(_u32(), false);\r\n    this._upper = bits(_u32(), false);\r\n  }\r\n\r\n  addBoolean(property: string): void {\r\n    if (this._lower.fields.length < 32) {\r\n      this._lower.addBoolean(property);\r\n    } else {\r\n      this._upper.addBoolean(property);\r\n    }\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\r\n    const lowerDecoded = this._lower.decode(b, offset);\r\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\r\n    return { ...lowerDecoded, ...upperDecoded };\r\n  }\r\n\r\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\r\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\r\n  }\r\n}\r\n\r\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(1, property);\r\n}\r\n\r\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(4, property);\r\n}\r\n\r\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, false, property);\r\n}\r\n\r\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, false, property);\r\n}\r\n\r\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(1, true, property);\r\n}\r\n\r\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, true, property);\r\n}\r\n\r\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, true, property);\r\n}\r\n\r\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\r\n  layout: Layout<T>;\r\n  decoder: (data: T) => U;\r\n  encoder: (src: U) => T;\r\n\r\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(layout.span, property);\r\n    this.layout = layout;\r\n    this.decoder = decoder;\r\n    this.encoder = encoder;\r\n  }\r\n\r\n  decode(b: Buffer, offset?: number): U {\r\n    return this.decoder(this.layout.decode(b, offset));\r\n  }\r\n\r\n  encode(src: U, b: Buffer, offset?: number): number {\r\n    return this.layout.encode(this.encoder(src), b, offset);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset?: number): number {\r\n    return this.layout.getSpan(b, offset);\r\n  }\r\n}\r\n\r\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\r\n  return new WrappedLayout(\r\n    blob(32),\r\n    (b: Buffer) => new PublicKey(b),\r\n    (key: PublicKey) => key.toBuffer(),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\r\n  layout: Layout<T>;\r\n  discriminator: Layout<number>;\r\n\r\n  constructor(layout: Layout<T>, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(-1, property);\r\n    this.layout = layout;\r\n    this.discriminator = _u8();\r\n  }\r\n\r\n  encode(src: T | null, b: Buffer, offset = 0): number {\r\n    if (src === null || src === undefined) {\r\n      return this.discriminator.encode(0, b, offset);\r\n    }\r\n    this.discriminator.encode(1, b, offset);\r\n    return this.layout.encode(src, b, offset + 1) + 1;\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): T | null {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return null;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.decode(b, offset + 1);\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset = 0): number {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return 1;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.getSpan(b, offset + 1) + 1;\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n}\r\n\r\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\r\n  return new OptionLayout<T, P>(layout, property);\r\n}\r\n\r\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\r\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\r\n}\r\n\r\nexport function decodeBool(value: number): boolean {\r\n  if (value === 0) {\r\n    return false;\r\n  } else if (value === 1) {\r\n    return true;\r\n  }\r\n  throw new Error(\"Invalid bool: \" + value);\r\n}\r\n\r\nexport function encodeBool(value: boolean): number {\r\n  return value ? 1 : 0;\r\n}\r\n\r\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ values: T[] }> = struct([\r\n    length,\r\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\r\n  ]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\r\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\r\n\r\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\r\n    if (!receivedTag.eq(tag)) {\r\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\r\n}\r\n\r\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ data }) => data,\r\n    (data) => ({ data }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\r\n  return new WrappedLayout(\r\n    vecU8(),\r\n    (data) => data.toString(\"utf-8\"),\r\n    (s) => Buffer.from(s, \"utf-8\"),\r\n    property,\r\n  );\r\n}\r\n\r\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\r\n  registry: Record<string, Layout<any>>;\r\n}\r\n\r\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\r\n  const unionLayout = _union(_u8(), property);\r\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\r\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\r\n}\r\n\r\nexport function array<T, P extends string = \"\">(\r\n  elementLayout: Layout<T>,\r\n  length: number,\r\n  property?: P,\r\n): Layout<T[], P> {\r\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class Structure<T, P, D extends { [key: string]: any; }> extends _Structure<T, P, D> {\r\n  /** @override */\r\n  decode(b: Buffer, offset?: number): D {\r\n    return super.decode(b, offset);\r\n  }\r\n}\r\n\r\nexport function struct<T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n): T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n    Value,\r\n    P,\r\n    {\r\n      [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n      ? V\r\n      : any;\r\n    }\r\n  >\r\n  : any {\r\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\r\n  return new Structure(fields, property, decodePrefixes);\r\n}\r\n\r\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\r\n  ? S\r\n  : any;\r\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any; }> = Structure<any, any, S>;\r\n\r\nexport class Union<Schema extends { [key: string]: any; }> extends _Union<Schema> {\r\n  encodeInstruction(instruction: any): Buffer {\r\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\r\n    const b = Buffer.alloc(instructionMaxSpan);\r\n    return b.slice(0, this.encode(instruction, b));\r\n  }\r\n\r\n  decodeInstruction(instruction: any): Partial<Schema> {\r\n    return this.decode(instruction);\r\n  }\r\n}\r\nexport function union<UnionSchema extends { [key: string]: any } = any>(\r\n  discr: any,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n): Union<UnionSchema> {\r\n  return new Union(discr, defaultLayout, property);\r\n}\r\n\r\nclass Zeros extends Blob {\r\n  decode(b: Buffer, offset: number): Buffer {\r\n    const slice = super.decode(b, offset);\r\n    if (!slice.every((v) => v === 0)) {\r\n      throw new Error(\"nonzero padding bytes\");\r\n    }\r\n    return slice;\r\n  }\r\n}\r\n\r\nexport function zeros(length: number): Zeros {\r\n  return new Zeros(length);\r\n}\r\n\r\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\r\n  elementLayout: Layout<T, P>,\r\n  count: number | BN | Layout<BN | number, P>,\r\n  property?: AnotherP,\r\n): Layout<T[], AnotherP> {\r\n  let parsedCount: number;\r\n  const superCount =\r\n    typeof count === \"number\"\r\n      ? count\r\n      : isBN(count)\r\n        ? count.toNumber()\r\n        : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\r\n          get(target, property): any {\r\n            if (!parsedCount) {\r\n              // get count in targetLayout. note that count may be BN\r\n              const countProperty = Reflect.get(target, \"count\");\r\n\r\n              // let targetLayout's  property:count be a number\r\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\r\n\r\n              // record the count\r\n              Reflect.set(target, \"count\", parsedCount);\r\n            }\r\n            return Reflect.get(target, property);\r\n          },\r\n          set(target, property, value): any {\r\n            if (property === \"count\") {\r\n              parsedCount = value;\r\n            }\r\n            return Reflect.set(target, property, value);\r\n          },\r\n        });\r\n\r\n  // @ts-expect-error force type\r\n  return _seq(elementLayout, superCount, property);\r\n}\r\n","import {\r\n  bits as _bits,\r\n  BitStructure as _BitStructure,\r\n  blob as _blob,\r\n  Blob as _Blob,\r\n  cstr as _cstr,\r\n  f32 as _f32,\r\n  f32be as _f32be,\r\n  f64 as _f64,\r\n  f64be as _f64be,\r\n  greedy as _greedy,\r\n  Layout as _Layout,\r\n  ns64 as _ns64,\r\n  ns64be as _ns64be,\r\n  nu64 as _nu64,\r\n  nu64be as _nu64be,\r\n  offset as _offset,\r\n  s16 as _s16,\r\n  s16be as _s16be,\r\n  s24 as _s24,\r\n  s24be as _s24be,\r\n  s32 as _s32,\r\n  s32be as _s32be,\r\n  s40 as _s40,\r\n  s40be as _s40be,\r\n  s48 as _s48,\r\n  s48be as _s48be,\r\n  s8 as _s8,\r\n  seq as _seq,\r\n  struct as _struct,\r\n  Structure as _Structure,\r\n  u16 as _u16,\r\n  u16be as _u16be,\r\n  u24 as _u24,\r\n  u24be as _u24be,\r\n  u32 as _u32,\r\n  u32be as _u32be,\r\n  u40 as _u40,\r\n  u40be as _u40be,\r\n  u48 as _u48,\r\n  u48be as _u48be,\r\n  u8 as _u8,\r\n  UInt as _UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\r\n  utf8 as _utf8,\r\n} from \"@solana/buffer-layout\";\r\n\r\n//#region ------------------- Layout -------------------\r\nexport interface Layout<T = any, P = \"\"> {\r\n  span: number;\r\n  property?: P;\r\n  decode(b: Buffer, offset?: number): T;\r\n  encode(src: T, b: Buffer, offset?: number): number;\r\n  getSpan(b: Buffer, offset?: number): number;\r\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\r\n}\r\nexport interface LayoutConstructor {\r\n  new <T, P>(): Layout<T, P>; // for class extends syntex\r\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\r\n  readonly prototype: Layout;\r\n}\r\nexport const Layout = _Layout as unknown as LayoutConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Structure -------------------\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\r\n  extends Layout<DecodeSchema, P> {\r\n  span: number;\r\n  decode(b: Buffer, offset?: number): DecodeSchema;\r\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\r\n  offsetOf<AP extends string>(property: AP): number;\r\n}\r\ninterface StructureConstructor {\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\r\n    fields: T,\r\n    property?: P,\r\n    decodePrefixes?: boolean,\r\n  ): Structure<T, P, DecodeSchema>;\r\n}\r\nexport const Structure = _Structure as unknown as StructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Union -------------------\r\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\r\n  registry: object;\r\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\r\n  addVariant(\r\n    variant: number,\r\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\r\n    property?: string,\r\n  ): any /* TEMP: code in Layout.js 1809 */;\r\n}\r\ninterface UnionConstructor {\r\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\r\n  new <UnionSchema extends { [key: string]: any } = any>(\r\n    discr: Layout<any, any>,\r\n    defaultLayout: Layout<any, any>,\r\n    property?: string,\r\n  ): Union<UnionSchema>;\r\n}\r\nexport const Union = _Union as unknown as UnionConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- BitStructure -------------------\r\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\r\ninterface BitStructureConstructor {\r\n  new (...params: any[]): BitStructure;\r\n}\r\nexport const BitStructure = _BitStructure as BitStructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- UInt -------------------\r\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\r\ninterface UIntConstructor {\r\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\r\n}\r\nexport const UInt = _UInt as UIntConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Blob -------------------\r\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\r\ninterface BlobConstructor {\r\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\r\n}\r\nexport const Blob = _Blob as unknown as BlobConstructor;\r\n//#endregion\r\n\r\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\r\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\n\r\nexport const struct = _struct as <T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n) => T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any;\r\n\r\nexport const seq = _seq as unknown as <T, P>(\r\n  elementLayout: Layout<T, string>,\r\n  count: number | Layout<number, string>,\r\n  property?: P,\r\n) => Layout<T[]>;\r\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\r\n  discr: Layout<any, any>,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n) => Union<UnionSchema>;\r\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\r\n  layout: Layout<any, P>,\r\n  property?: P,\r\n) => any;\r\nexport const blob = _blob as unknown as <P extends string = \"\">(\r\n  length: number | Layout<number, P>,\r\n  property?: P,\r\n) => Blob<P>;\r\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\r\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\r\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\r\n  word: Layout<T>,\r\n  msb?: boolean,\r\n  property?: P,\r\n) => BitStructure<T, P>; // TODO: not quite sure\r\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\r\n  layout: Layout<T, P>,\r\n  offset?: number,\r\n  property?: P,\r\n) => Layout<T, P>;\r\n\r\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\r\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const splAccountLayout = struct([\r\n  publicKey(\"mint\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"amount\"),\r\n  u32(\"delegateOption\"),\r\n  publicKey(\"delegate\"),\r\n  u8(\"state\"),\r\n  u32(\"isNativeOption\"),\r\n  u64(\"isNative\"),\r\n  u64(\"delegatedAmount\"),\r\n  u32(\"closeAuthorityOption\"),\r\n  publicKey(\"closeAuthority\"),\r\n]);\r\n","import { Commitment, Connection, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { BigNumberish, parseBigNumberish } from \"@/common\";\r\nimport {\r\n  createCloseAccountInstruction,\r\n  createInitializeAccountInstruction,\r\n  createTransferInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { TOKEN_WSOL } from \"../token/constant\";\r\nimport { generatePubKey } from \"./util\";\r\n\r\nimport { splAccountLayout } from \"./layout\";\r\n\r\nexport function initTokenAccountInstruction(params: {\r\n  mint: PublicKey;\r\n  tokenAccount: PublicKey;\r\n  owner: PublicKey;\r\n  programId?: PublicKey;\r\n}): TransactionInstruction {\r\n  const { mint, tokenAccount, owner, programId = TOKEN_PROGRAM_ID } = params;\r\n  return createInitializeAccountInstruction(tokenAccount, mint, owner, programId);\r\n}\r\n\r\nexport function closeAccountInstruction(params: {\r\n  tokenAccount: PublicKey;\r\n  payer: PublicKey;\r\n  multiSigners?: Signer[];\r\n  owner: PublicKey;\r\n  programId?: PublicKey;\r\n}): TransactionInstruction {\r\n  const { tokenAccount, payer, multiSigners = [], owner, programId = TOKEN_PROGRAM_ID } = params;\r\n  return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners, programId);\r\n}\r\n\r\ninterface CreateWSolTokenAccount {\r\n  connection: Connection;\r\n  payer: PublicKey;\r\n  owner: PublicKey;\r\n  amount: BigNumberish;\r\n  commitment?: Commitment;\r\n  skipCloseAccount?: boolean;\r\n}\r\n/**\r\n * WrappedNative account = wsol account\r\n */\r\nexport async function createWSolAccountInstructions(params: CreateWSolTokenAccount): Promise<\r\n  AddInstructionParam & {\r\n    addresses: { newAccount: PublicKey };\r\n  }\r\n> {\r\n  const { connection, amount, commitment, payer, owner, skipCloseAccount } = params;\r\n\r\n  const balanceNeeded = await connection.getMinimumBalanceForRentExemption(splAccountLayout.span, commitment);\r\n  const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\r\n  const newAccount = generatePubKey({ fromPublicKey: payer, programId: TOKEN_PROGRAM_ID });\r\n\r\n  return {\r\n    addresses: { newAccount: newAccount.publicKey },\r\n    signers: [],\r\n    instructions: [\r\n      SystemProgram.createAccountWithSeed({\r\n        fromPubkey: payer,\r\n        basePubkey: payer,\r\n        seed: newAccount.seed,\r\n        newAccountPubkey: newAccount.publicKey,\r\n        lamports: lamports.toNumber(),\r\n        space: splAccountLayout.span,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      initTokenAccountInstruction({\r\n        mint: new PublicKey(TOKEN_WSOL.address),\r\n        tokenAccount: newAccount.publicKey,\r\n        owner,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n    ],\r\n    instructionTypes: [InstructionType.CreateAccount, InstructionType.InitAccount],\r\n    endInstructionTypes: skipCloseAccount ? [] : [InstructionType.CloseAccount],\r\n    endInstructions: skipCloseAccount\r\n      ? []\r\n      : [\r\n          closeAccountInstruction({\r\n            tokenAccount: newAccount.publicKey,\r\n            payer,\r\n            owner,\r\n          }),\r\n        ],\r\n  };\r\n}\r\n\r\nexport function makeTransferInstruction({\r\n  source,\r\n  destination,\r\n  owner,\r\n  amount,\r\n  multiSigners = [],\r\n  tokenProgram = TOKEN_PROGRAM_ID,\r\n}: {\r\n  source: PublicKey;\r\n  destination: PublicKey;\r\n  owner: PublicKey;\r\n  amount: BigNumberish;\r\n  multiSigners?: Signer[];\r\n  tokenProgram?: PublicKey;\r\n}): TransactionInstruction {\r\n  return createTransferInstruction(source, destination, owner, BigInt(String(amount)), multiSigners, tokenProgram);\r\n}\r\n","import { Keypair, PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger, Logger } from \"../common/logger\";\r\nimport { TxBuilder } from \"../common/txTool/txTool\";\r\n\r\nimport { Raydium } from \"./\";\r\nimport { Owner } from \"@/common\";\r\n\r\nexport interface ModuleBaseProps {\r\n  scope: Raydium;\r\n  moduleName: string;\r\n}\r\n\r\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\r\n  args\r\n    .map((arg) => {\r\n      try {\r\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\r\n      } catch {\r\n        return arg;\r\n      }\r\n    })\r\n    .join(\", \");\r\nexport default class ModuleBase {\r\n  public scope: Raydium;\r\n  private disabled = false;\r\n  protected logger: Logger;\r\n\r\n  constructor({ scope, moduleName }: ModuleBaseProps) {\r\n    this.scope = scope;\r\n    this.logger = createLogger(moduleName);\r\n  }\r\n\r\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\r\n    this.scope.checkOwner();\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer || this.scope.ownerPubKey,\r\n      cluster: this.scope.cluster,\r\n      owner: this.scope.owner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      loopMultiTxStatus: this.scope.loopMultiTxStatus,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  protected createSniperTxBuilder(owner: Keypair, feePayer: PublicKey): TxBuilder {\r\n    const sniperOwner = new Owner(owner);\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer,\r\n      cluster: this.scope.cluster,\r\n      owner: sniperOwner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      loopMultiTxStatus: this.scope.loopMultiTxStatus,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.debug(joinMsg(args));\r\n  }\r\n\r\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.info(joinMsg(args));\r\n  }\r\n\r\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\r\n    const message = joinMsg(args);\r\n    throw new Error(message);\r\n  }\r\n\r\n  public checkDisabled(): void {\r\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { ApiV3Token } from \"../../api/type\";\r\nimport { createLogger } from \"../../common/logger\";\r\nimport {\r\n  DEVNET_PROGRAM_ID,\r\n  FARM_PROGRAM_ID_V3,\r\n  FARM_PROGRAM_ID_V4,\r\n  FARM_PROGRAM_ID_V5,\r\n  FARM_PROGRAM_ID_V6,\r\n} from \"../../common/programId\";\r\n\r\nimport {\r\n  FarmLedgerLayout,\r\n  farmLedgerLayoutV3_2,\r\n  farmLedgerLayoutV5_2,\r\n  farmLedgerLayoutV6_1,\r\n  FarmStateLayout,\r\n  farmStateV3Layout,\r\n  farmStateV5Layout,\r\n  farmStateV6Layout,\r\n} from \"./layout\";\r\nimport { NATIVE_MINT } from \"@solana/spl-token\";\r\n\r\nconst logger = createLogger(\"Raydium_farm_config\");\r\n\r\nexport type FarmVersion = 3 | 4 | 5 | 6;\r\nexport const FARM_LOCK_MINT = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const FARM_LOCK_VAULT = new PublicKey(\"FrspKwj8i3pNmKwXreTveC4fu7KL5ZbGeXdZBe2XViu1\");\r\n\r\nexport const DEV_FARM_LOCK_MINT = NATIVE_MINT;\r\nexport const DEV_FARM_LOCK_VAULT = new PublicKey(\"3TRTX4dXUpp2eqxi3tvQDFYUV7SdDJjcPE3Y4mbtftaX\");\r\n\r\n/* ================= index ================= */\r\n// version => farm state layout\r\nexport const FARM_VERSION_TO_STATE_LAYOUT: {\r\n  [version in FarmVersion]?: FarmStateLayout;\r\n} = {\r\n  3: farmStateV3Layout,\r\n  5: farmStateV5Layout,\r\n  6: farmStateV6Layout,\r\n};\r\n\r\n// version => farm ledger layout\r\nexport const FARM_VERSION_TO_LEDGER_LAYOUT: {\r\n  [version in FarmVersion]?: FarmLedgerLayout;\r\n} = {\r\n  3: farmLedgerLayoutV3_2,\r\n  5: farmLedgerLayoutV5_2,\r\n  6: farmLedgerLayoutV6_1,\r\n};\r\n\r\nexport const isValidFarmVersion = (version: number): boolean => [3, 4, 5, 6].indexOf(version) !== -1;\r\n\r\nexport const validateFarmRewards = (params: {\r\n  version: number;\r\n  rewardInfos: { mint: ApiV3Token }[];\r\n  rewardTokenAccountsPublicKeys: PublicKey[];\r\n}): (() => string | undefined) => {\r\n  const { version, rewardInfos, rewardTokenAccountsPublicKeys } = params;\r\n\r\n  const infoMsg = `rewardInfo:${JSON.stringify(rewardInfos)}, rewardAccount:${JSON.stringify(\r\n    rewardTokenAccountsPublicKeys,\r\n  )}`;\r\n\r\n  const validator = {\r\n    3: (): string | undefined => {\r\n      if (rewardInfos.length !== 1 || rewardTokenAccountsPublicKeys.length !== 1) {\r\n        return `rewardInfos or rewardTokenAccounts lengths not equal 1: ${infoMsg}`;\r\n      }\r\n    },\r\n    5: (): string | undefined => {\r\n      if (rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\r\n        return `rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\r\n      }\r\n    },\r\n    6: (): string | undefined => {\r\n      if (!rewardTokenAccountsPublicKeys.length || rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\r\n        return `no rewardTokenAccounts or rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\r\n      }\r\n    },\r\n  };\r\n\r\n  return validator[version]?.();\r\n};\r\n\r\nexport const poolTypeV6 = { \"Standard SPL\": 0, \"Option tokens\": 1 };\r\n\r\nexport const FARM_PROGRAM_TO_VERSION: Record<string, 3 | 4 | 5 | 6> = {\r\n  [FARM_PROGRAM_ID_V3.toString()]: 3,\r\n  [FARM_PROGRAM_ID_V4.toString()]: 4,\r\n  [FARM_PROGRAM_ID_V5.toString()]: 5,\r\n  [FARM_PROGRAM_ID_V6.toString()]: 6,\r\n  [DEVNET_PROGRAM_ID.FARM_PROGRAM_ID_V3.toString()]: 3,\r\n  [DEVNET_PROGRAM_ID.FARM_PROGRAM_ID_V4.toString()]: 4,\r\n  [DEVNET_PROGRAM_ID.FARM_PROGRAM_ID_V5.toString()]: 5,\r\n  [DEVNET_PROGRAM_ID.FARM_PROGRAM_ID_V6.toString()]: 6,\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  blob,\r\n  bool,\r\n  GetLayoutSchemaFromStructure,\r\n  GetStructureFromLayoutSchema,\r\n  GetStructureSchema,\r\n  i64,\r\n  i8,\r\n  publicKey,\r\n  seq,\r\n  struct,\r\n  u128,\r\n  u64,\r\n  u8,\r\n} from \"../../marshmallow\";\r\n\r\nimport { poolTypeV6 } from \"./config\";\r\nimport { RewardType } from \"./type\";\r\n\r\nexport const associatedLedgerAccountLayout = struct([u8(\"instruction\")]);\r\nexport const withdrawRewardLayout = struct([u8(\"instruction\")]);\r\n\r\nconst farmStateRewardInfoV6Layout = struct([\r\n  u64(\"rewardState\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardLastUpdateTime\"),\r\n  u64(\"totalReward\"),\r\n  u64(\"totalRewardEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u128(\"accRewardPerShare\"),\r\n  publicKey(\"rewardVault\"),\r\n  publicKey(\"rewardMint\"),\r\n  publicKey(\"rewardSender\"),\r\n  u64(\"rewardType\"),\r\n  seq(u64(), 15, \"padding\"),\r\n]);\r\n\r\nexport const realFarmStateV3Layout = struct([\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"rewardVault\"),\r\n  publicKey(),\r\n  publicKey(),\r\n  u64(),\r\n  u64(),\r\n  u64(\"totalReward\"),\r\n  u128(\"perShareReward\"),\r\n  u64(\"lastSlot\"),\r\n  u64(\"perSlotReward\"),\r\n]);\r\n\r\nexport const realFarmStateV5Layout = struct([\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"rewardVaultA\"),\r\n  u64(\"totalRewardA\"),\r\n  u128(\"perShareRewardA\"),\r\n  u64(\"perSlotRewardA\"),\r\n  u8(\"option\"),\r\n  publicKey(\"rewardVaultB\"),\r\n  blob(7),\r\n  u64(\"totalRewardB\"),\r\n  u128(\"perShareRewardB\"),\r\n  u64(\"perSlotRewardB\"),\r\n  u64(\"lastSlot\"),\r\n  publicKey(),\r\n]);\r\n\r\nexport const realFarmV6Layout = struct([\r\n  u64(),\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  u64(\"validRewardTokenNum\"),\r\n  u128(\"rewardMultiplier\"),\r\n  u64(\"rewardPeriodMax\"),\r\n  u64(\"rewardPeriodMin\"),\r\n  u64(\"rewardPeriodExtend\"),\r\n  publicKey(\"lpMint\"),\r\n  publicKey(\"lpVault\"),\r\n  seq(farmStateRewardInfoV6Layout, 5, \"rewardInfos\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(),\r\n  seq(u64(), 32, \"padding\"),\r\n]);\r\n\r\nexport const farmStateV3Layout = new Proxy(\r\n  realFarmStateV3Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 3;\r\n      rewardInfos: {\r\n        rewardVault: PublicKey;\r\n        totalReward: BN;\r\n        perSlotReward: BN;\r\n        perShareReward: BN;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV3Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 3,\r\n            rewardInfos: [\r\n              {\r\n                rewardVault: originalResult.rewardVault,\r\n                totalReward: originalResult.totalReward,\r\n                perSlotReward: originalResult.perSlotReward,\r\n                perShareReward: originalResult.perShareReward,\r\n              },\r\n            ],\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmStateV5Layout = new Proxy(\r\n  realFarmStateV5Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 5;\r\n      rewardInfos: {\r\n        rewardVault: PublicKey;\r\n        totalReward: BN;\r\n        perSlotReward: BN;\r\n        perShareReward: BN;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV5Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 5,\r\n            rewardInfos: [\r\n              {\r\n                rewardVault: originalResult.rewardVaultA,\r\n                totalReward: originalResult.totalRewardA,\r\n                perSlotReward: originalResult.perSlotRewardA,\r\n                perShareReward: originalResult.perShareRewardA,\r\n              },\r\n              {\r\n                rewardVault: originalResult.rewardVaultB,\r\n                totalReward: originalResult.totalRewardB,\r\n                perSlotReward: originalResult.perSlotRewardB,\r\n                perShareReward: originalResult.perShareRewardB,\r\n              },\r\n            ],\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmStateV6Layout = new Proxy(\r\n  realFarmV6Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 6;\r\n      rewardInfos: {\r\n        rewardState: BN;\r\n        rewardOpenTime: BN;\r\n        rewardEndTime: BN;\r\n        rewardLastUpdateTime: BN;\r\n        totalReward: BN;\r\n        totalRewardEmissioned: BN;\r\n        rewardClaimed: BN;\r\n        rewardPerSecond: BN;\r\n        accRewardPerShare: BN;\r\n        rewardVault: PublicKey;\r\n        rewardMint: PublicKey;\r\n        rewardSender: PublicKey;\r\n        rewardType: RewardType;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmV6Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 6,\r\n            rewardInfos: originalResult.rewardInfos.map((item) => ({\r\n              ...item,\r\n              rewardType: (Object.entries(poolTypeV6).find((i) => String(i[1]) === item.rewardType.toString()) ?? [\r\n                \"Standard SPL\",\r\n              ])[0],\r\n            })),\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmRewardTimeInfoLayout = struct([\r\n  u64(\"isSet\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardType\"),\r\n]);\r\n\r\nexport const farmRewardLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"nonce\"),\r\n  seq(farmRewardTimeInfoLayout, 5, \"rewardTimeInfo\"),\r\n]);\r\n\r\nexport const farmRewardRestartLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"rewardReopenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardPerSecond\"),\r\n]);\r\n\r\nexport const farmAddRewardLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"isSet\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardType\"),\r\n]);\r\n\r\nexport type FarmStateLayoutV3 = typeof farmStateV3Layout;\r\nexport type FarmStateLayoutV5 = typeof farmStateV5Layout;\r\nexport type FarmStateLayoutV6 = typeof farmStateV6Layout;\r\n\r\nexport type FarmStateV3 = GetStructureSchema<FarmStateLayoutV3>;\r\nexport type FarmStateV5 = GetStructureSchema<FarmStateLayoutV5>;\r\nexport type FarmStateV6 = GetStructureSchema<FarmStateLayoutV6>;\r\n\r\nexport type FarmState = FarmStateV3 | FarmStateV5 | FarmStateV6;\r\n// farmStateLayoutV3\r\nexport type FarmStateLayout = FarmStateLayoutV3 | FarmStateLayoutV5 | FarmStateLayoutV6;\r\n\r\n/* ================= ledger layouts ================= */\r\nexport const farmLedgerLayoutV3_1 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u64(), 1, \"rewardDebts\"),\r\n]);\r\n\r\nexport const farmLedgerLayoutV3_2 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 1, \"rewardDebts\"),\r\n  u64(\"\"),\r\n  u64(\"voteLockedBalance\"),\r\n  seq(u64(), 15),\r\n]);\r\n\r\nexport const farmLedgerLayoutV5_1 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u64(), 2, \"rewardDebts\"),\r\n]);\r\n\r\nexport const farmLedgerLayoutV5_2 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 2, \"rewardDebts\"),\r\n  seq(u64(), 17),\r\n]);\r\n\r\nexport const farmLedgerLayoutV6_1 = struct([\r\n  u64(),\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 5, \"rewardDebts\"),\r\n  seq(u64(), 16),\r\n]);\r\n\r\nexport type FarmLedgerLayoutV3_1 = typeof farmLedgerLayoutV3_1;\r\nexport type FarmLedgerLayoutV3_2 = typeof farmLedgerLayoutV3_2;\r\nexport type FarmLedgerLayoutV5_1 = typeof farmLedgerLayoutV5_1;\r\nexport type FarmLedgerLayoutV5_2 = typeof farmLedgerLayoutV5_2;\r\nexport type FarmLedgerLayoutV6_1 = typeof farmLedgerLayoutV6_1;\r\nexport type FarmLedgerLayout =\r\n  | FarmLedgerLayoutV3_1\r\n  | FarmLedgerLayoutV3_2\r\n  | FarmLedgerLayoutV5_1\r\n  | FarmLedgerLayoutV5_2\r\n  | FarmLedgerLayoutV6_1;\r\n\r\nexport type FarmLedgerV3_1 = GetStructureSchema<FarmLedgerLayoutV3_1>;\r\nexport type FarmLedgerV3_2 = GetStructureSchema<FarmLedgerLayoutV3_2>;\r\nexport type FarmLedgerV5_1 = GetStructureSchema<FarmLedgerLayoutV5_1>;\r\nexport type FarmLedgerV5_2 = GetStructureSchema<FarmLedgerLayoutV5_2>;\r\nexport type FarmLedgerV6_1 = GetStructureSchema<FarmLedgerLayoutV6_1>;\r\nexport type FarmLedger = FarmLedgerV3_1 | FarmLedgerV3_2 | FarmLedgerV5_1 | FarmLedgerV5_2 | FarmLedgerV6_1;\r\n\r\nexport const dwLayout = struct([u8(\"instruction\"), u64(\"amount\")]);\r\n\r\nexport const VoterVotingMintConfig = struct([\r\n  publicKey(\"mint\"),\r\n  publicKey(\"grantAuthority\"),\r\n  u64(\"baselineVoteWeightScaledFactor\"),\r\n  u64(\"maxExtraLockupVoteWeightScaledFactor\"),\r\n  u64(\"lockupSaturationSecs\"),\r\n\r\n  i8(\"digitShift\"), // TODO\r\n  seq(u8(), 7, \"reserved1\"),\r\n  seq(u64(), 7, \"reserved2\"),\r\n]);\r\n\r\nexport const VoterRegistrar = struct([\r\n  blob(8),\r\n  publicKey(\"governanceProgramId\"),\r\n  publicKey(\"realm\"),\r\n  publicKey(\"realmGoverningTokenMint\"),\r\n  publicKey(\"realmAuthority\"),\r\n\r\n  seq(u8(), 32, \"reserved1\"),\r\n  seq(VoterVotingMintConfig, 4, \"votingMints\"),\r\n\r\n  i64(\"timeOffset\"),\r\n  u8(\"bump\"),\r\n  seq(u8(), 7, \"reserved2\"),\r\n  seq(u64(), 11, \"reserved3\"),\r\n]);\r\n\r\nexport const VoterLockup = struct([i64(\"startTime\"), i64(\"endTime\"), u8(\"kind\"), seq(u8(), 15, \"reserved\")]);\r\n\r\nexport const VoterDepositEntry = struct([\r\n  seq(VoterLockup, 1, \"lockup\"),\r\n  u64(\"amountDeposited_native\"),\r\n  u64(\"amountInitiallyLockedNative\"),\r\n  bool(\"isUsed\"),\r\n  bool(\"allowClawback\"),\r\n  u8(\"votingMintConfigIdx\"),\r\n  seq(u8(), 29, \"reserved\"),\r\n]);\r\n\r\nexport const Voter = struct([\r\n  blob(8),\r\n  publicKey(\"voterAuthority\"),\r\n  publicKey(\"registrar\"),\r\n\r\n  seq(VoterDepositEntry, 32, \"deposits\"),\r\n\r\n  u8(\"voterBump\"),\r\n  u8(\"voterWweightRecordBump\"),\r\n  seq(u8(), 94, \"reserved\"),\r\n]);\r\n","import {\r\n  Connection,\r\n  PublicKey,\r\n  SystemProgram,\r\n  SYSVAR_CLOCK_PUBKEY,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport {\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n  createAssociatedTokenAccountIdempotentInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\n\r\nimport { FormatFarmKeyOut } from \"@/api/type\";\r\nimport { parseBigNumberish } from \"@/common\";\r\nimport { createLogger } from \"@/common/logger\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport {\r\n  accountMeta,\r\n  commonSystemAccountMeta,\r\n  INSTRUCTION_PROGRAM_ID,\r\n  RENT_PROGRAM_ID,\r\n  SOLMint,\r\n} from \"@/common/pubKey\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { bool, struct, u32, u64, u8 } from \"../../marshmallow\";\r\nimport { InstructionReturn } from \"../type\";\r\nimport { poolTypeV6 } from \"./config\";\r\nimport {\r\n  associatedLedgerAccountLayout,\r\n  dwLayout,\r\n  farmAddRewardLayout,\r\n  farmLedgerLayoutV3_2,\r\n  farmRewardLayout,\r\n  farmRewardRestartLayout,\r\n  withdrawRewardLayout,\r\n} from \"./layout\";\r\nimport {\r\n  getRegistrarAddress,\r\n  getTokenOwnerRecordAddress,\r\n  getVoterAddress,\r\n  getVoterWeightRecordAddress,\r\n  getVotingMintAuthority,\r\n  getVotingTokenMint,\r\n} from \"./pda\";\r\nimport { FarmRewardInfoConfig, RewardInfoKey, RewardType } from \"./type\";\r\nimport { getAssociatedLedgerAccount, getDepositEntryIndex } from \"./util\";\r\n\r\nconst logger = createLogger(\"Raydium_farm_instruction\");\r\n\r\nconst anchorDataBuf = {\r\n  voterStakeRegistryCreateVoter: Buffer.from([6, 24, 245, 52, 243, 255, 148, 25]), // CreateVoter\r\n  voterStakeRegistryCreateDepositEntry: Buffer.from([185, 131, 167, 186, 159, 125, 19, 67]), // CreateDepositEntry\r\n  voterStakeRegistryDeposit: Buffer.from([242, 35, 198, 137, 82, 225, 242, 182]), // Deposit\r\n  voterStakeRegistryWithdraw: Buffer.from([183, 18, 70, 156, 148, 109, 161, 34]), // Withdraw\r\n  voterStakeRegistryUpdateVoterWeightRecord: Buffer.from([45, 185, 3, 36, 109, 190, 115, 169]), // UpdateVoterWeightRecord\r\n};\r\n\r\nexport function createAssociatedLedgerAccountInstruction(params: {\r\n  version: number;\r\n  id: PublicKey;\r\n  programId: PublicKey;\r\n  ledger: PublicKey;\r\n  owner: PublicKey;\r\n}): InstructionReturn {\r\n  const { version, id, ledger, programId, owner } = params;\r\n  const instruction = { 3: 9, 5: 10 }[version];\r\n  if (!instruction) logger.logWithError(`invalid farm pool version: ${version}`);\r\n\r\n  const data = Buffer.alloc(associatedLedgerAccountLayout.span);\r\n  associatedLedgerAccountLayout.encode(\r\n    {\r\n      instruction: instruction!,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: ledger }),\r\n    accountMeta({ pubkey: owner, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      programId,\r\n      keys,\r\n      data,\r\n    }),\r\n    instructionType: InstructionType.FarmV3CreateLedger,\r\n  };\r\n}\r\n\r\ninterface CreateFarmInstruction {\r\n  farmId: PublicKey;\r\n  farmAuthority: PublicKey;\r\n  lpVault: PublicKey;\r\n  lpMint: PublicKey;\r\n  lockVault: PublicKey;\r\n  lockMint: PublicKey;\r\n  lockUserAccount?: PublicKey;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  rewardInfo: RewardInfoKey[];\r\n  rewardInfoConfig: FarmRewardInfoConfig[];\r\n  nonce: number;\r\n}\r\nexport function makeCreateFarmInstruction(params: CreateFarmInstruction): InstructionReturn {\r\n  const data = Buffer.alloc(farmRewardLayout.span);\r\n  farmRewardLayout.encode(\r\n    {\r\n      instruction: 0,\r\n      nonce: new BN(params.nonce),\r\n      rewardTimeInfo: params.rewardInfoConfig,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    ...commonSystemAccountMeta,\r\n    accountMeta({ pubkey: params.farmId }),\r\n    accountMeta({ pubkey: params.farmAuthority, isWritable: false }),\r\n    accountMeta({ pubkey: params.lpVault }),\r\n    accountMeta({ pubkey: params.lpMint, isWritable: false }),\r\n    accountMeta({ pubkey: params.lockVault }),\r\n    accountMeta({ pubkey: params.lockMint, isWritable: false }),\r\n    accountMeta({ pubkey: params.lockUserAccount ?? SOLMint }),\r\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  for (const item of params.rewardInfo) {\r\n    keys.push(\r\n      ...[\r\n        accountMeta({ pubkey: item.rewardMint, isWritable: false }),\r\n        accountMeta({ pubkey: item.rewardVault }),\r\n        accountMeta({ pubkey: item.userRewardToken }),\r\n      ],\r\n    );\r\n  }\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\r\n    instructionType: InstructionType.FarmV6Create,\r\n  };\r\n}\r\n\r\ninterface CreatorWithdrawFarmRewardInstruction {\r\n  id: PublicKey;\r\n  programId: PublicKey;\r\n  authority: PublicKey;\r\n  lpVault: PublicKey;\r\n  rewardVault: PublicKey;\r\n  userRewardToken: PublicKey;\r\n  owner: PublicKey;\r\n}\r\n\r\nexport function makeCreatorWithdrawFarmRewardInstruction(\r\n  params: CreatorWithdrawFarmRewardInstruction,\r\n): InstructionReturn {\r\n  const data = Buffer.alloc(withdrawRewardLayout.span);\r\n  withdrawRewardLayout.encode({ instruction: 5 }, data);\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: params.id }),\r\n    accountMeta({ pubkey: params.authority, isWritable: false }),\r\n    accountMeta({ pubkey: params.lpVault, isWritable: false }),\r\n    accountMeta({ pubkey: params.rewardVault }),\r\n    accountMeta({ pubkey: params.userRewardToken }),\r\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\r\n    instructionType: InstructionType.FarmV6CreatorWithdraw,\r\n  };\r\n}\r\n\r\nexport function voterStakeRegistryDeposit(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterVault: PublicKey,\r\n  depositToken: PublicKey,\r\n  depositAuthority: PublicKey,\r\n\r\n  userStakerInfoV2: PublicKey,\r\n  pool: PublicKey,\r\n  votingMint: PublicKey,\r\n  votingMintAuthority: PublicKey,\r\n  stakeProgramId: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  amount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterVault, isSigner: false, isWritable: true },\r\n    { pubkey: depositToken, isSigner: false, isWritable: true },\r\n    { pubkey: depositAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\r\n    { pubkey: pool, isSigner: false, isWritable: false },\r\n    { pubkey: votingMint, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryDeposit, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryUpdateVoterWeightRecord(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: false },\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({}, data);\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryUpdateVoterWeightRecord, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryWithdraw(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  tokenOwnerRecord: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n  vault: PublicKey,\r\n  destination: PublicKey,\r\n\r\n  userStakerInfoV2: PublicKey,\r\n  pool: PublicKey,\r\n  votingMint: PublicKey,\r\n  votingMintAuthority: PublicKey,\r\n  stakeProgramId: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  amount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: tokenOwnerRecord, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: vault, isSigner: false, isWritable: true },\r\n    { pubkey: destination, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\r\n    { pubkey: pool, isSigner: false, isWritable: false },\r\n    { pubkey: votingMint, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryWithdraw, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function governanceCreateTokenOwnerRecord(\r\n  programId: PublicKey,\r\n  realm: PublicKey,\r\n  governingTokenOwner: PublicKey,\r\n  governingTokenMint: PublicKey,\r\n  payer: PublicKey,\r\n  tokenOwnerRecordAddress: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"ins\")]);\r\n\r\n  const keys = [\r\n    { pubkey: realm, isSigner: false, isWritable: false },\r\n    { pubkey: governingTokenOwner, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenOwnerRecordAddress, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: governingTokenMint, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ ins: 23 }, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryCreateVoter(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  payer: PublicKey,\r\n\r\n  voterBump: number,\r\n  voterWeightRecordBump: number,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"voterBump\"), u8(\"voterWeightRecordBump\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ voterBump, voterWeightRecordBump }, data);\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateVoter, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryCreateDepositEntry(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterVault: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  payer: PublicKey,\r\n  depositMint: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  kind: number,\r\n  startTs: BN | undefined,\r\n  periods: number,\r\n  allowClawback: boolean,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([\r\n    u8(\"depositEntryIndex\"),\r\n    u8(\"kind\"),\r\n    u8(\"option\"),\r\n    u64(\"startTs\"),\r\n    u32(\"periods\"),\r\n    bool(\"allowClawback\"),\r\n  ]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterVault, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: depositMint, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      kind,\r\n      option: startTs === undefined ? 0 : 1,\r\n      startTs: startTs!,\r\n      periods,\r\n      allowClawback,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateDepositEntry, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport async function makeDepositTokenInstruction({\r\n  connection,\r\n  programId,\r\n  governanceProgramId,\r\n  voteWeightAddinProgramId,\r\n  realm,\r\n  communityTokenMint,\r\n  owner,\r\n  poolId,\r\n  tokenProgram,\r\n}: {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  governanceProgramId: PublicKey;\r\n  voteWeightAddinProgramId: PublicKey;\r\n  realm: PublicKey;\r\n  communityTokenMint: PublicKey;\r\n  owner: PublicKey;\r\n  poolId: PublicKey;\r\n  tokenProgram?: PublicKey;\r\n}): Promise<TransactionInstruction[]> {\r\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\r\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\r\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\r\n  if (ownerAccountInfo === null) {\r\n    throw Error(\"user is not staker\");\r\n  }\r\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\r\n  const mintAmount = ownerInfo.deposited.sub(ownerInfo.voteLockedBalance);\r\n  console.log(\"amount\", mintAmount.toString());\r\n  if (mintAmount.eq(new BN(0))) {\r\n    throw Error(\"user do not has new stake amount\");\r\n  }\r\n\r\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\r\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\r\n  const { publicKey: voter, nonce: voterBump } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\r\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\r\n\r\n  const { publicKey: voterWeightRecord, nonce: voterWeightRecordBump } = getVoterWeightRecordAddress(\r\n    voteWeightAddinProgramId,\r\n    registrar,\r\n    owner,\r\n  );\r\n\r\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\r\n    governanceProgramId,\r\n    realm,\r\n    communityTokenMint,\r\n    owner,\r\n  ).publicKey;\r\n\r\n  const instructions: TransactionInstruction[] = [];\r\n\r\n  const depositToken = getATAAddress(owner, votingMint, tokenProgram).publicKey;\r\n  const depositTokenAccountInfo = await connection.getAccountInfo(depositToken);\r\n  if (depositTokenAccountInfo === null) {\r\n    instructions.push(createAssociatedTokenAccountIdempotentInstruction(owner, depositToken, owner, votingMint));\r\n  }\r\n  const voterAccountInfo = await connection.getAccountInfo(voter);\r\n  if (voterAccountInfo === null) {\r\n    const createTokenOwnerRecodeIns = governanceCreateTokenOwnerRecord(\r\n      governanceProgramId,\r\n      realm,\r\n      owner,\r\n      communityTokenMint,\r\n      owner,\r\n      tokenOwnerRecordAddress,\r\n    );\r\n\r\n    instructions.push(\r\n      createTokenOwnerRecodeIns,\r\n      voterStakeRegistryCreateVoter(\r\n        voteWeightAddinProgramId,\r\n        registrar,\r\n        voter,\r\n        voterWeightRecord,\r\n        owner,\r\n        owner,\r\n        voterBump,\r\n        voterWeightRecordBump,\r\n      ),\r\n    );\r\n  }\r\n\r\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\r\n    connection,\r\n    registrar,\r\n    voter,\r\n    votingMint,\r\n  );\r\n  if (!depositEntryInit) {\r\n    instructions.push(\r\n      voterStakeRegistryCreateDepositEntry(\r\n        voteWeightAddinProgramId,\r\n        registrar,\r\n        voter,\r\n        voterVault,\r\n        owner,\r\n        owner,\r\n        votingMint,\r\n\r\n        depositEntryIndex,\r\n        0,\r\n        undefined,\r\n        0,\r\n        false,\r\n      ),\r\n    );\r\n  }\r\n\r\n  instructions.push(\r\n    voterStakeRegistryDeposit(\r\n      voteWeightAddinProgramId,\r\n      registrar,\r\n      voter,\r\n      voterVault,\r\n      depositToken,\r\n      owner,\r\n\r\n      ownerPda,\r\n      poolId,\r\n      votingMint,\r\n      votingMintAuthority,\r\n      programId,\r\n\r\n      depositEntryIndex,\r\n      mintAmount,\r\n    ),\r\n    voterStakeRegistryUpdateVoterWeightRecord(voteWeightAddinProgramId, registrar, voter, voterWeightRecord),\r\n  );\r\n\r\n  return instructions;\r\n}\r\n\r\nexport async function makeWithdrawTokenInstruction({\r\n  connection,\r\n  programId,\r\n  governanceProgramId,\r\n  voteWeightAddinProgramId,\r\n  realm,\r\n  communityTokenMint,\r\n  owner,\r\n  poolId,\r\n  tokenProgram,\r\n}: {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n\r\n  governanceProgramId: PublicKey;\r\n  voteWeightAddinProgramId: PublicKey;\r\n  realm: PublicKey;\r\n  communityTokenMint: PublicKey;\r\n  owner: PublicKey;\r\n  poolId: PublicKey;\r\n  tokenProgram?: PublicKey;\r\n}): Promise<TransactionInstruction[]> {\r\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\r\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\r\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\r\n  if (ownerAccountInfo === null) {\r\n    throw Error(\"user is not staker\");\r\n  }\r\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\r\n  if (ownerInfo.voteLockedBalance.eq(new BN(0))) {\r\n    throw Error(\"user has vote locked balance = 0\");\r\n  }\r\n\r\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\r\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\r\n  const { publicKey: voter } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\r\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\r\n  const { publicKey: voterWeightRecord } = getVoterWeightRecordAddress(voteWeightAddinProgramId, registrar, owner);\r\n\r\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\r\n    governanceProgramId,\r\n    realm,\r\n    communityTokenMint,\r\n    owner,\r\n  ).publicKey;\r\n\r\n  const instructions: TransactionInstruction[] = [];\r\n\r\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\r\n    connection,\r\n    registrar,\r\n    voter,\r\n    votingMint,\r\n  );\r\n  if (!depositEntryInit) throw Error(\"deposit entry index check error\");\r\n\r\n  instructions.push(\r\n    voterStakeRegistryWithdraw(\r\n      voteWeightAddinProgramId,\r\n      registrar,\r\n      voter,\r\n      owner,\r\n      tokenOwnerRecordAddress,\r\n      voterWeightRecord,\r\n      voterVault,\r\n      getATAAddress(owner, votingMint, tokenProgram).publicKey,\r\n      ownerPda,\r\n      poolId,\r\n      votingMint,\r\n      votingMintAuthority,\r\n      programId,\r\n\r\n      depositEntryIndex,\r\n      ownerInfo.voteLockedBalance,\r\n    ),\r\n  );\r\n\r\n  return instructions;\r\n}\r\n\r\nexport function makeRestartRewardInstruction({\r\n  payer,\r\n  rewardVault,\r\n  userRewardTokenPub,\r\n  farmKeys,\r\n  rewardInfo,\r\n}: {\r\n  payer: PublicKey;\r\n  rewardVault: PublicKey;\r\n  userRewardTokenPub: PublicKey;\r\n  farmKeys: {\r\n    id: PublicKey;\r\n    programId: PublicKey;\r\n    lpVault: PublicKey;\r\n  };\r\n  rewardInfo: {\r\n    openTime: number;\r\n    endTime: number;\r\n    perSecond: string;\r\n  };\r\n}): TransactionInstruction {\r\n  const data = Buffer.alloc(farmRewardRestartLayout.span);\r\n  farmRewardRestartLayout.encode(\r\n    {\r\n      instruction: 3,\r\n      rewardReopenTime: parseBigNumberish(rewardInfo.openTime),\r\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\r\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: farmKeys.id }),\r\n    accountMeta({ pubkey: farmKeys.lpVault, isWritable: false }),\r\n    accountMeta({ pubkey: rewardVault }),\r\n    accountMeta({ pubkey: userRewardTokenPub! }),\r\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\r\n}\r\n\r\nexport function makeAddNewRewardInstruction({\r\n  payer,\r\n  userRewardTokenPub,\r\n  farmKeys,\r\n  rewardVault,\r\n  rewardInfo,\r\n}: {\r\n  payer: PublicKey;\r\n  userRewardTokenPub: PublicKey;\r\n  rewardVault: PublicKey;\r\n  farmKeys: {\r\n    id: PublicKey;\r\n    programId: PublicKey;\r\n    authority: PublicKey;\r\n  };\r\n  rewardInfo: {\r\n    mint: PublicKey;\r\n    openTime: number;\r\n    endTime: number;\r\n    perSecond: string;\r\n    rewardType: RewardType;\r\n  };\r\n}): TransactionInstruction {\r\n  const data = Buffer.alloc(farmAddRewardLayout.span);\r\n  farmAddRewardLayout.encode(\r\n    {\r\n      instruction: 4,\r\n      isSet: new BN(1),\r\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\r\n      rewardOpenTime: parseBigNumberish(rewardInfo.openTime),\r\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\r\n      rewardType: parseBigNumberish(poolTypeV6[rewardInfo.rewardType]),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    ...commonSystemAccountMeta,\r\n    accountMeta({ pubkey: farmKeys.id }),\r\n    accountMeta({ pubkey: farmKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: rewardInfo.mint, isWritable: false }),\r\n    accountMeta({ pubkey: rewardVault }),\r\n    accountMeta({ pubkey: userRewardTokenPub! }),\r\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\r\n}\r\n\r\nexport function makeDepositWithdrawInstruction(params: {\r\n  instruction: number;\r\n  amount: BN;\r\n  farmInfo: { id: string; programId: string };\r\n  farmKeys: FormatFarmKeyOut;\r\n  lpAccount: PublicKey;\r\n  owner: PublicKey;\r\n  rewardAccounts: PublicKey[];\r\n  deposit?: boolean;\r\n  version: 3 | 5 | 6;\r\n}): TransactionInstruction {\r\n  const { farmInfo, farmKeys, version, lpAccount, rewardAccounts, owner, instruction, amount, deposit } = params;\r\n\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys =\r\n    version === 6\r\n      ? [\r\n        accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n        ...(deposit ? [accountMeta({ pubkey: SystemProgram.programId, isWritable: false })] : []),\r\n        accountMeta({ pubkey: id }),\r\n        accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n        accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n        accountMeta({ pubkey: ledgerAddress }),\r\n        accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n        accountMeta({ pubkey: lpAccount }),\r\n      ]\r\n      : [\r\n        accountMeta({ pubkey: id }),\r\n        accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n        accountMeta({ pubkey: ledgerAddress }),\r\n        accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n        accountMeta({ pubkey: lpAccount }),\r\n        accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n        accountMeta({ pubkey: rewardAccounts[0] }),\r\n        accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n        // system\r\n        accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n        accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n      ];\r\n\r\n  if (version === 5) {\r\n    for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    }\r\n  }\r\n\r\n  if (version === 6) {\r\n    for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\ninterface DepositWithdrawParams {\r\n  amount: BN;\r\n  farmInfo: { id: string; programId: string };\r\n  farmKeys: FormatFarmKeyOut;\r\n  lpAccount: PublicKey;\r\n  owner: PublicKey;\r\n  rewardAccounts: PublicKey[];\r\n  userAuxiliaryLedgers?: PublicKey[];\r\n}\r\n\r\nexport function makeWithdrawInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 6,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 2,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n\r\n    accountMeta({ pubkey: id }),\r\n\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n  ];\r\n\r\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeWithdrawInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 5,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 12,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n  }\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeWithdrawInstructionV4(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const dataLayout = struct([u8('instruction'), u64('amount')])\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: userAuxiliaryLedgers![0] }),\r\n    accountMeta({ pubkey: owner, isSigner: true, isWritable: false }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: rewardAccounts[1] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[1].vault) }),\r\n  ]\r\n\r\n  const data = Buffer.alloc(dataLayout.span)\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 2,\r\n      amount\r\n    },\r\n    data\r\n  )\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data\r\n  })\r\n}\r\n\r\nexport function makeWithdrawInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 3,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 3,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 10,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 5,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n  }\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 6,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 1,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n  ];\r\n\r\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { RewardInfoV6 } from \"../../api/type\";\r\nimport { parseBigNumberish } from \"../../common\";\r\nimport { GetMultipleAccountsInfoConfig, getMultipleAccountsInfoWithCustomFlags } from \"../../common/accountInfo\";\r\nimport { DateParam, isDateAfter, isDateBefore } from \"../../common/date\";\r\nimport { createLogger } from \"../../common/logger\";\r\nimport { findProgramAddress, ProgramAddress } from \"../../common/txTool/txUtils\";\r\nimport { jsonInfo2PoolKeys } from \"../../common/utility\";\r\n\r\nimport { splAccountLayout } from \"../account/layout\";\r\nimport { SplAccount } from \"../account/types\";\r\nimport { FARM_VERSION_TO_LEDGER_LAYOUT, FARM_VERSION_TO_STATE_LAYOUT, poolTypeV6 } from \"./config\";\r\nimport { FarmLedger, FarmLedgerLayout, FarmState, FarmStateLayout } from \"./layout\";\r\nimport { FarmRewardInfo, FarmRewardInfoConfig } from \"./type\";\r\n\r\nimport { Voter, VoterRegistrar } from \"./layout\";\r\n\r\nconst logger = createLogger(\"Raydium.farm.util\");\r\ninterface AssociatedLedgerPoolAccount {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n  mint: PublicKey;\r\n  type: \"lpVault\" | \"rewardVault\";\r\n}\r\n\r\nexport function getAssociatedLedgerPoolAccount({\r\n  programId,\r\n  poolId,\r\n  mint,\r\n  type,\r\n}: AssociatedLedgerPoolAccount): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [\r\n      poolId.toBuffer(),\r\n      mint.toBuffer(),\r\n      Buffer.from(\r\n        type === \"lpVault\" ? \"lp_vault_associated_seed\" : type === \"rewardVault\" ? \"reward_vault_associated_seed\" : \"\",\r\n        \"utf-8\",\r\n      ),\r\n    ],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getAssociatedLedgerAccount({\r\n  programId,\r\n  poolId,\r\n  owner,\r\n  version,\r\n}: {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n  owner: PublicKey;\r\n  version: 6 | 5 | 3;\r\n}): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [\r\n      poolId.toBuffer(),\r\n      owner.toBuffer(),\r\n      Buffer.from(version === 6 ? \"farmer_info_associated_seed\" : \"staker_info_v2_associated_seed\", \"utf-8\"),\r\n    ],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport const getAssociatedAuthority = ({\r\n  programId,\r\n  poolId,\r\n}: {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n}): ProgramAddress => findProgramAddress([poolId.toBuffer()], programId);\r\n\r\nexport function farmRewardInfoToConfig(data: FarmRewardInfo): FarmRewardInfoConfig {\r\n  return {\r\n    isSet: new BN(1),\r\n    rewardPerSecond: parseBigNumberish(data.perSecond),\r\n    rewardOpenTime: parseBigNumberish(data.openTime),\r\n    rewardEndTime: parseBigNumberish(data.endTime),\r\n    rewardType: parseBigNumberish(poolTypeV6[data.rewardType]),\r\n  };\r\n}\r\n\r\nexport function calFarmRewardAmount(data: Pick<RewardInfoV6, \"openTime\" | \"endTime\"> & { perSecond: string }): BN {\r\n  return parseBigNumberish(data.endTime).sub(parseBigNumberish(data.openTime)).mul(parseBigNumberish(data.perSecond));\r\n}\r\n\r\nexport function getFarmLedgerLayout(version: number): FarmLedgerLayout | undefined {\r\n  const ledgerLayout = FARM_VERSION_TO_LEDGER_LAYOUT[version];\r\n  if (!ledgerLayout) logger.logWithError(\"invalid version\", version);\r\n  return ledgerLayout;\r\n}\r\n\r\nexport function getFarmStateLayout(version: number): FarmStateLayout | undefined {\r\n  const stateLayout = FARM_VERSION_TO_STATE_LAYOUT[version];\r\n  if (!stateLayout) logger.logWithError(\"invalid version\", version);\r\n  return stateLayout;\r\n}\r\n\r\nexport function updateFarmPoolInfo(\r\n  poolInfo: FarmState,\r\n  lpVault: SplAccount,\r\n  slot: number,\r\n  chainTime: number,\r\n): FarmState {\r\n  if (poolInfo.version === 3 || poolInfo.version === 5) {\r\n    if (poolInfo.lastSlot.gte(new BN(slot))) return poolInfo;\r\n\r\n    const spread = new BN(slot).sub(poolInfo.lastSlot);\r\n    poolInfo.lastSlot = new BN(slot);\r\n\r\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\r\n      if (lpVault.amount.eq(new BN(0))) continue;\r\n\r\n      const reward = itemRewardInfo.perSlotReward.mul(spread);\r\n      itemRewardInfo.perShareReward = itemRewardInfo.perShareReward.add(\r\n        reward.mul(new BN(10).pow(new BN(poolInfo.version === 3 ? 9 : 15))).div(lpVault.amount),\r\n      );\r\n      itemRewardInfo.totalReward = itemRewardInfo.totalReward.add(reward);\r\n    }\r\n  } else if (poolInfo.version === 6) {\r\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\r\n      if (itemRewardInfo.rewardState.eq(new BN(0))) continue;\r\n      const updateTime = BN.min(new BN(chainTime), itemRewardInfo.rewardEndTime);\r\n      if (itemRewardInfo.rewardOpenTime.gte(updateTime)) continue;\r\n      const spread = updateTime.sub(itemRewardInfo.rewardLastUpdateTime);\r\n      let reward = spread.mul(itemRewardInfo.rewardPerSecond);\r\n      const leftReward = itemRewardInfo.totalReward.sub(itemRewardInfo.totalRewardEmissioned);\r\n      if (leftReward.lt(reward)) {\r\n        reward = leftReward;\r\n        itemRewardInfo.rewardLastUpdateTime = itemRewardInfo.rewardLastUpdateTime.add(\r\n          leftReward.div(itemRewardInfo.rewardPerSecond),\r\n        );\r\n      } else {\r\n        itemRewardInfo.rewardLastUpdateTime = updateTime;\r\n      }\r\n      if (lpVault.amount.eq(new BN(0))) continue;\r\n      itemRewardInfo.accRewardPerShare = itemRewardInfo.accRewardPerShare.add(\r\n        reward.mul(poolInfo.rewardMultiplier).div(lpVault.amount),\r\n      );\r\n      itemRewardInfo.totalRewardEmissioned = itemRewardInfo.totalRewardEmissioned.add(reward);\r\n    }\r\n  }\r\n  return poolInfo;\r\n}\r\n\r\ninterface FarmPoolsInfo {\r\n  [id: string]: {\r\n    state: FarmState;\r\n    lpVault: SplAccount;\r\n    ledger?: FarmLedger;\r\n    wrapped?: { pendingRewards: BN[] };\r\n  };\r\n}\r\n\r\nexport interface FarmFetchMultipleInfoParams {\r\n  connection: Connection;\r\n  farmPools: any[];\r\n  owner?: PublicKey;\r\n  config?: GetMultipleAccountsInfoConfig;\r\n  chainTime: number;\r\n}\r\n\r\nexport async function fetchMultipleFarmInfoAndUpdate({\r\n  connection,\r\n  farmPools,\r\n  owner,\r\n  config,\r\n  chainTime,\r\n}: FarmFetchMultipleInfoParams): Promise<FarmPoolsInfo> {\r\n  let hasNotV6Pool = false;\r\n  let hasV6Pool = false;\r\n  const tenBN = new BN(10);\r\n\r\n  const publicKeys: {\r\n    pubkey: PublicKey;\r\n    version: number;\r\n    key: \"state\" | \"lpVault\" | \"ledger\";\r\n    poolId: PublicKey;\r\n  }[] = [];\r\n\r\n  for (const poolInfo of farmPools) {\r\n    const pool = jsonInfo2PoolKeys(poolInfo);\r\n    if (pool.version === 6) hasV6Pool = true;\r\n    else hasNotV6Pool = true;\r\n\r\n    publicKeys.push(\r\n      {\r\n        pubkey: pool.id,\r\n        version: pool.version,\r\n        key: \"state\",\r\n        poolId: pool.id,\r\n      },\r\n      {\r\n        pubkey: pool.lpVault,\r\n        version: pool.version,\r\n        key: \"lpVault\",\r\n        poolId: pool.id,\r\n      },\r\n    );\r\n\r\n    if (owner) {\r\n      publicKeys.push({\r\n        pubkey: getAssociatedLedgerAccount({\r\n          programId: pool.programId,\r\n          poolId: pool.id,\r\n          owner,\r\n          version: poolInfo.version as 6 | 5 | 3,\r\n        }),\r\n        version: pool.version,\r\n        key: \"ledger\",\r\n        poolId: pool.id,\r\n      });\r\n    }\r\n  }\r\n\r\n  const poolsInfo: FarmPoolsInfo = {};\r\n  const accountsInfo = await getMultipleAccountsInfoWithCustomFlags(connection, publicKeys, config);\r\n  for (const { pubkey, version, key, poolId, accountInfo } of accountsInfo) {\r\n    const _poolId = poolId.toBase58();\r\n    poolsInfo[_poolId] = { ...poolsInfo[_poolId] };\r\n    if (key === \"state\") {\r\n      const stateLayout = getFarmStateLayout(version);\r\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== stateLayout!.span)\r\n        logger.logWithError(`invalid farm state account info, pools.id, ${pubkey}`);\r\n      poolsInfo[_poolId].state = stateLayout!.decode(accountInfo!.data);\r\n    } else if (key === \"lpVault\") {\r\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== splAccountLayout.span)\r\n        logger.logWithError(`invalid farm lp vault account info, pools.lpVault, ${pubkey}`);\r\n      poolsInfo[_poolId].lpVault = splAccountLayout.decode(accountInfo!.data);\r\n    } else if (key === \"ledger\") {\r\n      const legerLayout = getFarmLedgerLayout(version)!;\r\n      if (accountInfo && accountInfo.data) {\r\n        if (accountInfo.data.length !== legerLayout.span)\r\n          logger.logWithError(`invalid farm ledger account info, ledger, ${pubkey}`);\r\n        poolsInfo[_poolId].ledger = legerLayout.decode(accountInfo.data);\r\n      }\r\n    }\r\n  }\r\n\r\n  const slot = hasV6Pool || hasNotV6Pool ? await connection.getSlot() : 0;\r\n\r\n  for (const poolId of Object.keys(poolsInfo)) {\r\n    if (poolsInfo[poolId] === undefined) continue;\r\n    poolsInfo[poolId].state = updateFarmPoolInfo(poolsInfo[poolId].state, poolsInfo[poolId].lpVault, slot, chainTime);\r\n  }\r\n\r\n  for (const [poolId, { state, ledger }] of Object.entries(poolsInfo)) {\r\n    if (ledger) {\r\n      const multiplier =\r\n        state.version === 6\r\n          ? state.rewardMultiplier\r\n          : state.rewardInfos.length === 1\r\n            ? tenBN.pow(new BN(9))\r\n            : tenBN.pow(new BN(15));\r\n\r\n      const pendingRewards = state.rewardInfos.map((rewardInfo, index) => {\r\n        const rewardDebt = ledger.rewardDebts[index];\r\n        const pendingReward = ledger.deposited\r\n          .mul(state.version === 6 ? rewardInfo.accRewardPerShare : rewardInfo.perShareReward)\r\n          .div(multiplier)\r\n          .sub(rewardDebt);\r\n\r\n        return pendingReward;\r\n      });\r\n\r\n      poolsInfo[poolId].wrapped = {\r\n        ...poolsInfo[poolId].wrapped,\r\n        pendingRewards,\r\n      };\r\n    }\r\n  }\r\n\r\n  return poolsInfo;\r\n}\r\n/** deprecated */\r\nexport function judgeFarmType(\r\n  info: any,\r\n  currentTime: DateParam = Date.now(),\r\n): \"closed pool\" | \"normal fusion pool\" | \"dual fusion pool\" | undefined | \"upcoming pool\" {\r\n  if (info.version === 6) {\r\n    const rewardInfos = info.state.rewardInfos;\r\n    if (rewardInfos.every(({ rewardOpenTime }) => isDateBefore(currentTime, rewardOpenTime.toNumber(), { unit: \"s\" })))\r\n      return \"upcoming pool\";\r\n    if (rewardInfos.every(({ rewardEndTime }) => isDateAfter(currentTime, rewardEndTime.toNumber(), { unit: \"s\" })))\r\n      return \"closed pool\";\r\n  } else {\r\n    const perSlotRewards = info.state.rewardInfos.map(({ perSlotReward }) => perSlotReward);\r\n    if (perSlotRewards.length === 2) {\r\n      // v5\r\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) !== \"0\") {\r\n        return \"normal fusion pool\"; // reward xxx token\r\n      }\r\n      if (String(perSlotRewards[0]) !== \"0\" && String(perSlotRewards[1]) !== \"0\") {\r\n        return \"dual fusion pool\"; // reward ray and xxx token\r\n      }\r\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) === \"0\") {\r\n        return \"closed pool\";\r\n      }\r\n    } else if (perSlotRewards.length === 1) {\r\n      // v3\r\n      if (String(perSlotRewards[0]) === \"0\") {\r\n        return \"closed pool\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport async function getDepositEntryIndex(\r\n  connection: Connection,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterMint: PublicKey,\r\n): Promise<{ index: number; isInit: boolean }> {\r\n  const registrarAccountData = await connection.getAccountInfo(registrar);\r\n  if (registrarAccountData === null) throw Error(\"registrar info check error\");\r\n  const registrarData = VoterRegistrar.decode(registrarAccountData.data);\r\n\r\n  const votingMintConfigIndex = registrarData.votingMints.findIndex((i) => i.mint.equals(voterMint));\r\n\r\n  if (votingMintConfigIndex === -1) throw Error(\"find voter mint error\");\r\n\r\n  const voterAccountData = await connection.getAccountInfo(voter);\r\n  if (voterAccountData === null) return { index: votingMintConfigIndex, isInit: false }; // throw Error('voter info check error')\r\n\r\n  const voterData = Voter.decode(voterAccountData.data);\r\n\r\n  const depositEntryIndex = voterData.deposits.findIndex(\r\n    (i) => i.isUsed && i.votingMintConfigIdx === votingMintConfigIndex,\r\n  );\r\n  if (depositEntryIndex === -1) return { index: votingMintConfigIndex, isInit: false };\r\n  else return { index: depositEntryIndex, isInit: true };\r\n}\r\n"],"mappings":"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","names":[]}