{"version":3,"sources":["../../../src/raydium/tradeV2/trade.ts","../../../src/common/accountInfo.ts","../../../src/common/logger.ts","../../../src/common/bignumber.ts","../../../src/module/amount.ts","../../../src/module/formatter.ts","../../../src/module/fraction.ts","../../../src/common/constant.ts","../../../src/raydium/token/constant.ts","../../../src/module/token.ts","../../../src/common/pubKey.ts","../../../src/module/currency.ts","../../../src/module/percent.ts","../../../src/module/price.ts","../../../src/common/lodash.ts","../../../src/common/owner.ts","../../../src/common/pda.ts","../../../src/common/txTool/txUtils.ts","../../../src/common/txTool/txType.ts","../../../src/common/programId.ts","../../../src/common/transfer.ts","../../../src/common/txTool/lookupTable.ts","../../../src/common/txTool/txTool.ts","../../../src/common/utility.ts","../../../src/common/fee.ts","../../../src/marshmallow/index.ts","../../../src/marshmallow/buffer-layout.ts","../../../src/raydium/clmm/clmm.ts","../../../src/raydium/token/utils.ts","../../../src/raydium/moduleBase.ts","../../../src/raydium/clmm/instrument.ts","../../../src/raydium/clmm/utils/tick.ts","../../../src/raydium/clmm/utils/constants.ts","../../../src/raydium/clmm/utils/math.ts","../../../src/raydium/clmm/utils/util.ts","../../../src/raydium/clmm/utils/pda.ts","../../../src/raydium/clmm/utils/pool.ts","../../../src/raydium/clmm/utils/position.ts","../../../src/raydium/clmm/utils/tickQuery.ts","../../../src/raydium/clmm/utils/tickarrayBitmap.ts","../../../src/raydium/clmm/layout.ts","../../../src/raydium/cpmm/layout.ts","../../../src/raydium/cpmm/instruction.ts","../../../src/raydium/cpmm/pda.ts","../../../src/raydium/cpmm/curve/calculator.ts","../../../src/raydium/cpmm/curve/constantProduct.ts","../../../src/raydium/cpmm/curve/fee.ts","../../../src/raydium/liquidity/constant.ts","../../../src/raydium/liquidity/layout.ts","../../../src/raydium/liquidity/utils.ts","../../../src/raydium/liquidity/instruction.ts","../../../src/raydium/liquidity/serum.ts","../../../src/raydium/liquidity/stable.ts","../../../src/raydium/account/layout.ts","../../../src/raydium/account/util.ts","../../../node_modules/@noble/hashes/src/_assert.ts","../../../node_modules/@noble/hashes/src/utils.ts","../../../node_modules/@noble/hashes/src/_md.ts","../../../node_modules/@noble/hashes/src/sha256.ts","../../../src/raydium/account/instruction.ts","../../../src/raydium/token/layout.ts","../../../src/raydium/serum/id.ts","../../../src/raydium/serum/layout.ts","../../../src/raydium/serum/serum.ts","../../../src/raydium/tradeV2/instrument.ts"],"sourcesContent":["import { EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport { createTransferInstruction, TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { AmmV4Keys, ApiV3Token, ClmmKeys, PoolKeys } from \"@/api\";\r\nimport {\r\n  AMM_V4,\r\n  BigNumberish,\r\n  CLMM_PROGRAM_ID,\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  fetchMultipleMintInfos,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  minExpirationTime,\r\n  parseBigNumberish,\r\n  solToWSol,\r\n  WSOLMint,\r\n} from \"@/common\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { publicKey, struct } from \"../../marshmallow\";\r\nimport { Price, TokenAmount } from \"../../module\";\r\nimport {\r\n  ClmmParsedRpcData,\r\n  ComputeClmmPoolInfo,\r\n  PoolUtils,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n} from \"../../raydium/clmm\";\r\nimport { PoolInfoLayout } from \"../../raydium/clmm/layout\";\r\nimport { CpmmPoolInfoLayout, getPdaPoolAuthority } from \"../../raydium/cpmm\";\r\nimport {\r\n  ComputeAmountOutParam,\r\n  getLiquidityAssociatedAuthority,\r\n  liquidityStateV4Layout,\r\n  toAmmComputePoolInfo,\r\n} from \"../../raydium/liquidity\";\r\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos } from \"../../raydium/type\";\r\nimport { closeAccountInstruction, createWSolAccountInstructions } from \"../account/instruction\";\r\nimport { TokenAccount } from \"../account/types\";\r\nimport { CpmmComputeData } from \"../cpmm\";\r\nimport { AmmRpcData } from \"../liquidity\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { Market, MARKET_STATE_LAYOUT_V3 } from \"../serum\";\r\nimport { toApiV3Token, toToken, toTokenAmount } from \"../token\";\r\nimport { makeSwapInstruction } from \"./instrument\";\r\nimport {\r\n  BasicPoolInfo,\r\n  ComputeAmountOutAmmLayout,\r\n  ComputeAmountOutLayout,\r\n  ComputePoolType,\r\n  ComputeRoutePathType,\r\n  ReturnTypeFetchMultipleInfo,\r\n  ReturnTypeGetAllRoute,\r\n  RoutePathType,\r\n} from \"./type\";\r\n\r\nconst ZERO = new BN(0);\r\nexport default class TradeV2 extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  private async getWSolAccounts(): Promise<TokenAccount[]> {\r\n    this.scope.checkOwner();\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const tokenAccounts = this.scope.account.tokenAccounts.filter((acc) => acc.mint.equals(WSOLMint));\r\n    tokenAccounts.sort((a, b) => {\r\n      if (a.isAssociated) return 1;\r\n      if (b.isAssociated) return -1;\r\n      return a.amount.lt(b.amount) ? -1 : 1;\r\n    });\r\n    return tokenAccounts;\r\n  }\r\n\r\n  public async unWrapWSol<T extends TxVersion>(props: {\r\n    amount: BigNumberish;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    tokenProgram?: PublicKey;\r\n    txVersion?: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const { amount, tokenProgram, txVersion = TxVersion.LEGACY, feePayer } = props;\r\n    const tokenAccounts = await this.getWSolAccounts();\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    txBuilder.addCustomComputeBudget(props.computeBudgetConfig);\r\n    // const ins = await createWSolAccountInstructions({\r\n    //   connection: this.scope.connection,\r\n    //   owner: this.scope.ownerPubKey,\r\n    //   payer: this.scope.ownerPubKey,\r\n    //   amount: 0,\r\n    // });\r\n    // txBuilder.addInstruction(ins);\r\n\r\n    const amountBN = parseBigNumberish(amount);\r\n    for (let i = 0; i < tokenAccounts.length; i++) {\r\n      if (amountBN.gte(tokenAccounts[i].amount)) {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            closeAccountInstruction({\r\n              tokenAccount: tokenAccounts[i].publicKey!,\r\n              payer: this.scope.ownerPubKey,\r\n              owner: this.scope.ownerPubKey,\r\n              programId: tokenProgram,\r\n            }),\r\n          ],\r\n        });\r\n        amountBN.sub(tokenAccounts[i].amount);\r\n      } else {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            closeAccountInstruction({\r\n              tokenAccount: tokenAccounts[i].publicKey!,\r\n              payer: this.scope.ownerPubKey,\r\n              owner: this.scope.ownerPubKey,\r\n              programId: tokenProgram,\r\n            }),\r\n          ],\r\n        });\r\n      }\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async wrapWSol<T extends TxVersion>(\r\n    amount: BigNumberish,\r\n    tokenProgram?: PublicKey,\r\n    txVersion?: T,\r\n    feePayer?: PublicKey,\r\n  ): Promise<MakeTxData<T>> {\r\n    // const tokenAccounts = await this.getWSolAccounts();\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const ins = await createWSolAccountInstructions({\r\n      connection: this.scope.connection,\r\n      owner: this.scope.ownerPubKey,\r\n      payer: this.scope.ownerPubKey,\r\n      amount,\r\n      skipCloseAccount: true,\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n\r\n    // if (tokenAccounts.length) {\r\n    //   // already have wsol account\r\n    //   txBuilder.addInstruction({\r\n    //     instructions: [\r\n    //       makeTransferInstruction({\r\n    //         destination: tokenAccounts[0].publicKey!,\r\n    //         source: ins.addresses.newAccount,\r\n    //         amount,\r\n    //         owner: this.scope.ownerPubKey,\r\n    //         tokenProgram,\r\n    //       }),\r\n    //     ],\r\n    //     endInstructions: [\r\n    //       closeAccountInstruction({\r\n    //         tokenAccount: ins.addresses.newAccount,\r\n    //         payer: this.scope.ownerPubKey,\r\n    //         owner: this.scope.ownerPubKey,\r\n    //         programId: tokenProgram,\r\n    //       }),\r\n    //     ],\r\n    //   });\r\n    // }\r\n    return txBuilder.versionBuild({ txVersion: txVersion ?? TxVersion.LEGACY }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    swapInfo,\r\n    swapPoolKeys,\r\n    ownerInfo,\r\n    computeBudgetConfig,\r\n    routeProgram,\r\n    txVersion,\r\n    feePayer,\r\n  }: {\r\n    txVersion: T;\r\n    swapInfo: ComputeAmountOutLayout;\r\n    swapPoolKeys?: PoolKeys[];\r\n    ownerInfo: {\r\n      associatedOnly: boolean;\r\n      checkCreateATAOwner: boolean;\r\n    };\r\n    routeProgram: PublicKey;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const amountIn = swapInfo.amountIn;\r\n    const amountOut = swapInfo.amountOut;\r\n    const useSolBalance = amountIn.amount.token.mint.equals(WSOLMint);\r\n    const isOutputSol = amountOut.amount.token.mint.equals(WSOLMint);\r\n    const inputMint = amountIn.amount.token.mint;\r\n    const outputMint = amountOut.amount.token.mint;\r\n\r\n    const { account: sourceAcc, instructionParams: sourceAccInsParams } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: amountIn.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n        mint: inputMint,\r\n        notUseTokenAccount: useSolBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !useSolBalance,\r\n        createInfo: useSolBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountIn.amount.raw,\r\n            }\r\n          : undefined,\r\n        associatedOnly: useSolBalance ? false : ownerInfo.associatedOnly,\r\n        checkCreateATAOwner: ownerInfo.checkCreateATAOwner,\r\n      });\r\n\r\n    sourceAccInsParams && txBuilder.addInstruction(sourceAccInsParams);\r\n\r\n    if (sourceAcc === undefined) {\r\n      throw Error(\"input account check error\");\r\n    }\r\n\r\n    let destinationAcc: PublicKey;\r\n    if (swapInfo.routeType === \"route\" && !isOutputSol) {\r\n      destinationAcc = this.scope.account.getAssociatedTokenAccount(\r\n        outputMint,\r\n        amountOut.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n      );\r\n    } else {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: amountOut.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n        mint: outputMint,\r\n        notUseTokenAccount: isOutputSol,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: true,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: isOutputSol ? false : ownerInfo.associatedOnly,\r\n        checkCreateATAOwner: ownerInfo.checkCreateATAOwner,\r\n      });\r\n      destinationAcc = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (isOutputSol) {\r\n      txBuilder.addInstruction({\r\n        endInstructions: [\r\n          closeAccountInstruction({\r\n            owner: this.scope.ownerPubKey,\r\n            payer: this.scope.ownerPubKey,\r\n            tokenAccount: destinationAcc,\r\n            programId: TOKEN_PROGRAM_ID,\r\n          }),\r\n        ],\r\n        endInstructionTypes: [InstructionType.CloseAccount],\r\n      });\r\n    }\r\n\r\n    let routeTokenAcc: PublicKey | undefined = undefined;\r\n    if (swapInfo.routeType === \"route\") {\r\n      const middleMint = swapInfo.middleToken;\r\n      routeTokenAcc = this.scope.account.getAssociatedTokenAccount(\r\n        middleMint.mint,\r\n        middleMint.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n      );\r\n    }\r\n\r\n    const poolKeys = swapPoolKeys ? swapPoolKeys : await this.computePoolToPoolKeys({ pools: swapInfo.poolInfoList });\r\n    const swapIns = makeSwapInstruction({\r\n      routeProgram,\r\n      inputMint,\r\n      swapInfo: {\r\n        ...swapInfo,\r\n        poolInfo: [...swapInfo.poolInfoList],\r\n        poolKey: poolKeys,\r\n        outputMint,\r\n      },\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        sourceToken: sourceAcc,\r\n        routeToken: routeTokenAcc,\r\n        destinationToken: destinationAcc!,\r\n      },\r\n    });\r\n\r\n    if (swapInfo.feeConfig !== undefined) {\r\n      const checkTxBuilder = this.createTxBuilder();\r\n      checkTxBuilder.addInstruction({\r\n        instructions: [\r\n          createTransferInstruction(\r\n            sourceAcc,\r\n            swapInfo.feeConfig.feeAccount,\r\n            this.scope.ownerPubKey,\r\n            swapInfo.feeConfig.feeAmount.toNumber(),\r\n          ),\r\n        ],\r\n        instructionTypes: [InstructionType.TransferAmount],\r\n      });\r\n      checkTxBuilder.addInstruction(swapIns);\r\n\r\n      const { transactions } =\r\n        txVersion === TxVersion.V0 ? await checkTxBuilder.sizeCheckBuildV0() : await checkTxBuilder.sizeCheckBuild();\r\n      if (transactions.length < 2) {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            createTransferInstruction(\r\n              sourceAcc,\r\n              swapInfo.feeConfig.feeAccount,\r\n              this.scope.ownerPubKey,\r\n              swapInfo.feeConfig.feeAmount.toNumber(),\r\n            ),\r\n          ],\r\n          instructionTypes: [InstructionType.TransferAmount],\r\n        });\r\n      }\r\n    }\r\n    txBuilder.addInstruction(swapIns);\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig, address: swapIns.address }) as Promise<\r\n        MakeMultiTxData<T>\r\n      >;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig, address: swapIns.address }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  // get all amm/clmm/cpmm pools data only with id and mint\r\n  public async fetchRoutePoolBasicInfo(programIds?: { amm: PublicKey; clmm: PublicKey; cpmm: PublicKey }): Promise<{\r\n    ammPools: BasicPoolInfo[];\r\n    clmmPools: BasicPoolInfo[];\r\n    cpmmPools: BasicPoolInfo[];\r\n  }> {\r\n    const { amm = AMM_V4, clmm = CLMM_PROGRAM_ID, cpmm = CREATE_CPMM_POOL_PROGRAM } = programIds || {};\r\n    const ammPoolsData = await this.scope.connection.getProgramAccounts(amm, {\r\n      dataSlice: { offset: liquidityStateV4Layout.offsetOf(\"baseMint\"), length: 64 },\r\n    });\r\n\r\n    const layoutAmm = struct([publicKey(\"baseMint\"), publicKey(\"quoteMint\")]);\r\n    const ammData = ammPoolsData.map((data) => ({\r\n      id: data.pubkey,\r\n      version: 4,\r\n      mintA: layoutAmm.decode(data.account.data).baseMint,\r\n      mintB: layoutAmm.decode(data.account.data).quoteMint,\r\n    }));\r\n\r\n    const layout = struct([publicKey(\"mintA\"), publicKey(\"mintB\")]);\r\n    const clmmPoolsData = await this.scope.connection.getProgramAccounts(clmm, {\r\n      filters: [{ dataSize: PoolInfoLayout.span }],\r\n      dataSlice: { offset: PoolInfoLayout.offsetOf(\"mintA\"), length: 64 },\r\n    });\r\n\r\n    const clmmData = clmmPoolsData.map((data) => {\r\n      const clmm = layout.decode(data.account.data);\r\n      return {\r\n        id: data.pubkey,\r\n        version: 6,\r\n        mintA: clmm.mintA,\r\n        mintB: clmm.mintB,\r\n      };\r\n    });\r\n\r\n    const cpmmPools = await this.scope.connection.getProgramAccounts(cpmm, {\r\n      dataSlice: { offset: CpmmPoolInfoLayout.offsetOf(\"mintA\"), length: 64 },\r\n    });\r\n\r\n    const cpmmData = cpmmPools.map((data) => {\r\n      const clmm = layout.decode(data.account.data);\r\n      return {\r\n        id: data.pubkey,\r\n        version: 7,\r\n        mintA: clmm.mintA,\r\n        mintB: clmm.mintB,\r\n      };\r\n    });\r\n\r\n    return {\r\n      clmmPools: clmmData,\r\n      ammPools: ammData,\r\n      cpmmPools: cpmmData,\r\n    };\r\n  }\r\n\r\n  // get pools with in routes\r\n  public getAllRoute({\r\n    inputMint,\r\n    outputMint,\r\n    clmmPools,\r\n    ammPools,\r\n    cpmmPools,\r\n  }: {\r\n    inputMint: PublicKey;\r\n    outputMint: PublicKey;\r\n    clmmPools: BasicPoolInfo[];\r\n    ammPools: BasicPoolInfo[];\r\n    cpmmPools: BasicPoolInfo[];\r\n  }): ReturnTypeGetAllRoute {\r\n    inputMint = inputMint.toString() === PublicKey.default.toString() ? WSOLMint : inputMint;\r\n    outputMint = outputMint.toString() === PublicKey.default.toString() ? WSOLMint : outputMint;\r\n\r\n    const needSimulate: { [poolKey: string]: BasicPoolInfo } = {};\r\n    const needTickArray: { [poolKey: string]: BasicPoolInfo } = {};\r\n    const cpmmPoolList: { [poolKey: string]: BasicPoolInfo } = {};\r\n\r\n    const directPath: BasicPoolInfo[] = [];\r\n\r\n    const routePathDict: RoutePathType = {}; // {[route mint: string]: {in: [] , out: []}}\r\n\r\n    for (const itemClmmPool of clmmPools ?? []) {\r\n      if (\r\n        (itemClmmPool.mintA.equals(inputMint) && itemClmmPool.mintB.equals(outputMint)) ||\r\n        (itemClmmPool.mintA.equals(outputMint) && itemClmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemClmmPool);\r\n        needTickArray[itemClmmPool.id.toString()] = itemClmmPool;\r\n      }\r\n\r\n      if (itemClmmPool.mintA.equals(inputMint)) {\r\n        const t = itemClmmPool.mintB.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].in.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintB.equals(inputMint)) {\r\n        const t = itemClmmPool.mintA.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].in.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintA.equals(outputMint)) {\r\n        const t = itemClmmPool.mintB.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].out.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintB.equals(outputMint)) {\r\n        const t = itemClmmPool.mintA.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].out.push(itemClmmPool);\r\n      }\r\n    }\r\n\r\n    const addLiquidityPools: BasicPoolInfo[] = [];\r\n\r\n    for (const itemAmmPool of ammPools) {\r\n      if (\r\n        (itemAmmPool.mintA.equals(inputMint) && itemAmmPool.mintB.equals(outputMint)) ||\r\n        (itemAmmPool.mintA.equals(outputMint) && itemAmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemAmmPool);\r\n        needSimulate[itemAmmPool.id.toBase58()] = itemAmmPool;\r\n        addLiquidityPools.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintA.equals(inputMint)) {\r\n        if (routePathDict[itemAmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintB.toBase58()].in.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintB.equals(inputMint)) {\r\n        if (routePathDict[itemAmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintA.toBase58()].in.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintA.equals(outputMint)) {\r\n        if (routePathDict[itemAmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintB.toBase58()].out.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintB.equals(outputMint)) {\r\n        if (routePathDict[itemAmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintA.toBase58()].out.push(itemAmmPool);\r\n      }\r\n    }\r\n\r\n    for (const itemCpmmPool of cpmmPools) {\r\n      if (\r\n        (itemCpmmPool.mintA.equals(inputMint) && itemCpmmPool.mintB.equals(outputMint)) ||\r\n        (itemCpmmPool.mintA.equals(outputMint) && itemCpmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemCpmmPool);\r\n        cpmmPoolList[itemCpmmPool.id.toBase58()] = itemCpmmPool;\r\n      }\r\n      if (itemCpmmPool.mintA.equals(inputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintB.toBase58()].in.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintB.equals(inputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintA.toBase58()].in.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintA.equals(outputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintB.toBase58()].out.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintB.equals(outputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintA.toBase58()].out.push(itemCpmmPool);\r\n      }\r\n    }\r\n\r\n    for (const t of Object.keys(routePathDict)) {\r\n      if (\r\n        routePathDict[t].in.length === 1 &&\r\n        routePathDict[t].out.length === 1 &&\r\n        routePathDict[t].in[0].id.equals(routePathDict[t].out[0].id)\r\n      ) {\r\n        delete routePathDict[t];\r\n        continue;\r\n      }\r\n      if (routePathDict[t].in.length === 0 || routePathDict[t].out.length === 0) {\r\n        delete routePathDict[t];\r\n        continue;\r\n      }\r\n\r\n      const info = routePathDict[t];\r\n\r\n      for (const infoIn of info.in) {\r\n        for (const infoOut of info.out) {\r\n          if (infoIn.version === 6 && needTickArray[infoIn.id.toString()] === undefined) {\r\n            needTickArray[infoIn.id.toString()] = infoIn;\r\n          } else if (infoIn.version === 7 && cpmmPoolList[infoIn.id.toString()] === undefined) {\r\n            cpmmPoolList[infoIn.id.toString()] = infoIn;\r\n          } else if (\r\n            (infoIn.version === 4 || infoIn.version === 5) &&\r\n            needSimulate[infoIn.id.toString()] === undefined\r\n          ) {\r\n            needSimulate[infoIn.id.toString()] = infoIn;\r\n          }\r\n          if (infoOut.version === 6 && needTickArray[infoOut.id.toString()] === undefined) {\r\n            needTickArray[infoOut.id.toString()] = infoOut;\r\n          } else if (infoOut.version === 7 && cpmmPoolList[infoOut.id.toString()] === undefined) {\r\n            cpmmPoolList[infoOut.id.toString()] = infoOut;\r\n          } else if (\r\n            (infoOut.version === 4 || infoOut.version === 5) &&\r\n            needSimulate[infoOut.id.toString()] === undefined\r\n          ) {\r\n            needSimulate[infoOut.id.toString()] = infoOut;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      directPath,\r\n      addLiquidityPools,\r\n      routePathDict,\r\n      needSimulate: Object.values(needSimulate),\r\n      needTickArray: Object.values(needTickArray),\r\n      cpmmPoolList: Object.values(cpmmPoolList),\r\n    };\r\n  }\r\n\r\n  // fetch pools detail info in route\r\n  public async fetchSwapRoutesData({\r\n    routes,\r\n    inputMint,\r\n    outputMint,\r\n  }: {\r\n    inputMint: string | PublicKey;\r\n    outputMint: string | PublicKey;\r\n    routes: ReturnTypeGetAllRoute;\r\n  }): Promise<{\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n    ammPoolsRpcInfo: Record<string, AmmRpcData>;\r\n    ammSimulateCache: Record<string, ComputeAmountOutParam[\"poolInfo\"]>;\r\n    clmmPoolsRpcInfo: Record<string, ClmmParsedRpcData>;\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n    computeCpmmData: Record<string, CpmmComputeData>;\r\n    routePathDict: ComputeRoutePathType;\r\n  }> {\r\n    const mintSet = new Set([\r\n      ...routes.needTickArray.map((p) => [p.mintA.toBase58(), p.mintB.toBase58()]).flat(),\r\n      inputMint.toString(),\r\n      outputMint.toString(),\r\n    ]);\r\n\r\n    console.log(\"fetching amm pools info, total: \", routes.needSimulate.length);\r\n    const ammPoolsRpcInfo = await this.scope.liquidity.getRpcPoolInfos(routes.needSimulate.map((p) => p.id));\r\n    const ammSimulateCache = toAmmComputePoolInfo(ammPoolsRpcInfo);\r\n\r\n    let mintInfos: ReturnTypeFetchMultipleMintInfos = {};\r\n    // amm doesn't support token2022 yet, so don't need to fetch mint info\r\n    Object.values(ammSimulateCache).forEach((p) => {\r\n      mintSet.delete(p.mintA.address);\r\n      mintInfos[p.mintA.address] = {\r\n        address: new PublicKey(p.mintA.address),\r\n        programId: TOKEN_PROGRAM_ID,\r\n        mintAuthority: null,\r\n        supply: BigInt(0),\r\n        decimals: p.mintA.decimals,\r\n        isInitialized: true,\r\n        freezeAuthority: null,\r\n        tlvData: Buffer.from(\"0\", \"hex\"),\r\n        feeConfig: undefined,\r\n      };\r\n\r\n      mintSet.delete(p.mintB.address);\r\n      mintInfos[p.mintB.address] = {\r\n        address: new PublicKey(p.mintB.address),\r\n        programId: TOKEN_PROGRAM_ID,\r\n        mintAuthority: null,\r\n        supply: BigInt(0),\r\n        decimals: p.mintB.decimals,\r\n        isInitialized: true,\r\n        freezeAuthority: null,\r\n        tlvData: Buffer.from(\"0\", \"hex\"),\r\n        feeConfig: undefined,\r\n      };\r\n    });\r\n\r\n    console.log(\"fetching cpmm pools info, total: \", routes.cpmmPoolList.length);\r\n    const cpmmPoolsRpcInfo = await this.scope.cpmm.getRpcPoolInfos(\r\n      routes.cpmmPoolList.map((p) => p.id.toBase58()),\r\n      true,\r\n    );\r\n\r\n    Object.values(cpmmPoolsRpcInfo).forEach((p) => {\r\n      const [mintA, mintB] = [p.mintA.toBase58(), p.mintB.toBase58()];\r\n      if (p.mintProgramA.equals(TOKEN_PROGRAM_ID)) {\r\n        mintSet.delete(mintA);\r\n        mintInfos[mintA] = {\r\n          address: p.mintA,\r\n          programId: p.mintProgramA,\r\n          mintAuthority: null,\r\n          supply: BigInt(0),\r\n          decimals: p.mintDecimalA,\r\n          isInitialized: true,\r\n          freezeAuthority: null,\r\n          tlvData: Buffer.from(\"0\", \"hex\"),\r\n          feeConfig: undefined,\r\n        };\r\n      } else mintSet.add(mintA); // 2022, need to fetch fee config\r\n      if (p.mintProgramB.equals(TOKEN_PROGRAM_ID)) {\r\n        mintSet.delete(mintB);\r\n        mintInfos[mintB] = {\r\n          address: p.mintB,\r\n          programId: p.mintProgramB,\r\n          mintAuthority: null,\r\n          supply: BigInt(0),\r\n          decimals: p.mintDecimalB,\r\n          isInitialized: true,\r\n          freezeAuthority: null,\r\n          tlvData: Buffer.from(\"0\", \"hex\"),\r\n          feeConfig: undefined,\r\n        };\r\n      } else mintSet.add(mintB); // 2022, need to fetch fee config\r\n    });\r\n\r\n    console.log(\"fetching mints info, total: \", mintSet.size);\r\n    const fetchMintInfoRes = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    mintInfos = {\r\n      ...mintInfos,\r\n      ...fetchMintInfoRes,\r\n    };\r\n\r\n    const computeCpmmData = this.scope.cpmm.toComputePoolInfos({\r\n      pools: cpmmPoolsRpcInfo,\r\n      mintInfos,\r\n    });\r\n\r\n    console.log(\"fetching clmm pools info, total:\", routes.needTickArray.length);\r\n    const clmmPoolsRpcInfo = await this.scope.clmm.getRpcClmmPoolInfos({\r\n      poolIds: routes.needTickArray.map((p) => p.id),\r\n    });\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo,\r\n      mintInfos,\r\n    });\r\n\r\n    // update route pool mint info\r\n    const routePathDict = Object.keys(routes.routePathDict).reduce((acc, cur) => {\r\n      return {\r\n        ...acc,\r\n        [cur]: {\r\n          ...routes.routePathDict[cur],\r\n          mintProgram: mintInfos[cur].programId,\r\n          mDecimals: mintInfos[cur].decimals,\r\n          in: routes.routePathDict[cur].in.map(\r\n            (p) =>\r\n              ammSimulateCache[p.id.toBase58()] ||\r\n              computeClmmPoolInfo[p.id.toBase58()] ||\r\n              computeCpmmData[p.id.toBase58()],\r\n          ),\r\n          out: routes.routePathDict[cur].out.map(\r\n            (p) =>\r\n              ammSimulateCache[p.id.toBase58()] ||\r\n              computeClmmPoolInfo[p.id.toBase58()] ||\r\n              computeCpmmData[p.id.toBase58()],\r\n          ),\r\n        },\r\n      };\r\n    }, {} as ComputeRoutePathType);\r\n\r\n    return {\r\n      mintInfos,\r\n\r\n      ammPoolsRpcInfo,\r\n      ammSimulateCache,\r\n\r\n      clmmPoolsRpcInfo,\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n\r\n      computeCpmmData,\r\n\r\n      routePathDict,\r\n    };\r\n  }\r\n\r\n  // compute amount from routes\r\n  public getAllRouteComputeAmountOut({\r\n    inputTokenAmount,\r\n    outputToken: propOutputToken,\r\n    directPath,\r\n    routePathDict,\r\n    simulateCache,\r\n    tickCache,\r\n    slippage,\r\n    chainTime,\r\n    epochInfo,\r\n    feeConfig,\r\n  }: {\r\n    directPath: ComputePoolType[];\r\n    routePathDict: ComputeRoutePathType;\r\n    simulateCache: ReturnTypeFetchMultipleInfo;\r\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays;\r\n\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n\r\n    inputTokenAmount: TokenAmount;\r\n    outputToken: ApiV3Token;\r\n    slippage: number;\r\n    chainTime: number;\r\n    epochInfo: EpochInfo;\r\n\r\n    feeConfig?: {\r\n      feeBps: BN;\r\n      feeAccount: PublicKey;\r\n    };\r\n  }): ComputeAmountOutLayout[] {\r\n    const _amountInFee =\r\n      feeConfig === undefined\r\n        ? new BN(0)\r\n        : inputTokenAmount.raw.mul(new BN(feeConfig.feeBps.toNumber())).div(new BN(10000));\r\n    const _amoutIn = inputTokenAmount.raw.sub(_amountInFee);\r\n    const amountIn = new TokenAmount(inputTokenAmount.token, _amoutIn);\r\n    const _inFeeConfig =\r\n      feeConfig === undefined\r\n        ? undefined\r\n        : {\r\n            feeAmount: _amountInFee,\r\n            feeAccount: feeConfig.feeAccount,\r\n          };\r\n    const outputToken = {\r\n      ...propOutputToken,\r\n      address: solToWSol(propOutputToken.address).toString(),\r\n    };\r\n    const outRoute: ComputeAmountOutLayout[] = [];\r\n    for (const itemPool of directPath) {\r\n      try {\r\n        outRoute.push({\r\n          ...this.computeAmountOut({\r\n            itemPool,\r\n            tickCache,\r\n            simulateCache,\r\n            chainTime,\r\n            epochInfo,\r\n            slippage,\r\n            outputToken,\r\n            amountIn,\r\n          }),\r\n          feeConfig: _inFeeConfig,\r\n        });\r\n      } catch (e: any) {\r\n        this.logDebug(\"direct error\", itemPool.version, itemPool.id.toString(), e.message);\r\n        /* empty */\r\n      }\r\n    }\r\n    this.logDebug(\"direct done\");\r\n    for (const [routeMint, info] of Object.entries(routePathDict)) {\r\n      // const routeToken = new Token(info.mintProgram, routeMint, info.mDecimals);\r\n      const routeToken = {\r\n        chainId: 101,\r\n        address: routeMint,\r\n        programId: info.mintProgram.toBase58(),\r\n        logoURI: \"\",\r\n        symbol: \"\",\r\n        name: \"\",\r\n        decimals: info.mDecimals,\r\n        tags: [],\r\n        extensions: {},\r\n      };\r\n      const maxFirstIn = info.in\r\n        .map((i) => {\r\n          try {\r\n            return {\r\n              pool: i,\r\n              data: this.computeAmountOut({\r\n                itemPool: i,\r\n                tickCache,\r\n                simulateCache,\r\n                chainTime,\r\n                epochInfo,\r\n                slippage,\r\n                outputToken: routeToken,\r\n                amountIn,\r\n              }),\r\n            };\r\n          } catch (e: any) {\r\n            this.logDebug(\"route in error\", i.version, i.id.toString(), e.message);\r\n            return undefined;\r\n          }\r\n        })\r\n        .sort((_a, _b) => {\r\n          const a = _a === undefined ? ZERO : _a.data.amountOut.amount.raw.sub(_a.data.amountOut.fee?.raw ?? ZERO);\r\n          const b = _b === undefined ? ZERO : _b.data.amountOut.amount.raw.sub(_b.data.amountOut.fee?.raw ?? ZERO);\r\n          return a.lt(b) ? 1 : -1;\r\n        })[0];\r\n      if (maxFirstIn === undefined) continue;\r\n      const routeAmountIn = new TokenAmount(\r\n        toToken(routeToken),\r\n        maxFirstIn.data.amountOut.amount.raw.sub(maxFirstIn.data.amountOut.fee?.raw ?? ZERO),\r\n      );\r\n      for (const iOutPool of info.out) {\r\n        try {\r\n          const outC = this.computeAmountOut({\r\n            itemPool: iOutPool,\r\n            tickCache,\r\n            simulateCache,\r\n            chainTime,\r\n            epochInfo,\r\n            slippage,\r\n            outputToken,\r\n            amountIn: routeAmountIn,\r\n          });\r\n          outRoute.push({\r\n            ...outC,\r\n            allTrade: maxFirstIn.data.allTrade && outC.allTrade ? true : false,\r\n            amountIn: maxFirstIn.data.amountIn,\r\n            amountOut: outC.amountOut,\r\n            minAmountOut: outC.minAmountOut,\r\n            currentPrice: undefined,\r\n            executionPrice: new Decimal(\r\n              new Price({\r\n                baseToken: maxFirstIn.data.amountIn.amount.token,\r\n                denominator: maxFirstIn.data.amountIn.amount.raw,\r\n                quoteToken: outC.amountOut.amount.token,\r\n                numerator: outC.amountOut.amount.raw.sub(outC.amountOut.fee?.raw ?? ZERO),\r\n              }).toFixed(),\r\n            ),\r\n            priceImpact: new Decimal(maxFirstIn.data.priceImpact.add(outC.priceImpact).toFixed()),\r\n            fee: [maxFirstIn.data.fee[0], outC.fee[0]],\r\n            routeType: \"route\",\r\n            poolInfoList: [maxFirstIn.pool, iOutPool],\r\n            remainingAccounts: [maxFirstIn.data.remainingAccounts[0], outC.remainingAccounts[0]],\r\n            minMiddleAmountFee: outC.amountOut.fee?.raw\r\n              ? new TokenAmount(\r\n                  (maxFirstIn.data.amountOut.amount as TokenAmount).token,\r\n                  (maxFirstIn.data.amountOut.fee?.raw ?? ZERO).add(outC.amountOut.fee?.raw ?? ZERO),\r\n                )\r\n              : undefined,\r\n            middleToken: (maxFirstIn.data.amountOut.amount as TokenAmount).token,\r\n            poolReady: maxFirstIn.data.poolReady && outC.poolReady,\r\n            poolType: [maxFirstIn.data.poolType, outC.poolType],\r\n            feeConfig: _inFeeConfig,\r\n            expirationTime: minExpirationTime(maxFirstIn.data.expirationTime, outC.expirationTime),\r\n          });\r\n        } catch (e: any) {\r\n          this.logDebug(\"route out error\", iOutPool.version, iOutPool.id.toString(), e.message);\r\n          /* empty */\r\n        }\r\n      }\r\n    }\r\n\r\n    return outRoute\r\n      .filter((i) => {\r\n        if (!i.allTrade)\r\n          this.logDebug(`pool ${i.poolInfoList.map((p) => p.id.toString()).join(\",\")} filter out since not all trade`);\r\n        return i.allTrade;\r\n      })\r\n      .sort((a, b) => (a.amountOut.amount.raw.sub(b.amountOut.amount.raw).gt(ZERO) ? -1 : 1));\r\n  }\r\n\r\n  /** trade related utils */\r\n\r\n  private computeAmountOut({\r\n    itemPool,\r\n    tickCache,\r\n    simulateCache,\r\n    chainTime,\r\n    epochInfo,\r\n    slippage,\r\n    outputToken,\r\n    amountIn,\r\n  }: {\r\n    itemPool: ComputePoolType;\r\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays;\r\n    simulateCache: ReturnTypeFetchMultipleInfo;\r\n    chainTime: number;\r\n    epochInfo: EpochInfo;\r\n    amountIn: TokenAmount;\r\n    outputToken: ApiV3Token;\r\n    slippage: number;\r\n  }): ComputeAmountOutAmmLayout {\r\n    if (itemPool.version === 6) {\r\n      const {\r\n        allTrade,\r\n        realAmountIn,\r\n        amountOut,\r\n        minAmountOut,\r\n        expirationTime,\r\n        currentPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee,\r\n        remainingAccounts,\r\n        executionPriceX64,\r\n      } = PoolUtils.computeAmountOutFormat({\r\n        poolInfo: itemPool,\r\n        tickArrayCache: tickCache[itemPool.id.toString()],\r\n        amountIn: amountIn.raw,\r\n        tokenOut: outputToken,\r\n        slippage,\r\n        epochInfo,\r\n        catchLiquidityInsufficient: true,\r\n      });\r\n      return {\r\n        allTrade,\r\n        amountIn: realAmountIn,\r\n        amountOut,\r\n        minAmountOut,\r\n        currentPrice: new Decimal(currentPrice.toFixed()),\r\n        executionPrice: new Decimal(executionPrice.toFixed()),\r\n        priceImpact: new Decimal(priceImpact.toFixed()),\r\n        fee: [fee],\r\n        remainingAccounts: [remainingAccounts],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        poolReady: itemPool.startTime < chainTime,\r\n        poolType: \"CLMM\",\r\n        slippage,\r\n        clmmExPriceX64: [executionPriceX64],\r\n        expirationTime: minExpirationTime(realAmountIn.expirationTime, expirationTime),\r\n      };\r\n    } else if (itemPool.version === 7) {\r\n      const { allTrade, executionPrice, amountOut, minAmountOut, priceImpact, fee } = this.scope.cpmm.computeSwapAmount(\r\n        {\r\n          pool: itemPool,\r\n          outputMint: outputToken.address,\r\n          amountIn: amountIn.raw,\r\n          slippage,\r\n        },\r\n      );\r\n\r\n      return {\r\n        allTrade,\r\n        amountIn: { amount: amountIn, fee: undefined, expirationTime: undefined },\r\n        amountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: amountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        minAmountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: minAmountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        currentPrice: itemPool.poolPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee: [new TokenAmount(amountIn.token, fee)],\r\n        remainingAccounts: [],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        poolReady: itemPool.openTime.toNumber() < chainTime,\r\n        poolType: \"CPMM\",\r\n        slippage,\r\n        clmmExPriceX64: [undefined],\r\n        expirationTime: undefined,\r\n      };\r\n    } else {\r\n      if (![1, 6, 7].includes(simulateCache[itemPool.id.toString()].status)) throw Error(\"swap error\");\r\n      const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee } =\r\n        this.scope.liquidity.computeAmountOut({\r\n          poolInfo: simulateCache[itemPool.id.toString()],\r\n          amountIn: amountIn.raw,\r\n          mintIn: amountIn.token.mint,\r\n          mintOut: outputToken.address,\r\n          slippage,\r\n        });\r\n      return {\r\n        amountIn: { amount: amountIn, fee: undefined, expirationTime: undefined },\r\n        amountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: amountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        minAmountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: minAmountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        currentPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee: [new TokenAmount(amountIn.token, fee)],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        remainingAccounts: [],\r\n        poolReady: Number(simulateCache[itemPool.id as string].openTime) < chainTime,\r\n        poolType: itemPool.version === 5 ? \"STABLE\" : undefined,\r\n        expirationTime: undefined,\r\n        allTrade: true,\r\n        slippage,\r\n        clmmExPriceX64: [undefined],\r\n      };\r\n    }\r\n  }\r\n\r\n  public async computePoolToPoolKeys({\r\n    pools,\r\n    clmmRpcData = {},\r\n    ammRpcData = {},\r\n  }: {\r\n    pools: ComputePoolType[];\r\n    clmmRpcData?: Record<string, ClmmParsedRpcData>;\r\n    ammRpcData?: Record<string, AmmRpcData>;\r\n  }): Promise<PoolKeys[]> {\r\n    const clmmFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 6 && !clmmRpcData[p.id.toString()]).map((p) => p.id.toString()),\r\n    );\r\n    if (clmmFetchKeys.size > 0) {\r\n      const clmmData = await this.scope.clmm.getRpcClmmPoolInfos({ poolIds: Array.from(clmmFetchKeys) });\r\n      Object.keys(clmmData).forEach((poolId) => {\r\n        clmmRpcData[poolId] = clmmData[poolId];\r\n      });\r\n    }\r\n\r\n    const ammFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 4 && !ammRpcData[p.id.toString()]).map((p) => p.id.toString()),\r\n    );\r\n    if (ammFetchKeys.size > 0) {\r\n      const ammData = await this.scope.liquidity.getRpcPoolInfos(Array.from(ammFetchKeys));\r\n      Object.keys(ammData).forEach((poolId) => {\r\n        ammRpcData[poolId] = ammData[poolId];\r\n      });\r\n    }\r\n\r\n    const ammMarketFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 4).map((p) => (p as ComputeAmountOutParam[\"poolInfo\"]).marketId),\r\n    );\r\n    const marketData: Record<\r\n      string,\r\n      {\r\n        marketProgramId: string;\r\n        marketId: string;\r\n        marketAuthority: string;\r\n        marketBaseVault: string;\r\n        marketQuoteVault: string;\r\n        marketBids: string;\r\n        marketAsks: string;\r\n        marketEventQueue: string;\r\n      }\r\n    > = {};\r\n    if (ammMarketFetchKeys.size > 0) {\r\n      const marketAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n        this.scope.connection,\r\n        Array.from(ammMarketFetchKeys).map((p) => ({ pubkey: new PublicKey(p) })),\r\n      );\r\n      marketAccount.forEach((m) => {\r\n        if (!m.accountInfo) return;\r\n        const itemMarketInfo = MARKET_STATE_LAYOUT_V3.decode(m.accountInfo.data);\r\n        marketData[m.pubkey.toBase58()] = {\r\n          marketId: m.pubkey.toString(),\r\n          marketProgramId: m.accountInfo.owner.toString(),\r\n          marketAuthority: Market.getAssociatedAuthority({\r\n            programId: m.accountInfo.owner,\r\n            marketId: m.pubkey,\r\n          }).publicKey.toString(),\r\n          marketBaseVault: itemMarketInfo.baseVault.toString(),\r\n          marketQuoteVault: itemMarketInfo.quoteVault.toString(),\r\n          marketBids: itemMarketInfo.bids.toString(),\r\n          marketAsks: itemMarketInfo.asks.toString(),\r\n          marketEventQueue: itemMarketInfo.eventQueue.toString(),\r\n        };\r\n      });\r\n    }\r\n\r\n    const poolKeys: PoolKeys[] = [];\r\n    pools.forEach((pool) => {\r\n      if (pool.version === 6) {\r\n        const rpcInfo = clmmRpcData[pool.id.toString()];\r\n        const clmmKeys: ClmmKeys = {\r\n          programId: pool.programId.toBase58(),\r\n          id: pool.id.toBase58(),\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          openTime: String(pool.startTime),\r\n          vault: {\r\n            A: rpcInfo.vaultA.toBase58(),\r\n            B: rpcInfo.vaultB.toBase58(),\r\n          },\r\n          config: {\r\n            ...pool.ammConfig,\r\n            id: pool.ammConfig.id.toString(),\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          rewardInfos: [],\r\n          observationId: pool.observationId.toBase58(),\r\n          exBitmapAccount: pool.exBitmapAccount.toBase58(),\r\n        };\r\n        poolKeys.push(clmmKeys);\r\n      } else if (pool.version === 4) {\r\n        const rpcInfo = ammRpcData[pool.id.toString()];\r\n        const ammKeys: AmmV4Keys = {\r\n          programId: pool.programId,\r\n          id: pool.id,\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          openTime: String(pool.openTime),\r\n          vault: {\r\n            A: rpcInfo.baseVault.toBase58(),\r\n            B: rpcInfo.quoteVault.toBase58(),\r\n          },\r\n          authority: getLiquidityAssociatedAuthority({ programId: new PublicKey(pool.programId) }).publicKey.toString(),\r\n          openOrders: rpcInfo.openOrders.toBase58(),\r\n          targetOrders: rpcInfo.targetOrders.toBase58(),\r\n          mintLp: pool.lpMint,\r\n          ...marketData[pool.marketId],\r\n        };\r\n        poolKeys.push(ammKeys);\r\n      } else if (pool.version === 7) {\r\n        poolKeys.push({\r\n          observationId: pool.observationId.toBase58(),\r\n          programId: pool.programId.toBase58(),\r\n          id: pool.id.toBase58(),\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          openTime: String(pool.openTime),\r\n          authority: getPdaPoolAuthority(pool.programId).publicKey.toBase58(),\r\n          vault: {\r\n            A: pool.vaultA.toBase58(),\r\n            B: pool.vaultB.toBase58(),\r\n          },\r\n          mintLp: toApiV3Token({\r\n            address: pool.mintLp.toBase58(),\r\n            programId: TOKEN_PROGRAM_ID.toBase58(),\r\n            decimals: pool.lpDecimals,\r\n          }),\r\n          config: {\r\n            id: pool.configId.toBase58(),\r\n            ...pool.configInfo,\r\n            protocolFeeRate: pool.configInfo.protocolFeeRate.toNumber(),\r\n            tradeFeeRate: pool.configInfo.tradeFeeRate.toNumber(),\r\n            fundFeeRate: pool.configInfo.fundFeeRate.toNumber(),\r\n            createPoolFee: pool.configInfo.createPoolFee.toString(),\r\n          },\r\n        });\r\n      }\r\n    });\r\n    return poolKeys;\r\n  }\r\n}\r\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\r\nimport { WSOLMint, chunkArray, solToWSol } from \"./\";\r\nimport { createLogger } from \"./logger\";\r\nimport { MINT_SIZE, TOKEN_PROGRAM_ID, getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\r\n\r\ninterface MultipleAccountsJsonRpcResponse {\r\n  jsonrpc: string;\r\n  id: string;\r\n  error?: {\r\n    code: number;\r\n    message: string;\r\n  };\r\n  result: {\r\n    context: { slot: number };\r\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\r\n  };\r\n}\r\n\r\nexport interface GetMultipleAccountsInfoConfig {\r\n  batchRequest?: boolean;\r\n  commitment?: Commitment;\r\n  chunkCount?: number;\r\n}\r\n\r\nconst logger = createLogger(\"Raydium_accountInfo_util\");\r\n\r\nexport async function getMultipleAccountsInfo(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<(AccountInfo<Buffer> | null)[]> {\r\n  const {\r\n    batchRequest,\r\n    commitment = \"confirmed\",\r\n    chunkCount = 100,\r\n  } = {\r\n    batchRequest: false,\r\n    ...config,\r\n  };\r\n\r\n  const chunkedKeys = chunkArray(publicKeys, chunkCount);\r\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\r\n\r\n  if (batchRequest) {\r\n    const batch = chunkedKeys.map((keys) => {\r\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\r\n      return {\r\n        methodName: \"getMultipleAccounts\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const _batch = chunkArray(batch, 10);\r\n\r\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\r\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\r\n    ).flat();\r\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\r\n      if (unsafeRes.error)\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\r\n\r\n      return unsafeRes.result.value.map((accountInfo) => {\r\n        if (accountInfo) {\r\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\r\n\r\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\r\n\r\n          return {\r\n            data: Buffer.from(data[0], \"base64\"),\r\n            executable,\r\n            lamports,\r\n            owner: new PublicKey(owner),\r\n            rentEpoch,\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n    });\r\n  } else {\r\n    try {\r\n      results = (await Promise.all(\r\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\r\n      )) as (AccountInfo<Buffer> | null)[][];\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return results.flat();\r\n}\r\n\r\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\r\n  connection: Connection,\r\n  publicKeysWithCustomFlag: T[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\r\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\r\n    connection,\r\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\r\n    config,\r\n  );\r\n\r\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\r\n}\r\n\r\nexport enum AccountType {\r\n  Uninitialized,\r\n  Mint,\r\n  Account,\r\n}\r\nexport const ACCOUNT_TYPE_SIZE = 1;\r\n\r\nexport async function fetchMultipleMintInfos({\r\n  connection,\r\n  mints,\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  mints: PublicKey[];\r\n  config?: { batchRequest?: boolean };\r\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\r\n  if (mints.length === 0) return {};\r\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\r\n    connection,\r\n    mints.map((i) => ({ pubkey: solToWSol(i) })),\r\n    config,\r\n  );\r\n\r\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\r\n  for (const i of mintInfos) {\r\n    if (!i.accountInfo || i.accountInfo.data.length < MINT_SIZE) {\r\n      console.log(\"invalid mint account\", i.pubkey.toBase58());\r\n      continue;\r\n    }\r\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\r\n    mintK[i.pubkey.toString()] = {\r\n      ...t,\r\n      programId: i.accountInfo?.owner || TOKEN_PROGRAM_ID,\r\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\r\n    };\r\n  }\r\n  mintK[PublicKey.default.toBase58()] = mintK[WSOLMint.toBase58()];\r\n\r\n  return mintK;\r\n}\r\n","import { get, set } from \"lodash\";\r\n\r\nexport type ModuleName = \"Common.Api\";\r\n\r\nexport enum LogLevel {\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug,\r\n}\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n  private name: string;\r\n  constructor(params: { name: string; logLevel?: LogLevel }) {\r\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\r\n    this.name = params.name;\r\n  }\r\n\r\n  set level(logLevel: LogLevel) {\r\n    this.logLevel = logLevel;\r\n  }\r\n  get time(): string {\r\n    return Date.now().toString();\r\n  }\r\n  get moduleName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private isLogLevel(level: LogLevel): boolean {\r\n    return level <= this.logLevel;\r\n  }\r\n\r\n  public error(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Error)) return this;\r\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public logWithError(...props): Logger {\r\n    // this.error(...props)\r\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\r\n    throw new Error(msg);\r\n  }\r\n\r\n  public warning(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\r\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public info(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Info)) return this;\r\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public debug(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\r\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\r\n    return this;\r\n  }\r\n}\r\n\r\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\r\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\r\n\r\nexport function createLogger(moduleName: string): Logger {\r\n  let logger = get(moduleLoggers, moduleName);\r\n  if (!logger) {\r\n    // default level is error\r\n    const logLevel = get(moduleLevels, moduleName);\r\n\r\n    logger = new Logger({ name: moduleName, logLevel });\r\n    set(moduleLoggers, moduleName, logger);\r\n  }\r\n\r\n  return logger;\r\n}\r\n\r\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\r\n  set(moduleLevels, moduleName, level);\r\n\r\n  const logger = get(moduleLoggers, moduleName);\r\n  if (logger) logger.level = level;\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { CurrencyAmount, TokenAmount } from \"../module/amount\";\r\nimport { Currency } from \"../module/currency\";\r\nimport { Fraction } from \"../module/fraction\";\r\nimport { Percent } from \"../module/percent\";\r\nimport { Price } from \"../module/price\";\r\nimport { Token } from \"../module/token\";\r\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\nimport { parseBigNumberish } from \"./constant\";\r\nimport { mul } from \"./fractionUtil\";\r\nimport { notInnerObject } from \"./utility\";\r\n\r\nexport const BN_ZERO = new BN(0);\r\nexport const BN_ONE = new BN(1);\r\nexport const BN_TWO = new BN(2);\r\nexport const BN_THREE = new BN(3);\r\nexport const BN_FIVE = new BN(5);\r\nexport const BN_TEN = new BN(10);\r\nexport const BN_100 = new BN(100);\r\nexport const BN_1000 = new BN(1000);\r\nexport const BN_10000 = new BN(10000);\r\nexport type BigNumberish = BN | string | number | bigint;\r\nexport type Numberish = number | string | bigint | Fraction | BN;\r\n\r\nexport function tenExponential(shift: BigNumberish): BN {\r\n  return BN_TEN.pow(parseBigNumberish(shift));\r\n}\r\n\r\n/**\r\n *\r\n * @example\r\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\r\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\r\n */\r\nexport function parseNumberInfo(n: Numberish | undefined): {\r\n  denominator: string;\r\n  numerator: string;\r\n  sign?: string;\r\n  int?: string;\r\n  dec?: string;\r\n} {\r\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\r\n  if (n instanceof BN) {\r\n    return { numerator: n.toString(), denominator: \"1\" };\r\n  }\r\n\r\n  if (n instanceof Fraction) {\r\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\r\n  }\r\n\r\n  const s = String(n);\r\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  const denominator = \"1\" + \"0\".repeat(dec.length);\r\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\r\n  return { denominator, numerator, sign, int, dec };\r\n}\r\n\r\n// round up\r\nexport function divCeil(a: BN, b: BN): BN {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const dm = a.divmod(b);\r\n\r\n  // Fast case - exact division\r\n  if (dm.mod.isZero()) return dm.div;\r\n\r\n  // Round up\r\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\r\n}\r\n\r\nexport function shakeFractionDecimal(n: Fraction): string {\r\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  return `${sign}${int}`;\r\n}\r\n\r\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\r\n  if (n instanceof BN) return n;\r\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\r\n}\r\n\r\nexport function toFraction(value: Numberish): Fraction {\r\n  //  to complete math format(may have decimal), not int\r\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\r\n\r\n  if (value instanceof Price) return value.adjusted;\r\n\r\n  // to complete math format(may have decimal), not BN\r\n  if (value instanceof TokenAmount)\r\n    try {\r\n      return toFraction(value.toExact());\r\n    } catch {\r\n      return new Fraction(BN_ZERO);\r\n    }\r\n\r\n  // do not ideal with other fraction value\r\n  if (value instanceof Fraction) return value;\r\n\r\n  // wrap to Fraction\r\n  const n = String(value);\r\n  const details = parseNumberInfo(n);\r\n  return new Fraction(details.numerator, details.denominator);\r\n}\r\n\r\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\r\n}\r\n\r\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\r\n}\r\n\r\n/**\r\n * @example\r\n * toPercent(3.14) // => Percent { 314.00% }\r\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\r\n */\r\nexport function toPercent(\r\n  n: Numberish,\r\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\r\n): Percent {\r\n  const { numerator, denominator } = parseNumberInfo(n);\r\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\r\n}\r\n\r\nexport function toTokenPrice(params: {\r\n  token: TokenJson | Token | SplToken;\r\n  numberPrice: Numberish;\r\n  decimalDone?: boolean;\r\n}): Price {\r\n  const { token, numberPrice, decimalDone } = params;\r\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\r\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\r\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\r\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\r\n\r\n  return new Price({\r\n    baseToken: usdCurrency,\r\n    denominator: parsedDenominator.toString(),\r\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\r\n    numerator: parsedNumerator.toString(),\r\n  });\r\n}\r\n\r\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\r\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\r\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\r\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\r\n}\r\n\r\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\r\n  if (!price || !amount) return toUsdCurrency(0);\r\n  return toUsdCurrency(mul(amount, price)!);\r\n}\r\n\r\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\r\n  if (n == null) return undefined;\r\n  const { numerator, denominator } = parseNumberInfo(n.toString());\r\n  return new Fraction(numerator, denominator);\r\n}\r\n\r\nexport function isDecimal(val: unknown): boolean {\r\n  return val instanceof Decimal;\r\n}\r\n\r\n// export function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\r\n//   // @ts-expect-error no need type for inner code\r\n//   return isDecimal(info)\r\n//     ? decimalToFraction(info as any)\r\n//     : Array.isArray(info)\r\n//     ? info.map((k) => recursivelyDecimalToFraction(k))\r\n//     : notInnerObject(info)\r\n//     ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\r\n//     : info;\r\n// }\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { BigNumberish, BN_TEN } from \"../common/bignumber\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common\";\r\nimport { Currency } from \"./currency\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_amount\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nexport function splitNumber(num: string, decimals: number): [string, string] {\r\n  let integral = \"0\";\r\n  let fractional = \"0\";\r\n\r\n  if (num.includes(\".\")) {\r\n    const splited = num.split(\".\");\r\n    if (splited.length === 2) {\r\n      [integral, fractional] = splited;\r\n      fractional = fractional.padEnd(decimals, \"0\");\r\n    } else {\r\n      logger.logWithError(`invalid number string, num: ${num}`);\r\n    }\r\n  } else {\r\n    integral = num;\r\n  }\r\n\r\n  // fix decimals is 0\r\n  return [integral, fractional.slice(0, decimals) || fractional];\r\n}\r\n\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token;\r\n  protected logger: Logger;\r\n\r\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.token = token;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n  public gt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\r\n    return new TokenAmount(this.token, this.raw.add(other.raw));\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\r\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.token.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n  protected logger: Logger;\r\n\r\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.currency = currency;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n\r\n  /**\r\n   * a greater than b\r\n   */\r\n  public gt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\r\n  }\r\n\r\n  public sub(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\r\n\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\r\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\r\nimport _toFarmat from \"toformat\";\r\n\r\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\r\ninterface FormatOptions {\r\n  decimalSeparator?: string;\r\n  groupSeparator?: string;\r\n  groupSize?: number;\r\n  fractionGroupSeparator?: string;\r\n  fractionGroupSize?: number;\r\n}\r\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\r\n  new (value: BigSource): WrappedBig;\r\n  (value: BigSource): WrappedBig;\r\n  (): WrappedBigConstructor;\r\n\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedBig extends Big {\r\n  add(n: BigSource): WrappedBig;\r\n  abs(): WrappedBig;\r\n  div(n: BigSource): WrappedBig;\r\n  minus(n: BigSource): WrappedBig;\r\n  mod(n: BigSource): WrappedBig;\r\n  mul(n: BigSource): WrappedBig;\r\n  plus(n: BigSource): WrappedBig;\r\n  pow(exp: number): WrappedBig;\r\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\r\n  sqrt(): WrappedBig;\r\n  sub(n: BigSource): WrappedBig;\r\n  times(n: BigSource): WrappedBig;\r\n  toFormat(): string;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\ntype DecimalConstructor = typeof Decimal;\r\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\r\n  new (value: Numeric): WrappedDecimal;\r\n  clone(config?: Config): WrappedDecimalConstructor;\r\n  config(config: Config): WrappedDecimal;\r\n  set(config: Config): WrappedDecimal;\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedDecimal extends Decimal {\r\n  absoluteValue(): WrappedDecimal;\r\n  abs(): WrappedDecimal;\r\n  dividedBy(y: Numeric): WrappedDecimal;\r\n  div(y: Numeric): WrappedDecimal;\r\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\r\n  idiv(y: Numeric): WrappedDecimal;\r\n  logarithm(base?: Numeric): WrappedDecimal;\r\n  log(base?: Numeric): WrappedDecimal;\r\n  minus(y: Numeric): WrappedDecimal;\r\n  sub(y: Numeric): WrappedDecimal;\r\n  modulo(y: Numeric): WrappedDecimal;\r\n  mod(y: Numeric): WrappedDecimal;\r\n  naturalExponetial(): WrappedDecimal;\r\n  exp(): WrappedDecimal;\r\n  naturalLogarithm(): WrappedDecimal;\r\n  ln(): WrappedDecimal;\r\n  negated(): WrappedDecimal;\r\n  neg(): WrappedDecimal;\r\n  plus(y: Numeric): WrappedDecimal;\r\n  add(y: Numeric): WrappedDecimal;\r\n  squareRoot(): WrappedDecimal;\r\n  sqrt(): WrappedDecimal;\r\n  times(y: Numeric): WrappedDecimal;\r\n  mul(y: Numeric): WrappedDecimal;\r\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\r\n  todp(dp?: number, rm?: number): WrappedDecimal;\r\n  toInteger(): WrappedDecimal;\r\n  toint(): WrappedDecimal;\r\n  toPower(y: Numeric): WrappedDecimal;\r\n  pow(y: Numeric): WrappedDecimal;\r\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\r\n  tosd(sd?: number, rm?: number): WrappedDecimal;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\nconst toFormat: {\r\n  (fn: BigConstructor): WrappedBigConstructor;\r\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\r\n} = _toFarmat;\r\nexport default toFormat;\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\nimport _Decimal from \"decimal.js-light\";\r\n\r\nimport { BigNumberish } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common/constant\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\n\r\nconst logger = createLogger(\"module/fraction\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nconst Decimal = toFormat(_Decimal);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\r\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\r\n  [Rounding.ROUND_UP]: _Big.roundUp,\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: BN;\r\n  public readonly denominator: BN;\r\n\r\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\r\n    this.numerator = parseBigNumberish(numerator);\r\n    this.denominator = parseBigNumberish(denominator);\r\n  }\r\n\r\n  public get quotient(): BN {\r\n    return this.numerator.div(this.denominator);\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  }\r\n\r\n  public add(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public sub(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public mul(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\r\n  }\r\n\r\n  public div(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\r\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\r\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding] || 1;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.numerator.isZero();\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { BigNumberish } from \"./bignumber\";\r\nimport { createLogger } from \"./logger\";\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nconst MAX_SAFE = 0x1fffffffffffff;\r\n\r\nexport function parseBigNumberish(value: BigNumberish): BN {\r\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\r\n  // BN\r\n  if (value instanceof BN) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === \"string\") {\r\n    if (value.match(/^-?[0-9]+$/)) {\r\n      return new BN(value);\r\n    }\r\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\r\n  }\r\n\r\n  if (typeof value === \"number\") {\r\n    if (value % 1) {\r\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\r\n    }\r\n\r\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\r\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\r\n    }\r\n\r\n    return new BN(String(value));\r\n  }\r\n\r\n  if (typeof value === \"bigint\") {\r\n    return new BN(value.toString());\r\n  }\r\n  logger.error(`invalid BigNumberish value: ${value}`);\r\n  return new BN(0); // never reach, because logWithError will throw error\r\n}","import { PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nexport const SOL_INFO: TokenInfo = {\r\n  chainId: 101,\r\n  address: PublicKey.default.toBase58(),\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"SOL\",\r\n  name: \"solana\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n\r\nexport const TOKEN_WSOL: TokenInfo = {\r\n  chainId: 101,\r\n  address: \"So11111111111111111111111111111111111111112\",\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"WSOL\",\r\n  name: \"Wrapped SOL\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\r\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\r\n\r\n/**\r\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n */\r\nexport interface TokenProps {\r\n  mint: PublicKeyish;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n  skipMint?: boolean;\r\n  isToken2022?: boolean;\r\n}\r\n\r\nexport class Token {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n  public readonly isToken2022: boolean;\r\n\r\n  public readonly mint: PublicKey;\r\n  public static readonly WSOL: Token = new Token({\r\n    ...TOKEN_WSOL,\r\n    mint: TOKEN_WSOL.address,\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\r\n   */\r\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\r\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\r\n      this.decimals = TOKEN_WSOL.decimals;\r\n      this.symbol = TOKEN_WSOL.symbol;\r\n      this.name = TOKEN_WSOL.name;\r\n      this.mint = new PublicKey(TOKEN_WSOL.address);\r\n      this.isToken2022 = false;\r\n      return;\r\n    }\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol || mint.toString().substring(0, 6);\r\n    this.name = name || mint.toString().substring(0, 6);\r\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\r\n    this.isToken2022 = isToken2022;\r\n  }\r\n\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.mint.equals(other.mint);\r\n  }\r\n}\r\n","import { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\ninterface AccountMetaProps {\r\n  pubkey: PublicKey;\r\n  isSigner?: boolean;\r\n  isWritable?: boolean;\r\n}\r\n\r\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\r\n  return {\r\n    pubkey,\r\n    isWritable,\r\n    isSigner,\r\n  };\r\n}\r\n\r\nexport const commonSystemAccountMeta = [\r\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n];\r\n\r\nexport type PublicKeyish = PublicKey | string;\r\n\r\nexport function validateAndParsePublicKey({\r\n  publicKey: orgPubKey,\r\n  transformSol,\r\n}: {\r\n  publicKey: PublicKeyish;\r\n  transformSol?: boolean;\r\n}): PublicKey {\r\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\r\n\r\n  if (publicKey instanceof PublicKey) {\r\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\r\n    return publicKey;\r\n  }\r\n\r\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\r\n\r\n  if (typeof publicKey === \"string\") {\r\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\r\n    try {\r\n      const key = new PublicKey(publicKey);\r\n      return key;\r\n    } catch {\r\n      throw new Error(\"invalid public key\");\r\n    }\r\n  }\r\n\r\n  throw new Error(\"invalid public key\");\r\n}\r\n\r\nexport function tryParsePublicKey(v: string): PublicKey | string {\r\n  try {\r\n    return new PublicKey(v);\r\n  } catch (e) {\r\n    return v;\r\n  }\r\n}\r\n\r\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\r\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\r\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\r\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\r\n\r\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\r\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\r\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\r\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\r\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\r\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\r\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\r\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\r\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\r\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\r\nexport const SOLMint = PublicKey.default;\r\n\r\nexport function solToWSol(mint: PublicKeyish): PublicKey {\r\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\r\n}\r\n","import { SOL_INFO } from \"../raydium/token/constant\";\r\n\r\nimport { Token } from \"./token\";\r\n\r\ninterface CurrencyProps {\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n/**\r\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n * The only instance of the base class `Currency` is SOL.\r\n */\r\nexport class Currency {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\r\n   * @param decimals - decimals of the currency\r\n   * @param symbol - symbol of the currency\r\n   * @param name - name of the currency\r\n   */\r\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { Rounding } from \"../common\";\r\nimport { Fraction } from \"./fraction\";\r\n\r\nexport const _100_PERCENT = new Fraction(new BN(100));\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { Rounding } from \"../common\";\r\nimport { BigNumberish, tenExponential } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_price\");\r\n\r\ninterface PriceProps {\r\n  baseToken: Token;\r\n  denominator: BigNumberish;\r\n  quoteToken: Token;\r\n  numerator: BigNumberish;\r\n}\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseToken: Token; // input i.e. denominator\r\n  public readonly quoteToken: Token; // output i.e. numerator\r\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n  public readonly scalar: Fraction;\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(params: PriceProps) {\r\n    const { baseToken, quoteToken, numerator, denominator } = params;\r\n    super(numerator, denominator);\r\n\r\n    this.baseToken = baseToken;\r\n    this.quoteToken = quoteToken;\r\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.mul(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price({\r\n      baseToken: this.quoteToken,\r\n      quoteToken: this.baseToken,\r\n      denominator: this.numerator,\r\n      numerator: this.denominator,\r\n    });\r\n  }\r\n\r\n  public mul(other: Price): Price {\r\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\r\n\r\n    const fraction = super.mul(other);\r\n    return new Price({\r\n      baseToken: this.baseToken,\r\n      quoteToken: other.quoteToken,\r\n      denominator: fraction.denominator,\r\n      numerator: fraction.numerator,\r\n    });\r\n  }\r\n\r\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","/**\r\n * https://youmightnotneed.com/lodash/\r\n */\r\n\r\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\r\n  const tmp = [...arr];\r\n  if (chunkSize <= 0) return cache;\r\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\r\n  return cache;\r\n}\r\n\r\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\r\n}\r\n\r\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\r\n}\r\n\r\nexport function uniq<T>(arr: T[]): T[] {\r\n  return [...new Set(arr)];\r\n}\r\n","import { Keypair, PublicKey, Signer } from \"@solana/web3.js\";\r\n\r\ntype _Owner = Keypair | PublicKey;\r\n\r\nexport class Owner {\r\n  private readonly _owner: _Owner;\r\n\r\n  constructor(owner: _Owner) {\r\n    this._owner = owner;\r\n  }\r\n\r\n  get publicKey(): PublicKey {\r\n    if (Owner.isKeyPair(this._owner)) {\r\n      return this._owner.publicKey;\r\n    }\r\n\r\n    return this._owner;\r\n  }\r\n\r\n  get signer(): Signer | undefined {\r\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\r\n  }\r\n\r\n  get isKeyPair(): boolean {\r\n    return Owner.isKeyPair(this._owner);\r\n  }\r\n\r\n  get isPublicKey(): boolean {\r\n    return Owner.isPublicKey(this._owner);\r\n  }\r\n\r\n  static isKeyPair(owner: _Owner): owner is Keypair {\r\n    return (owner as Keypair).secretKey !== undefined;\r\n  }\r\n\r\n  static isPublicKey(owner: _Owner): owner is PublicKey {\r\n    return !Owner.isKeyPair(owner);\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { findProgramAddress } from \"./txTool/txUtils\";\r\n\r\nexport function getATAAddress(\r\n  owner: PublicKey,\r\n  mint: PublicKey,\r\n  programId?: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\r\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\r\n  );\r\n}\r\n","import {\r\n  Commitment,\r\n  ComputeBudgetProgram,\r\n  Connection,\r\n  EpochInfo,\r\n  Keypair,\r\n  PublicKey,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"../logger\";\r\nimport { CacheLTA } from \"./lookupTable\";\r\nimport { InstructionType } from \"./txType\";\r\n\r\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst logger = createLogger(\"Raydium_txUtil\");\r\n\r\nexport const MAX_BASE64_SIZE = 1644;\r\n\r\nexport function addComputeBudget(config: ComputeBudgetConfig): {\r\n  instructions: TransactionInstruction[];\r\n  instructionTypes: string[];\r\n} {\r\n  const ins: TransactionInstruction[] = [];\r\n  const insTypes: string[] = [];\r\n  if (config.microLamports) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\r\n    insTypes.push(InstructionType.SetComputeUnitPrice);\r\n  }\r\n  if (config.units) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\r\n    insTypes.push(InstructionType.SetComputeUnitLimit);\r\n  }\r\n\r\n  return {\r\n    instructions: ins,\r\n    instructionTypes: insTypes,\r\n  };\r\n}\r\n\r\nexport async function getRecentBlockHash(connection: Connection, propsCommitment?: Commitment): Promise<string> {\r\n  const commitment = propsCommitment ?? \"confirmed\";\r\n  return (await connection.getLatestBlockhash?.({ commitment }))?.blockhash;\r\n}\r\n\r\nexport async function confirmTransaction(connection: Connection, txId: string): Promise<string> {\r\n  connection.getSignatureStatuses([txId]);\r\n  return new Promise((resolve, reject) => {\r\n    const id = setTimeout(reject, 60 * 1000);\r\n    connection.onSignature(\r\n      txId,\r\n      (signatureResult) => {\r\n        clearTimeout(id);\r\n        if (!signatureResult.err) {\r\n          resolve(\"\");\r\n          return;\r\n        }\r\n        reject(Object.assign(signatureResult.err, { txId }));\r\n      },\r\n      \"confirmed\",\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Forecast transaction size\r\n */\r\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\r\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\r\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\r\n\r\n  const transaction = new Transaction();\r\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\r\n  transaction.feePayer = signers[0];\r\n  transaction.add(...instructions);\r\n\r\n  try {\r\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Simulates multiple instruction\r\n */\r\n/**\r\n * Simulates multiple instruction\r\n */\r\nexport async function simulateMultipleInstruction(\r\n  connection: Connection,\r\n  instructions: TransactionInstruction[],\r\n  keyword: string,\r\n  batchRequest = true,\r\n): Promise<string[]> {\r\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\r\n\r\n  const transactions: Transaction[] = [];\r\n\r\n  let transaction = new Transaction();\r\n  transaction.feePayer = feePayer;\r\n\r\n  for (const instruction of instructions) {\r\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\r\n      transactions.push(transaction);\r\n      transaction = new Transaction();\r\n      transaction.feePayer = feePayer;\r\n    }\r\n    transaction.add(instruction);\r\n  }\r\n  if (transaction.instructions.length > 0) {\r\n    transactions.push(transaction);\r\n  }\r\n\r\n  let results: SimulatedTransactionResponse[] = [];\r\n\r\n  try {\r\n    results = await simulateTransaction(connection, transactions, batchRequest);\r\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  const logs: string[] = [];\r\n  for (const result of results) {\r\n    logger.debug(\"simulate result:\", result);\r\n\r\n    if (result.logs) {\r\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\r\n      logger.debug(\"filteredLog:\", logs);\r\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\r\n      logs.push(...filteredLog);\r\n    }\r\n  }\r\n\r\n  return logs;\r\n}\r\n\r\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\r\n  const results = log.match(/{[\"\\w:,]+}/g);\r\n  if (!results || results.length !== 1) {\r\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\r\n  }\r\n\r\n  return results[0];\r\n}\r\n\r\nexport function parseSimulateValue(log: string, key: string): any {\r\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\r\n\r\n  const results = reg.exec(log);\r\n  if (!results || results.length !== 2) {\r\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\r\n  }\r\n\r\n  return results[1];\r\n}\r\n\r\nexport interface ProgramAddress {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n}\r\nexport function findProgramAddress(\r\n  seeds: Array<Buffer | Uint8Array>,\r\n  programId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\r\n  return { publicKey, nonce };\r\n}\r\n\r\nexport async function simulateTransaction(\r\n  connection: Connection,\r\n  transactions: Transaction[],\r\n  batchRequest?: boolean,\r\n): Promise<any[]> {\r\n  let results: any[] = [];\r\n  if (batchRequest) {\r\n    const getLatestBlockhash = await connection.getLatestBlockhash();\r\n\r\n    const encodedTransactions: string[] = [];\r\n    for (const transaction of transactions) {\r\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\r\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const message = transaction._compile();\r\n      const signData = message.serialize();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const wireTransaction = transaction._serialize(signData);\r\n      const encodedTransaction = wireTransaction.toString(\"base64\");\r\n\r\n      encodedTransactions.push(encodedTransaction);\r\n    }\r\n\r\n    const batch = encodedTransactions.map((keys) => {\r\n      const args = connection._buildArgs([keys], undefined, \"base64\");\r\n      return {\r\n        methodName: \"simulateTransaction\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const reqData: { methodName: string; args: any[] }[][] = [];\r\n    const itemReqIndex = 20;\r\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\r\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    results = await (\r\n      await Promise.all(\r\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\r\n      )\r\n    ).flat();\r\n  } else {\r\n    try {\r\n      results = await Promise.all(\r\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function checkLegacyTxSize({\r\n  instructions,\r\n  payer,\r\n  signers,\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  signers: PublicKey[];\r\n}): boolean {\r\n  return forecastTransactionSize(instructions, [payer, ...signers]);\r\n}\r\n\r\nexport function checkV0TxSize({\r\n  instructions,\r\n  payer,\r\n  lookupTableAddressAccount,\r\n  recentBlockhash = Keypair.generate().publicKey.toString(),\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  lookupTableAddressAccount?: CacheLTA;\r\n  recentBlockhash?: string;\r\n}): boolean {\r\n  const transactionMessage = new TransactionMessage({\r\n    payerKey: payer,\r\n    recentBlockhash,\r\n    instructions,\r\n  });\r\n\r\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\r\n  try {\r\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\r\n    return buildLength < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\r\n  time: 0,\r\n  data: undefined,\r\n};\r\n\r\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\r\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\r\n    const data = await connection.getEpochInfo();\r\n    epochInfoCache = {\r\n      time: Date.now(),\r\n      data,\r\n    };\r\n    return data;\r\n  } else {\r\n    return epochInfoCache.data;\r\n  }\r\n}\r\n\r\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\r\n  if (Buffer.isBuffer(arr)) {\r\n    return arr;\r\n  } else if (arr instanceof Uint8Array) {\r\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\r\n  } else {\r\n    return Buffer.from(arr);\r\n  }\r\n};\r\n\r\nexport const txToBase64 = (transaction: Transaction | VersionedTransaction): string => {\r\n  let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  try {\r\n    return serialized instanceof Buffer ? serialized.toString(\"base64\") : Buffer.from(serialized).toString(\"base64\");\r\n  } catch {\r\n    return serialized.toString(\"base64\");\r\n  }\r\n};\r\n\r\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\r\n  const allBase64: string[] = [];\r\n  transactions.forEach((transaction) => {\r\n    if (transaction instanceof Transaction) {\r\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\r\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\r\n    }\r\n    allBase64.push(txToBase64(transaction));\r\n  });\r\n  console.log(\"simulate tx string:\", allBase64);\r\n\r\n  return allBase64;\r\n}\r\n\r\nexport function transformTxToBase64(tx: Transaction | VersionedTransaction): string {\r\n  let serialized = tx.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (tx instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  return serialized.toString(\"base64\");\r\n}\r\n","export enum TxVersion {\r\n  \"V0\",\r\n  \"LEGACY\",\r\n}\r\n\r\nexport const InstructionType = {\r\n  CreateAccount: \"CreateAccount\",\r\n  InitAccount: \"InitAccount\",\r\n  CreateATA: \"CreateATA\",\r\n  CloseAccount: \"CloseAccount\",\r\n  TransferAmount: \"TransferAmount\",\r\n  InitMint: \"InitMint\",\r\n  MintTo: \"MintTo\",\r\n\r\n  InitMarket: \"InitMarket\", // create market main ins\r\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\r\n\r\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\r\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\r\n\r\n  // CLMM\r\n  ClmmCreatePool: \"ClmmCreatePool\",\r\n  ClmmOpenPosition: \"ClmmOpenPosition\",\r\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\r\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\r\n  ClmmClosePosition: \"ClmmClosePosition\",\r\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\r\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\r\n  ClmmInitReward: \"ClmmInitReward\",\r\n  ClmmSetReward: \"ClmmSetReward\",\r\n  ClmmCollectReward: \"ClmmCollectReward\",\r\n  ClmmLockPosition: \"ClmmLockPosition\",\r\n  ClmmHarvestLockPosition: \"ClmmHarvestLockPosition\",\r\n\r\n  AmmV4Swap: \"AmmV4Swap\",\r\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\r\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\r\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\r\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\r\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\r\n  AmmV4CreatePool: \"AmmV4CreatePool\",\r\n  AmmV4InitPool: \"AmmV4InitPool\",\r\n\r\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\r\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\r\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\r\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\r\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\r\n\r\n  RouteSwap: \"RouteSwap\",\r\n  RouteSwap1: \"RouteSwap1\",\r\n  RouteSwap2: \"RouteSwap2\",\r\n\r\n  FarmV3Deposit: \"FarmV3Deposit\",\r\n  FarmV3Withdraw: \"FarmV3Withdraw\",\r\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\r\n\r\n  FarmV4Withdraw: \"FarmV4Withdraw\",\r\n\r\n  FarmV5Deposit: \"FarmV5Deposit\",\r\n  FarmV5Withdraw: \"FarmV5Withdraw\",\r\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\r\n\r\n  FarmV6Deposit: \"FarmV6Deposit\",\r\n  FarmV6Withdraw: \"FarmV6Withdraw\",\r\n  FarmV6Create: \"FarmV6Create\",\r\n  FarmV6Restart: \"FarmV6Restart\",\r\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\r\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\r\n\r\n  CpmmCreatePool: \"CpmmCreatePool\",\r\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\r\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\r\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\r\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\r\n\r\n  CpmmLockLp: \"CpmmLockLp\",\r\n  CpmmCollectLockFee: \"CpmmCollectLockFee\",\r\n  TransferTip: \"TransferTip\",\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\n// raydium\r\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\r\n// temp fusion\r\nexport const FARM_PROGRAM_ID_V4 = new PublicKey(\"CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T\");\r\n// \"fusion\"\r\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\r\n// echosystem\r\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\r\n\r\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\r\n\r\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\r\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\r\n\r\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\r\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\r\nexport const LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\r\nexport const CLMM_LOCK_PROGRAM_ID = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const CLMM_LOCK_AUTH_ID = new PublicKey(\"kN1kEznaF5Xbd8LYuqtEFcxzWSBk5Fv6ygX6SqEGJVy\");\r\n\r\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\n\r\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\r\nexport const FEE_DESTINATION_ID = new PublicKey(\"7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5\");\r\n\r\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\r\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\r\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\r\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\r\n\r\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C\");\r\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL\");\r\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8\");\r\n\r\nexport const LOCK_CPMM_PROGRAM = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\n\r\nexport const LOCK_CPMM_AUTH = new PublicKey(\"3f7GcQFG397GAaEnv51zR6tsTVihYRydnydDD1cXekxH\");\r\n\r\nexport const LAUNCHPAD_PROGRAM = new PublicKey(\"LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj\");\r\nexport const LAUNCHPAD_AUTH = new PublicKey(\"WLHv2UAZm6z4KyaaELi5pjdbJh6RESMva1Rnn8pJVVh\");\r\n\r\nexport const DEV_LAUNCHPAD_PROGRAM = new PublicKey(\"DRay6fNdQ5J82H7xV6uq2aV3mNrUZ1J4PgSKsWgptcm6\");\r\nexport const DEV_LAUNCHPAD_AUTH = new PublicKey(\"5xqNaZXX5eUi4p5HU4oz9i5QnwRNT2y6oN7yyn4qENeq\");\r\n\r\nexport const LAUNCHPAD_PLATFORM = new PublicKey(\"4Bu96XjU84XjPDSpveTVf6LYGCkfW5FK7SNkREWcEfV4\");\r\n\r\nexport const LAUNCHPAD_CONFIG = new PublicKey(\"6s1xP3hpbAfFoNtUNF8mfHsjr2Bd97JxFJRWLbL6aHuX\");\r\n\r\nexport const IDO_ALL_PROGRAM = {\r\n  IDO_PROGRAM_ID_V1,\r\n  IDO_PROGRAM_ID_V2,\r\n  IDO_PROGRAM_ID_V3,\r\n  IDO_PROGRAM_ID_V4,\r\n};\r\n\r\nexport const ALL_PROGRAM_ID = {\r\n  AMM_V4,\r\n  AMM_STABLE,\r\n\r\n  CLMM_PROGRAM_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_LOCK_AUTH_ID,\r\n\r\n  FARM_PROGRAM_ID_V3,\r\n  FARM_PROGRAM_ID_V4,\r\n  FARM_PROGRAM_ID_V5,\r\n  FARM_PROGRAM_ID_V6,\r\n\r\n  OPEN_BOOK_PROGRAM,\r\n  SERUM_PROGRAM_ID_V3,\r\n\r\n  UTIL1216,\r\n\r\n  Router,\r\n\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  LOCK_CPMM_PROGRAM,\r\n  LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH,\r\n\r\n  LAUNCHPAD_PLATFORM,\r\n  LAUNCHPAD_CONFIG,\r\n\r\n  FEE_DESTINATION_ID,\r\n\r\n  MODEL_DATA_PUBKEY,\r\n};\r\n\r\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\r\n\r\nexport const DEVNET_PROGRAM_ID: typeof ALL_PROGRAM_ID = {\r\n  OPEN_BOOK_PROGRAM: new PublicKey(\"EoTcMgcDRTJVZDMZWBoU6rhYHZfkNTVEAfz3uUJRcYGj\"),\r\n  SERUM_PROGRAM_ID_V3: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n  AMM_V4: new PublicKey(\"DRaya7Kj3aMWQSy19kSjvmuwq9docCHofyP9kanQGaav\"),\r\n  AMM_STABLE: new PublicKey(\"DRayDdXc1NZQ9C3hRWmoSf8zK4iapgMnjdNZWrfwsP8m\"),\r\n\r\n  CLMM_PROGRAM_ID: new PublicKey(\"DRayAUgENGQBKVaX8owNhgzkEDyoHTGVEGHVJT1E9pfH\"),\r\n  CLMM_LOCK_PROGRAM_ID: new PublicKey(\"DRay25Usp3YJAi7beckgpGUC7mGJ2cR1AVPxhYfwVCUX\"),\r\n  CLMM_LOCK_AUTH_ID: new PublicKey(\"6Aoh8h2Lw2m5UGxYR8AdAL87jTWYeKoxM52mJRzfYwN\"),\r\n\r\n  CREATE_CPMM_POOL_PROGRAM: new PublicKey(\"DRaycpLY18LhpbydsBWbVJtxpNv9oXPgjRSfpF2bWpYb\"),\r\n  CREATE_CPMM_POOL_AUTH: new PublicKey(\"CXniRufdq5xL8t8jZAPxsPZDpuudwuJSPWnbcD5Y5Nxq\"),\r\n  CREATE_CPMM_POOL_FEE_ACC: new PublicKey(\"3oE58BKVt8KuYkGxx8zBojugnymWmBiyafWgMrnb6eYy\"),\r\n\r\n  LOCK_CPMM_PROGRAM: new PublicKey(\"DRay25Usp3YJAi7beckgpGUC7mGJ2cR1AVPxhYfwVCUX\"),\r\n  LOCK_CPMM_AUTH: new PublicKey(\"7qWVV8UY2bRJfDLP4s37YzBPKUkVB46DStYJBpYbQzu3\"),\r\n\r\n  UTIL1216: PublicKey.default,\r\n\r\n  Router: new PublicKey(\"DRaybByLpbUL57LJARs3j8BitTxVfzBg351EaMr5UTCd\"),\r\n\r\n  FARM_PROGRAM_ID_V3: new PublicKey(\"DRayWyrLmEW5KEeqs8kdTMMaBabapqagaBC7KWpGtJeZ\"),\r\n  FARM_PROGRAM_ID_V4: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n  FARM_PROGRAM_ID_V5: new PublicKey(\"DRayiCGSZgku1GTK6rXD6mVDdingXy6APAH1R6R5L2LC\"),\r\n  FARM_PROGRAM_ID_V6: new PublicKey(\"DRayzbYakXs45ELHkzH6vC3fuhQqTAnv5A68gdFuvZyZ\"),\r\n\r\n  LAUNCHPAD_PROGRAM: new PublicKey(\"DRay6fNdQ5J82H7xV6uq2aV3mNrUZ1J4PgSKsWgptcm6\"),\r\n  LAUNCHPAD_AUTH: new PublicKey(\"5xqNaZXX5eUi4p5HU4oz9i5QnwRNT2y6oN7yyn4qENeq\"),\r\n\r\n  LAUNCHPAD_PLATFORM: new PublicKey(\"2Jx4KTDrVSdWNazuGpcA8n3ZLTRGGBDxAWhuKe2Xcj2a\"),\r\n  LAUNCHPAD_CONFIG: new PublicKey(\"7ZR4zD7PYfY2XxoG1Gxcy2EgEeGYrpxrwzPuwdUBssEt\"),\r\n\r\n  FEE_DESTINATION_ID: new PublicKey(\"9y8ENuuZ3b19quffx9hQvRVygG5ky6snHfRvGpuSfeJy\"),\r\n\r\n  MODEL_DATA_PUBKEY: new PublicKey(\"Ray1111111111111111111111111111111111111111\"),\r\n};\r\n","import { EpochInfo } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { TransferFee, TransferFeeConfig } from \"@solana/spl-token\";\r\n\r\nimport { TransferFeeDataBaseType } from \"../api/type\";\r\nimport { GetTransferAmountFee } from \"../raydium/type\";\r\n\r\nconst POINT = 10_000;\r\nexport function getTransferAmountFee(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function getTransferAmountFeeV2(\r\n  amount: BN,\r\n  _feeConfig: TransferFeeDataBaseType | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (_feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const feeConfig = {\r\n    ..._feeConfig,\r\n    olderTransferFee: {\r\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\r\n    },\r\n    newerTransferFee: {\r\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\r\n    },\r\n  };\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function minExpirationTime(\r\n  expirationTime1: number | undefined,\r\n  expirationTime2: number | undefined,\r\n): number | undefined {\r\n  if (expirationTime1 === undefined) return expirationTime2;\r\n  if (expirationTime2 === undefined) return expirationTime1;\r\n\r\n  return Math.min(expirationTime1, expirationTime2);\r\n}\r\n\r\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\r\n  const { div, mod } = bn1.divmod(bn2);\r\n\r\n  if (mod.gt(new BN(0))) {\r\n    return div.add(new BN(1));\r\n  } else {\r\n    return div;\r\n  }\r\n}\r\n\r\nexport function ceilDivBN(amountA: BN, amountB: BN): BN {\r\n  if (amountA.isZero()) return new BN(0);\r\n\r\n  const quotient = amountA.div(amountB);\r\n\r\n  if (quotient.isZero()) return new BN(1);\r\n\r\n  const remainder = amountA.mod(amountB);\r\n  if (remainder.gt(new BN(0))) {\r\n    return quotient.add(new BN(1));\r\n  }\r\n  return quotient;\r\n}\r\n\r\nexport function getTransferAmountFeeFromPre(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  slot: number,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const epoch = Math.floor(slot / 432000);\r\n  const nowFeeConfig: TransferFee =\r\n    epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * 432000 - slot) * 400) / 1000\r\n      : undefined;\r\n  const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n  const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n  return {\r\n    amount,\r\n    fee,\r\n    expirationTime,\r\n  };\r\n}\r\nexport function getTransferAmountFeeFromPost(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  slot: number,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const epoch = Math.floor(slot / 432000);\r\n  const nowFeeConfig: TransferFee =\r\n    epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * 432000 - slot) * 400) / 1000\r\n      : undefined;\r\n  if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n    const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n    return {\r\n      amount: amount.add(nowMaxFee),\r\n      fee: nowMaxFee,\r\n      expirationTime,\r\n    };\r\n  } else {\r\n    const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n    const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n    const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n    const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n    return {\r\n      amount: TAmount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\r\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\r\n\r\nexport interface CacheLTA {\r\n  [key: string]: AddressLookupTableAccount;\r\n}\r\n\r\nexport async function getMultipleLookupTableInfo({\r\n  connection,\r\n  address,\r\n  cluster = \"mainnet\",\r\n}: {\r\n  connection: Connection;\r\n  address: PublicKey[];\r\n  cluster?: \"mainnet\" | \"devnet\";\r\n}): Promise<CacheLTA> {\r\n  const dataInfos = await getMultipleAccountsInfo(\r\n    connection,\r\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\r\n  );\r\n\r\n  const outDict: CacheLTA = {};\r\n  for (let i = 0; i < address.length; i++) {\r\n    const info = dataInfos[i];\r\n    const key = address[i];\r\n    if (!info) continue;\r\n    const lookupAccount = new AddressLookupTableAccount({\r\n      key,\r\n      state: AddressLookupTableAccount.deserialize(info.data),\r\n    });\r\n    outDict[key.toString()] = lookupAccount;\r\n\r\n    if (cluster === \"devnet\") DEV_LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n    else LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n  }\r\n\r\n  return outDict;\r\n}\r\n\r\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\r\n  // AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU: new AddressLookupTableAccount({\r\n  //   key: new PublicKey(\"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\"),\r\n  //   state: AddressLookupTableAccount.deserialize(\r\n  //     Buffer.from(\r\n  //       \"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\",\r\n  //       \"base64\",\r\n  //     ),\r\n  //   ),\r\n  // }),\r\n};\r\n\r\nexport const getMainLookupTableCache = async (connection: Connection) => {\r\n  const altStr = \"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\";\r\n  if (LOOKUP_TABLE_CACHE[altStr]) return LOOKUP_TABLE_CACHE;\r\n\r\n  const devAlt = new PublicKey(altStr);\r\n  const data = await connection.getAccountInfo(devAlt);\r\n  if (!data) return LOOKUP_TABLE_CACHE;\r\n  LOOKUP_TABLE_CACHE[altStr] = new AddressLookupTableAccount({\r\n    key: devAlt,\r\n    state: AddressLookupTableAccount.deserialize(data.data),\r\n  });\r\n\r\n  return LOOKUP_TABLE_CACHE;\r\n};\r\n\r\nexport const DEV_LOOKUP_TABLE_CACHE: CacheLTA = {};\r\nexport const getDevLookupTableCache = async (connection: Connection) => {\r\n  const devAltStr = \"EFhMuDw1PKEuckuFRW9PavNfTH4LKP5uKHgyXDmWpFCq\";\r\n  if (DEV_LOOKUP_TABLE_CACHE[devAltStr]) return DEV_LOOKUP_TABLE_CACHE;\r\n\r\n  const devAlt = new PublicKey(devAltStr);\r\n  const data = await connection.getAccountInfo(devAlt);\r\n  if (!data) return DEV_LOOKUP_TABLE_CACHE;\r\n  DEV_LOOKUP_TABLE_CACHE[devAltStr] = new AddressLookupTableAccount({\r\n    key: devAlt,\r\n    state: AddressLookupTableAccount.deserialize(data.data),\r\n  });\r\n\r\n  return DEV_LOOKUP_TABLE_CACHE;\r\n};\r\n","import {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  sendAndConfirmTransaction,\r\n  SignatureResult,\r\n  Signer,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\nimport axios from \"axios\";\r\nimport { LOOKUP_TABLE_CACHE } from \"./lookupTable\";\r\n\r\nimport { Api } from \"../../api\";\r\nimport { ComputeBudgetConfig, SignAllTransactions, TxTipConfig } from \"../../raydium/type\";\r\nimport { Cluster } from \"../../solana\";\r\nimport { Owner } from \"../owner\";\r\nimport { CacheLTA, getDevLookupTableCache, getMainLookupTableCache, getMultipleLookupTableInfo } from \"./lookupTable\";\r\nimport { InstructionType, TxVersion } from \"./txType\";\r\nimport {\r\n  addComputeBudget,\r\n  checkLegacyTxSize,\r\n  checkV0TxSize,\r\n  confirmTransaction,\r\n  getRecentBlockHash,\r\n  printSimulate,\r\n} from \"./txUtils\";\r\n\r\ninterface SolanaFeeInfo {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  priorityTx: number;\r\n  nonVotes: number;\r\n  priorityRatio: number;\r\n  avgCuPerBlock: number;\r\n  blockspaceUsageRatio: number;\r\n}\r\ntype SolanaFeeInfoJson = {\r\n  \"1\": SolanaFeeInfo;\r\n  \"5\": SolanaFeeInfo;\r\n  \"15\": SolanaFeeInfo;\r\n};\r\n\r\ninterface ExecuteParams {\r\n  skipPreflight?: boolean;\r\n  recentBlockHash?: string;\r\n  sendAndConfirm?: boolean;\r\n  notSendToRpc?: boolean;\r\n}\r\n\r\ninterface TxBuilderInit {\r\n  connection: Connection;\r\n  feePayer: PublicKey;\r\n  cluster: Cluster;\r\n  owner?: Owner;\r\n  blockhashCommitment?: Commitment;\r\n  loopMultiTxStatus?: boolean;\r\n  api?: Api;\r\n  signAllTransactions?: SignAllTransactions;\r\n}\r\n\r\nexport interface AddInstructionParam {\r\n  addresses?: Record<string, PublicKey>;\r\n  instructions?: TransactionInstruction[];\r\n  endInstructions?: TransactionInstruction[];\r\n  lookupTableAddress?: string[];\r\n  signers?: Signer[];\r\n  instructionTypes?: string[];\r\n  endInstructionTypes?: string[];\r\n}\r\n\r\nexport interface TxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transaction: Transaction;\r\n  instructionTypes: string[];\r\n  signers: Signer[];\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transaction: VersionedTransaction;\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\r\n}\r\n\r\ntype TxUpdateParams = {\r\n  txId: string;\r\n  status: \"success\" | \"error\" | \"sent\";\r\n  signedTx: Transaction | VersionedTransaction;\r\n};\r\nexport interface MultiTxExecuteParam extends ExecuteParams {\r\n  sequentially: boolean;\r\n  skipTxCount?: number;\r\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\r\n}\r\nexport interface MultiTxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transactions: Transaction[];\r\n  instructionTypes: string[];\r\n  signers: Signer[][];\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface MultiTxV0BuildData<T = Record<string, any>>\r\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transactions: VersionedTransaction[];\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  blockHash?: string;\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\r\n}\r\n\r\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? MultiTxBuildData<O>\r\n  : MultiTxV0BuildData<O>;\r\n\r\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? TxBuildData<O>\r\n  : TxV0BuildData<O>;\r\n\r\nconst LOOP_INTERVAL = 2000;\r\n\r\nexport class TxBuilder {\r\n  private connection: Connection;\r\n  private owner?: Owner;\r\n  private instructions: TransactionInstruction[] = [];\r\n  private endInstructions: TransactionInstruction[] = [];\r\n  private lookupTableAddress: string[] = [];\r\n  private signers: Signer[] = [];\r\n  private instructionTypes: string[] = [];\r\n  private endInstructionTypes: string[] = [];\r\n  private feePayer: PublicKey;\r\n  private cluster: Cluster;\r\n  private signAllTransactions?: SignAllTransactions;\r\n  private blockhashCommitment?: Commitment;\r\n  private loopMultiTxStatus: boolean;\r\n\r\n  constructor(params: TxBuilderInit) {\r\n    this.connection = params.connection;\r\n    this.feePayer = params.feePayer;\r\n    this.signAllTransactions = params.signAllTransactions;\r\n    this.owner = params.owner;\r\n    this.cluster = params.cluster;\r\n    this.blockhashCommitment = params.blockhashCommitment;\r\n    this.loopMultiTxStatus = !!params.loopMultiTxStatus;\r\n  }\r\n\r\n  get AllTxData(): {\r\n    instructions: TransactionInstruction[];\r\n    endInstructions: TransactionInstruction[];\r\n    signers: Signer[];\r\n    instructionTypes: string[];\r\n    endInstructionTypes: string[];\r\n    lookupTableAddress: string[];\r\n  } {\r\n    return {\r\n      instructions: this.instructions,\r\n      endInstructions: this.endInstructions,\r\n      signers: this.signers,\r\n      instructionTypes: this.instructionTypes,\r\n      endInstructionTypes: this.endInstructionTypes,\r\n      lookupTableAddress: this.lookupTableAddress,\r\n    };\r\n  }\r\n\r\n  get allInstructions(): TransactionInstruction[] {\r\n    return [...this.instructions, ...this.endInstructions];\r\n  }\r\n\r\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\r\n    const json = (\r\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\r\n    ).data;\r\n    const { avg } = json?.[15] ?? {};\r\n    if (!avg) return undefined;\r\n    return {\r\n      units: 600000,\r\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\r\n    };\r\n  }\r\n\r\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\r\n    if (config) {\r\n      const { instructions, instructionTypes } = addComputeBudget(config);\r\n      this.instructions.unshift(...instructions);\r\n      this.instructionTypes.unshift(...instructionTypes);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public addTipInstruction(tipConfig?: TxTipConfig): boolean {\r\n    if (tipConfig) {\r\n      this.endInstructions.push(\r\n        SystemProgram.transfer({\r\n          fromPubkey: tipConfig.feePayer ?? this.feePayer,\r\n          toPubkey: new PublicKey(tipConfig.address),\r\n          lamports: BigInt(tipConfig.amount.toString()),\r\n        }),\r\n      );\r\n      this.endInstructionTypes.push(InstructionType.TransferTip);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async calComputeBudget({\r\n    config: propConfig,\r\n    defaultIns,\r\n  }: {\r\n    config?: ComputeBudgetConfig;\r\n    defaultIns?: TransactionInstruction[];\r\n  }): Promise<void> {\r\n    try {\r\n      const config = propConfig || (await this.getComputeBudgetConfig());\r\n      if (this.addCustomComputeBudget(config)) return;\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    } catch {\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    }\r\n  }\r\n\r\n  public addInstruction({\r\n    instructions = [],\r\n    endInstructions = [],\r\n    signers = [],\r\n    instructionTypes = [],\r\n    endInstructionTypes = [],\r\n    lookupTableAddress = [],\r\n  }: AddInstructionParam): TxBuilder {\r\n    this.instructions.push(...instructions);\r\n    this.endInstructions.push(...endInstructions);\r\n    this.signers.push(...signers);\r\n    this.instructionTypes.push(...instructionTypes);\r\n    this.endInstructionTypes.push(...endInstructionTypes);\r\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\r\n    return this;\r\n  }\r\n\r\n  public async versionBuild<O = Record<string, any>>({\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    txVersion?: TxVersion;\r\n    extInfo?: O;\r\n  }): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\r\n    if (txVersion === TxVersion.V0) return (await this.buildV0({ ...(extInfo || {}) })) as MakeTxData<TxVersion.V0, O>;\r\n    return this.build<O>(extInfo) as MakeTxData<TxVersion.LEGACY, O>;\r\n  }\r\n\r\n  public build<O = Record<string, any>>(extInfo?: O): MakeTxData<TxVersion.LEGACY, O> {\r\n    const transaction = new Transaction();\r\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\r\n    transaction.feePayer = this.feePayer;\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        transaction.recentBlockhash = recentBlockHash;\r\n        if (this.signers.length) transaction.sign(...this.signers);\r\n\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = sendAndConfirm\r\n            ? await sendAndConfirmTransaction(\r\n                this.connection,\r\n                transaction,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              )\r\n            : await this.connection.sendRawTransaction(transaction.serialize(), { skipPreflight });\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(...this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || ({} as O),\r\n    };\r\n  }\r\n\r\n  public buildMultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\r\n    extInfo?: T;\r\n  }): MultiTxBuildData {\r\n    const { extraPreBuildData = [], extInfo } = params;\r\n    const { transaction } = this.build(extInfo);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\r\n\r\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            let i = 0;\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) continue;\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                tx.recentBlockhash = recentBlockHash;\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\r\n            tx.recentBlockhash = recentBlockHash;\r\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n            return tx;\r\n          });\r\n          printSimulate(partialSignedTxs);\r\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return {\r\n              txIds,\r\n              signedTxs,\r\n            };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\r\n    extraPreBuildData,\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\r\n    txVersion?: T;\r\n    extInfo?: O;\r\n  }): Promise<MakeMultiTxData<T, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0MultiTx({\r\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\r\n        buildProps: extInfo || {},\r\n      })) as MakeMultiTxData<T, O>;\r\n    return this.buildMultiTx<O>({\r\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\r\n      extInfo,\r\n    }) as MakeMultiTxData<T, O>;\r\n  }\r\n\r\n  public async buildV0<O = Record<string, any>>(\r\n    props?: O & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    },\r\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\r\n    const {\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      forerunCreate,\r\n      recentBlockhash: propRecentBlockhash,\r\n      ...extInfo\r\n    } = props || {};\r\n\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\"\r\n        ? await getDevLookupTableCache(this.connection)\r\n        : await getMainLookupTableCache(this.connection)),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const recentBlockhash = forerunCreate\r\n      ? PublicKey.default.toBase58()\r\n      : propRecentBlockhash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n    const messageV0 = new TransactionMessage({\r\n      payerKey: this.feePayer,\r\n      recentBlockhash,\r\n      instructions: [...this.allInstructions],\r\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n    const transaction = new VersionedTransaction(messageV0);\r\n\r\n    transaction.sign(this.signers);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\r\n          if (sendAndConfirm) {\r\n            await confirmTransaction(this.connection, txId);\r\n          }\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendTransaction(txs[0], { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: (extInfo || {}) as O,\r\n    };\r\n  }\r\n\r\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\r\n    buildProps?: T & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    };\r\n  }): Promise<MultiTxV0BuildData> {\r\n    const { extraPreBuildData = [], buildProps } = params;\r\n    const { transaction } = await this.buildV0(buildProps);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\r\n\r\n    const allTransactions: VersionedTransaction[] = [\r\n      transaction,\r\n      ...filterExtraBuildData.map((data) => data.transaction),\r\n    ];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach(async (tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      buildProps,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: buildProps || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuild(\r\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig; splitIns?: TransactionInstruction[] },\r\n  ): Promise<MultiTxBuildData> {\r\n    const { splitIns = [], computeBudgetConfig, ...extInfo } = props || {};\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n\r\n    const allTransactions: Transaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      const _signerStrs = new Set<string>(\r\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\r\n\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer }) ||\r\n          checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          checkLegacyTxSize({\r\n            instructions: computeBudgetConfig\r\n              ? [...computeBudgetData.instructions, ...instructionQueue]\r\n              : [...instructionQueue],\r\n            payer: this.feePayer,\r\n            signers: _signer,\r\n          })\r\n        ) {\r\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n        } else {\r\n          allTransactions.push(new Transaction().add(...instructionQueue));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        checkLegacyTxSize({\r\n          instructions: computeBudgetConfig\r\n            ? [...computeBudgetData.instructions, ...instructionQueue]\r\n            : [...instructionQueue],\r\n          payer: this.feePayer,\r\n          signers: _signers.map((s) => s.publicKey),\r\n        })\r\n      ) {\r\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n      } else {\r\n        allTransactions.push(new Transaction().add(...instructionQueue));\r\n      }\r\n      allSigners.push(_signers);\r\n    }\r\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        allTransactions.forEach(async (tx, idx) => {\r\n          tx.recentBlockhash = recentBlockHash;\r\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n              }\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuildV0(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n      sniperTransactions?: VersionedTransaction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? await getDevLookupTableCache(this.connection) : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      blockHash: blockHash,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                console.log(\"skip tx: \", i);\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async buildSniperTransaction(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\"\r\n        ? await getDevLookupTableCache(this.connection)\r\n        : await getMainLookupTableCache(this.connection)),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                console.log(\"skip tx: \", i);\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\n\r\nimport { tryParsePublicKey } from \"./pubKey\";\r\n\r\nexport async function sleep(ms: number): Promise<void> {\r\n  new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function getTimestamp(): number {\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function notInnerObject(v: unknown): v is Record<string, any> {\r\n  return (\r\n    typeof v === \"object\" &&\r\n    v !== null &&\r\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\r\n  );\r\n}\r\n\r\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\r\n  // @ts-expect-error no need type for inner code\r\n  return typeof jsonInfo === \"string\"\r\n    ? tryParsePublicKey(jsonInfo)\r\n    : Array.isArray(jsonInfo)\r\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\r\n    : notInnerObject(jsonInfo)\r\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\r\n    : jsonInfo;\r\n}\r\n","import BN from \"bn.js\";\r\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN, { isBN } from \"bn.js\";\r\n\r\nimport {\r\n  bits,\r\n  blob,\r\n  Blob,\r\n  Layout,\r\n  offset as _offset,\r\n  seq as _seq,\r\n  Structure as _Structure,\r\n  u32 as _u32,\r\n  u8 as _u8,\r\n  UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n} from \"./buffer-layout\";\r\n\r\nexport * from \"./buffer-layout\";\r\nexport { blob };\r\n\r\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\r\n  blob: Layout<Buffer>;\r\n  signed: boolean;\r\n\r\n  constructor(span: number, signed: boolean, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\r\n    super(span, property);\r\n    this.blob = blob(span);\r\n    this.signed = signed;\r\n  }\r\n\r\n  /** @override */\r\n  decode(b: Buffer, offset = 0): BN {\r\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\r\n    if (this.signed) {\r\n      return num.fromTwos(this.span * 8).clone();\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /** @override */\r\n  encode(src: BN, b: Buffer, offset = 0): number {\r\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\r\n    if (this.signed) {\r\n      src = src.toTwos(this.span * 8);\r\n    }\r\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\r\n  }\r\n}\r\n\r\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\r\n  _lower: any;\r\n  _upper: any;\r\n  // TODO: unknown\r\n  constructor(property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(8, property);\r\n    this._lower = bits(_u32(), false);\r\n    this._upper = bits(_u32(), false);\r\n  }\r\n\r\n  addBoolean(property: string): void {\r\n    if (this._lower.fields.length < 32) {\r\n      this._lower.addBoolean(property);\r\n    } else {\r\n      this._upper.addBoolean(property);\r\n    }\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\r\n    const lowerDecoded = this._lower.decode(b, offset);\r\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\r\n    return { ...lowerDecoded, ...upperDecoded };\r\n  }\r\n\r\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\r\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\r\n  }\r\n}\r\n\r\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(1, property);\r\n}\r\n\r\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(4, property);\r\n}\r\n\r\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, false, property);\r\n}\r\n\r\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, false, property);\r\n}\r\n\r\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(1, true, property);\r\n}\r\n\r\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, true, property);\r\n}\r\n\r\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, true, property);\r\n}\r\n\r\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\r\n  layout: Layout<T>;\r\n  decoder: (data: T) => U;\r\n  encoder: (src: U) => T;\r\n\r\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(layout.span, property);\r\n    this.layout = layout;\r\n    this.decoder = decoder;\r\n    this.encoder = encoder;\r\n  }\r\n\r\n  decode(b: Buffer, offset?: number): U {\r\n    return this.decoder(this.layout.decode(b, offset));\r\n  }\r\n\r\n  encode(src: U, b: Buffer, offset?: number): number {\r\n    return this.layout.encode(this.encoder(src), b, offset);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset?: number): number {\r\n    return this.layout.getSpan(b, offset);\r\n  }\r\n}\r\n\r\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\r\n  return new WrappedLayout(\r\n    blob(32),\r\n    (b: Buffer) => new PublicKey(b),\r\n    (key: PublicKey) => key.toBuffer(),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\r\n  layout: Layout<T>;\r\n  discriminator: Layout<number>;\r\n\r\n  constructor(layout: Layout<T>, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(-1, property);\r\n    this.layout = layout;\r\n    this.discriminator = _u8();\r\n  }\r\n\r\n  encode(src: T | null, b: Buffer, offset = 0): number {\r\n    if (src === null || src === undefined) {\r\n      return this.discriminator.encode(0, b, offset);\r\n    }\r\n    this.discriminator.encode(1, b, offset);\r\n    return this.layout.encode(src, b, offset + 1) + 1;\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): T | null {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return null;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.decode(b, offset + 1);\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset = 0): number {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return 1;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.getSpan(b, offset + 1) + 1;\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n}\r\n\r\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\r\n  return new OptionLayout<T, P>(layout, property);\r\n}\r\n\r\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\r\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\r\n}\r\n\r\nexport function decodeBool(value: number): boolean {\r\n  if (value === 0) {\r\n    return false;\r\n  } else if (value === 1) {\r\n    return true;\r\n  }\r\n  throw new Error(\"Invalid bool: \" + value);\r\n}\r\n\r\nexport function encodeBool(value: boolean): number {\r\n  return value ? 1 : 0;\r\n}\r\n\r\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ values: T[] }> = struct([\r\n    length,\r\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\r\n  ]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\r\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\r\n\r\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\r\n    if (!receivedTag.eq(tag)) {\r\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\r\n}\r\n\r\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ data }) => data,\r\n    (data) => ({ data }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\r\n  return new WrappedLayout(\r\n    vecU8(),\r\n    (data) => data.toString(\"utf-8\"),\r\n    (s) => Buffer.from(s, \"utf-8\"),\r\n    property,\r\n  );\r\n}\r\n\r\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\r\n  registry: Record<string, Layout<any>>;\r\n}\r\n\r\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\r\n  const unionLayout = _union(_u8(), property);\r\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\r\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\r\n}\r\n\r\nexport function array<T, P extends string = \"\">(\r\n  elementLayout: Layout<T>,\r\n  length: number,\r\n  property?: P,\r\n): Layout<T[], P> {\r\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class Structure<T, P, D extends { [key: string]: any; }> extends _Structure<T, P, D> {\r\n  /** @override */\r\n  decode(b: Buffer, offset?: number): D {\r\n    return super.decode(b, offset);\r\n  }\r\n}\r\n\r\nexport function struct<T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n): T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n    Value,\r\n    P,\r\n    {\r\n      [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n      ? V\r\n      : any;\r\n    }\r\n  >\r\n  : any {\r\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\r\n  return new Structure(fields, property, decodePrefixes);\r\n}\r\n\r\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\r\n  ? S\r\n  : any;\r\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any; }> = Structure<any, any, S>;\r\n\r\nexport class Union<Schema extends { [key: string]: any; }> extends _Union<Schema> {\r\n  encodeInstruction(instruction: any): Buffer {\r\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\r\n    const b = Buffer.alloc(instructionMaxSpan);\r\n    return b.slice(0, this.encode(instruction, b));\r\n  }\r\n\r\n  decodeInstruction(instruction: any): Partial<Schema> {\r\n    return this.decode(instruction);\r\n  }\r\n}\r\nexport function union<UnionSchema extends { [key: string]: any } = any>(\r\n  discr: any,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n): Union<UnionSchema> {\r\n  return new Union(discr, defaultLayout, property);\r\n}\r\n\r\nclass Zeros extends Blob {\r\n  decode(b: Buffer, offset: number): Buffer {\r\n    const slice = super.decode(b, offset);\r\n    if (!slice.every((v) => v === 0)) {\r\n      throw new Error(\"nonzero padding bytes\");\r\n    }\r\n    return slice;\r\n  }\r\n}\r\n\r\nexport function zeros(length: number): Zeros {\r\n  return new Zeros(length);\r\n}\r\n\r\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\r\n  elementLayout: Layout<T, P>,\r\n  count: number | BN | Layout<BN | number, P>,\r\n  property?: AnotherP,\r\n): Layout<T[], AnotherP> {\r\n  let parsedCount: number;\r\n  const superCount =\r\n    typeof count === \"number\"\r\n      ? count\r\n      : isBN(count)\r\n        ? count.toNumber()\r\n        : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\r\n          get(target, property): any {\r\n            if (!parsedCount) {\r\n              // get count in targetLayout. note that count may be BN\r\n              const countProperty = Reflect.get(target, \"count\");\r\n\r\n              // let targetLayout's  property:count be a number\r\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\r\n\r\n              // record the count\r\n              Reflect.set(target, \"count\", parsedCount);\r\n            }\r\n            return Reflect.get(target, property);\r\n          },\r\n          set(target, property, value): any {\r\n            if (property === \"count\") {\r\n              parsedCount = value;\r\n            }\r\n            return Reflect.set(target, property, value);\r\n          },\r\n        });\r\n\r\n  // @ts-expect-error force type\r\n  return _seq(elementLayout, superCount, property);\r\n}\r\n","import {\r\n  bits as _bits,\r\n  BitStructure as _BitStructure,\r\n  blob as _blob,\r\n  Blob as _Blob,\r\n  cstr as _cstr,\r\n  f32 as _f32,\r\n  f32be as _f32be,\r\n  f64 as _f64,\r\n  f64be as _f64be,\r\n  greedy as _greedy,\r\n  Layout as _Layout,\r\n  ns64 as _ns64,\r\n  ns64be as _ns64be,\r\n  nu64 as _nu64,\r\n  nu64be as _nu64be,\r\n  offset as _offset,\r\n  s16 as _s16,\r\n  s16be as _s16be,\r\n  s24 as _s24,\r\n  s24be as _s24be,\r\n  s32 as _s32,\r\n  s32be as _s32be,\r\n  s40 as _s40,\r\n  s40be as _s40be,\r\n  s48 as _s48,\r\n  s48be as _s48be,\r\n  s8 as _s8,\r\n  seq as _seq,\r\n  struct as _struct,\r\n  Structure as _Structure,\r\n  u16 as _u16,\r\n  u16be as _u16be,\r\n  u24 as _u24,\r\n  u24be as _u24be,\r\n  u32 as _u32,\r\n  u32be as _u32be,\r\n  u40 as _u40,\r\n  u40be as _u40be,\r\n  u48 as _u48,\r\n  u48be as _u48be,\r\n  u8 as _u8,\r\n  UInt as _UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\r\n  utf8 as _utf8,\r\n} from \"@solana/buffer-layout\";\r\n\r\n//#region ------------------- Layout -------------------\r\nexport interface Layout<T = any, P = \"\"> {\r\n  span: number;\r\n  property?: P;\r\n  decode(b: Buffer, offset?: number): T;\r\n  encode(src: T, b: Buffer, offset?: number): number;\r\n  getSpan(b: Buffer, offset?: number): number;\r\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\r\n}\r\nexport interface LayoutConstructor {\r\n  new <T, P>(): Layout<T, P>; // for class extends syntex\r\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\r\n  readonly prototype: Layout;\r\n}\r\nexport const Layout = _Layout as unknown as LayoutConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Structure -------------------\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\r\n  extends Layout<DecodeSchema, P> {\r\n  span: number;\r\n  decode(b: Buffer, offset?: number): DecodeSchema;\r\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\r\n  offsetOf<AP extends string>(property: AP): number;\r\n}\r\ninterface StructureConstructor {\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\r\n    fields: T,\r\n    property?: P,\r\n    decodePrefixes?: boolean,\r\n  ): Structure<T, P, DecodeSchema>;\r\n}\r\nexport const Structure = _Structure as unknown as StructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Union -------------------\r\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\r\n  registry: object;\r\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\r\n  addVariant(\r\n    variant: number,\r\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\r\n    property?: string,\r\n  ): any /* TEMP: code in Layout.js 1809 */;\r\n}\r\ninterface UnionConstructor {\r\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\r\n  new <UnionSchema extends { [key: string]: any } = any>(\r\n    discr: Layout<any, any>,\r\n    defaultLayout: Layout<any, any>,\r\n    property?: string,\r\n  ): Union<UnionSchema>;\r\n}\r\nexport const Union = _Union as unknown as UnionConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- BitStructure -------------------\r\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\r\ninterface BitStructureConstructor {\r\n  new (...params: any[]): BitStructure;\r\n}\r\nexport const BitStructure = _BitStructure as BitStructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- UInt -------------------\r\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\r\ninterface UIntConstructor {\r\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\r\n}\r\nexport const UInt = _UInt as UIntConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Blob -------------------\r\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\r\ninterface BlobConstructor {\r\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\r\n}\r\nexport const Blob = _Blob as unknown as BlobConstructor;\r\n//#endregion\r\n\r\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\r\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\n\r\nexport const struct = _struct as <T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n) => T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any;\r\n\r\nexport const seq = _seq as unknown as <T, P>(\r\n  elementLayout: Layout<T, string>,\r\n  count: number | Layout<number, string>,\r\n  property?: P,\r\n) => Layout<T[]>;\r\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\r\n  discr: Layout<any, any>,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n) => Union<UnionSchema>;\r\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\r\n  layout: Layout<any, P>,\r\n  property?: P,\r\n) => any;\r\nexport const blob = _blob as unknown as <P extends string = \"\">(\r\n  length: number | Layout<number, P>,\r\n  property?: P,\r\n) => Blob<P>;\r\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\r\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\r\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\r\n  word: Layout<T>,\r\n  msb?: boolean,\r\n  property?: P,\r\n) => BitStructure<T, P>; // TODO: not quite sure\r\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\r\n  layout: Layout<T, P>,\r\n  offset?: number,\r\n  property?: P,\r\n) => Layout<T, P>;\r\n\r\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"../../api/type\";\r\nimport {\r\n  CLMM_LOCK_AUTH_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_PROGRAM_ID,\r\n  InstructionType,\r\n  WSOLMint,\r\n  fetchMultipleMintInfos,\r\n  getATAAddress,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n} from \"@/common\";\r\nimport {\r\n  AccountLayout,\r\n  createAssociatedTokenAccountIdempotentInstruction,\r\n  TOKEN_2022_PROGRAM_ID,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { toApiV3Token, toFeeConfig } from \"../../raydium/token/utils\";\r\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos, TxTipConfig } from \"../../raydium/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { MakeTransaction } from \"../type\";\r\nimport { ClmmInstrument } from \"./instrument\";\r\nimport {\r\n  ClmmConfigLayout,\r\n  ClmmPositionLayout,\r\n  LockClPositionLayoutV2,\r\n  OperationLayout,\r\n  PoolInfoLayout,\r\n  PositionInfoLayout,\r\n} from \"./layout\";\r\nimport {\r\n  ClmmParsedRpcData,\r\n  ClosePositionExtInfo,\r\n  CollectRewardParams,\r\n  CollectRewardsParams,\r\n  ComputeClmmPoolInfo,\r\n  CreateConcentratedPool,\r\n  DecreaseLiquidity,\r\n  HarvestAllRewardsParams,\r\n  HarvestLockPosition,\r\n  IncreasePositionFromBase,\r\n  IncreasePositionFromLiquidity,\r\n  InitRewardExtInfo,\r\n  InitRewardParams,\r\n  InitRewardsParams,\r\n  LockPosition,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBase,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidity,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  SetRewardParams,\r\n  SetRewardsParams,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport { MAX_SQRT_PRICE_X64, MIN_SQRT_PRICE_X64, mockV3CreatePoolInfo, ZERO } from \"./utils/constants\";\r\nimport { MathUtil, SqrtPriceMath } from \"./utils/math\";\r\nimport {\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaTickArrayAddress,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaExBitmapAccount,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils, clmmComputeInfoToApiInfo } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\n\r\nexport class Clmm extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async getClmmPoolKeys(poolId: string): Promise<ClmmKeys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as ClmmKeys[])[0];\r\n  }\r\n\r\n  public async createPool<T extends TxVersion>(\r\n    props: CreateConcentratedPool<T>,\r\n  ): Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>> {\r\n    const {\r\n      programId,\r\n      owner = this.scope.owner?.publicKey || PublicKey.default,\r\n      mint1,\r\n      mint2,\r\n      ammConfig,\r\n      initialPrice,\r\n      computeBudgetConfig,\r\n      forerunCreate,\r\n      getObserveState,\r\n      txVersion,\r\n      txTipConfig,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const [mintA, mintB, initPrice] = new BN(new PublicKey(mint1.address).toBuffer()).gt(\r\n      new BN(new PublicKey(mint2.address).toBuffer()),\r\n    )\r\n      ? [mint2, mint1, new Decimal(1).div(initialPrice)]\r\n      : [mint1, mint2, initialPrice];\r\n\r\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\r\n\r\n    const extendMintAccount: PublicKey[] = [];\r\n    const fetchAccounts: PublicKey[] = [];\r\n    if (mintA.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintA.address)).publicKey);\r\n    if (mintB.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintB.address)).publicKey);\r\n    const extMintRes = await this.scope.connection.getMultipleAccountsInfo(fetchAccounts);\r\n\r\n    extMintRes.forEach((r, idx) => {\r\n      if (r) extendMintAccount.push(fetchAccounts[idx]);\r\n    });\r\n\r\n    const insInfo = await ClmmInstrument.createPoolInstructions({\r\n      connection: this.scope.connection,\r\n      programId,\r\n      owner,\r\n      mintA,\r\n      mintB,\r\n      ammConfigId: ammConfig.id,\r\n      initialPriceX64,\r\n      forerunCreate: !getObserveState && forerunCreate,\r\n      extendMintAccount,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{\r\n      mockPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n      address: ClmmKeys;\r\n      forerunCreate?: boolean;\r\n    }>({\r\n      txVersion,\r\n      extInfo: {\r\n        address: {\r\n          ...insInfo.address,\r\n          observationId: insInfo.address.observationId.toBase58(),\r\n          exBitmapAccount: insInfo.address.exBitmapAccount.toBase58(),\r\n          programId: programId.toString(),\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          openTime: \"0\",\r\n          vault: { A: insInfo.address.mintAVault.toString(), B: insInfo.address.mintBVault.toString() },\r\n          rewardInfos: [],\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        },\r\n        mockPoolInfo: {\r\n          type: \"Concentrated\",\r\n          rewardDefaultPoolInfos: \"Clmm\",\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          feeRate: ammConfig.tradeFeeRate,\r\n          openTime: \"0\",\r\n          programId: programId.toString(),\r\n          price: initPrice.toNumber(),\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          burnPercent: 0,\r\n          ...mockV3CreatePoolInfo,\r\n        },\r\n        forerunCreate,\r\n      },\r\n    }) as Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>>;\r\n  }\r\n\r\n  public async openPositionFromBase<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    getEphemeralSigners,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: OpenPositionFromBase<T>): Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>> {\r\n    if (this.scope.availability.addConcentratedPosition === false)\r\n      this.logAndCreateError(\"add position feature disabled in your region\");\r\n\r\n    this.scope.checkOwner();\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const [amountA, amountB] = base === \"MintA\" ? [baseAmount, otherAmountMax] : [otherAmountMax, baseAmount];\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountA,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountB,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", {\r\n        ownerTokenAccountA: ownerTokenAccountA?.toBase58(),\r\n        ownerTokenAccountB: ownerTokenAccountB?.toBase58(),\r\n      });\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n    const insInfo = await ClmmInstrument.openPositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        ...ownerInfo,\r\n        feePayer: this.scope.ownerPubKey,\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromBaseExtInfo>({\r\n      txVersion,\r\n      extInfo: { ...insInfo.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>>;\r\n  }\r\n\r\n  public async openPositionFromLiquidity<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n    feePayer,\r\n  }: OpenPositionFromLiquidity<T>): Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>> {\r\n    if (this.scope.availability.createConcentratedPosition === false)\r\n      this.logAndCreateError(\"open position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountMaxA,\r\n              }\r\n            : undefined,\r\n\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountMaxB,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (ownerTokenAccountA === undefined || ownerTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n\r\n    const makeOpenPositionInstructions = await ClmmInstrument.openPositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n    txBuilder.addInstruction(makeOpenPositionInstructions);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: makeOpenPositionInstructions.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromLiquidity<T extends TxVersion>(\r\n    props: IncreasePositionFromLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      liquidity,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountMaxA,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountMaxB,\r\n              }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.increasePositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromBase<T extends TxVersion>(\r\n    props: IncreasePositionFromBase<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      ownerPosition,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || (base === \"MintA\" ? baseAmount : otherAmountMax).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || (base === \"MintA\" ? otherAmountMax : baseAmount).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n              }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const ins = ClmmInstrument.increasePositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async decreaseLiquidity<T extends TxVersion>(\r\n    props: DecreaseLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo & Partial<ClosePositionExtInfo>>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      ownerInfo,\r\n      amountMinA,\r\n      amountMinB,\r\n      liquidity,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount: PublicKey | undefined;\r\n\r\n      if (itemReward.mint.address === poolInfo.mintA.address) ownerRewardAccount = ownerTokenAccountA;\r\n      else if (itemReward.mint.address === poolInfo.mintB.address) ownerRewardAccount = ownerTokenAccountB;\r\n      else {\r\n        const { account: _ownerRewardAccount, instructionParams: ownerRewardAccountInstructions } =\r\n          await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            createInfo: {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n        ownerRewardAccount = _ownerRewardAccount;\r\n        ownerRewardAccountInstructions && txBuilder.addInstruction(ownerRewardAccountInstructions);\r\n      }\r\n\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\r\n        \"cannot found target token accounts\",\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccountRawInfos,\r\n      );\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const nft2022 = (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(\r\n      TOKEN_2022_PROGRAM_ID,\r\n    );\r\n    const decreaseInsInfo = await ClmmInstrument.decreaseLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n        rewardAccounts,\r\n      },\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: decreaseInsInfo.instructions,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n    });\r\n\r\n    let extInfo = { ...decreaseInsInfo.address };\r\n    if (ownerInfo.closePosition) {\r\n      const closeInsInfo = await ClmmInstrument.closePositionInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: { wallet: this.scope.ownerPubKey },\r\n        ownerPosition,\r\n        nft2022,\r\n      });\r\n      txBuilder.addInstruction({\r\n        endInstructions: closeInsInfo.instructions,\r\n        endInstructionTypes: closeInsInfo.instructionTypes,\r\n      });\r\n      extInfo = { ...extInfo, ...closeInsInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: extInfo },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async lockPosition<T extends TxVersion>(props: LockPosition<T>): Promise<MakeTxData<ClmmLockAddress>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      poolProgramId = CLMM_PROGRAM_ID,\r\n      ownerPosition,\r\n      payer,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      getEphemeralSigners,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const lockIns = await ClmmInstrument.makeLockPositions({\r\n      programId,\r\n      authProgramId,\r\n      poolProgramId,\r\n      wallet: this.scope.ownerPubKey,\r\n      payer: payer ?? this.scope.ownerPubKey,\r\n      nftMint: ownerPosition.nftMint,\r\n      getEphemeralSigners,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n\r\n    txBuilder.addInstruction(lockIns);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: lockIns.address,\r\n    }) as Promise<MakeTxData<ClmmLockAddress>>;\r\n  }\r\n\r\n  public async harvestLockPosition<T extends TxVersion>(props: HarvestLockPosition<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      clmmProgram = CLMM_PROGRAM_ID,\r\n      poolKeys: propPoolKeys,\r\n      lockData,\r\n      ownerInfo = { useSOLBalance: true },\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(lockData.poolId.toString()));\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const positionData = await this.scope.connection.getAccountInfo(lockData.positionId);\r\n    if (!positionData) this.logger.logWithError(\"position not found\", lockData.positionId);\r\n    const position = PositionInfoLayout.decode(positionData!.data);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintA.programId,\r\n        mint: new PublicKey(poolKeys.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintB.programId,\r\n        mint: new PublicKey(poolKeys.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolKeys.rewardInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n      if (!ownerRewardAccount) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(itemReward.mint.programId),\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n        });\r\n        ownerRewardAccount = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockData.lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(this.scope.ownerPubKey, lockData.lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickLower,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickUpper,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayLowerStartIndex,\r\n    );\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayUpperStartIndex,\r\n    );\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      position.tickLower,\r\n      position.tickUpper,\r\n    );\r\n\r\n    const rewardAccountsFullInfo: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n      rewardAccountsFullInfo.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const harvestLockIns = await ClmmInstrument.harvestLockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      lockPositionId,\r\n      clmmProgram,\r\n      lockOwner: this.scope.ownerPubKey,\r\n      lockNftMint: lockData.lockNftMint,\r\n      lockNftAccount,\r\n      positionNftAccount: lockData.nftAccount,\r\n      positionId: lockData.positionId,\r\n      poolId: lockData.poolId,\r\n      protocolPosition,\r\n      vaultA: new PublicKey(poolKeys.vault.A),\r\n      vaultB: new PublicKey(poolKeys.vault.B),\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      userVaultA: ownerTokenAccountA!,\r\n      userVaultB: ownerTokenAccountB!,\r\n      mintA: new PublicKey(poolKeys.mintA.address),\r\n      mintB: new PublicKey(poolKeys.mintB.address),\r\n      rewardAccounts: rewardAccountsFullInfo,\r\n      exTickArrayBitmap: getPdaExBitmapAccount(clmmProgram, lockData.poolId).publicKey,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [harvestLockIns],\r\n      instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async closePosition<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerPosition,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    txVersion: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T, ClosePositionExtInfo>> {\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.closePositionInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: { wallet: this.scope.ownerPubKey },\r\n      ownerPosition,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.addInstruction(ins).versionBuild<ClosePositionExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ClosePositionExtInfo>>;\r\n  }\r\n\r\n  public async initReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardParams<T>): Promise<MakeTxData<T, InitRewardExtInfo>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const rewardMintUseSOLBalance =\r\n      ownerInfo.useSOLBalance && rewardInfo.mint.address.toString() === WSOLMint.toString();\r\n    const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo.mint.address),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                  ? _baseRewardAmount.toFixed(0)\r\n                  : _baseRewardAmount.add(1).toFixed(0),\r\n              ),\r\n            }\r\n          : undefined,\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.initRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        programId: new PublicKey(rewardInfo.mint.programId),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<InitRewardExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, InitRewardExtInfo>>;\r\n  }\r\n\r\n  public async initRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n    }\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardInfo of rewardInfos) {\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: new BN(\r\n                  new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                    ? _baseRewardAmount.toFixed(0)\r\n                    : _baseRewardAmount.add(1).toFixed(0),\r\n                ),\r\n              }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.initRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          programId: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n      txBuilder.addInstruction(insInfo);\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: rewardInfo.programId,\r\n        mint: rewardInfo.mint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                  rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n                )\r\n                  ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                  : rewardInfo.perSecond\r\n                      .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                      .add(1)\r\n                      .toFixed(0),\r\n              ),\r\n            }\r\n          : undefined,\r\n\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.setRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        mint: rewardInfo.mint,\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: new BN(\r\n                  new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                    rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n                  )\r\n                    ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                    : rewardInfo.perSecond\r\n                        .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                        .add(1)\r\n                        .toFixed(0),\r\n                ),\r\n              }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.setRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMint,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: CollectRewardParams<T>): Promise<MakeTxData<{ address: Record<string, PublicKey> }>> {\r\n    const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n    if (!rewardInfo) this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo!.mint.programId),\r\n        mint: rewardMint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.collectRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardMint,\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<{ address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectRewards({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMints,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CollectRewardsParams): Promise<MakeTransaction> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardMint of rewardMints) {\r\n      const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n      if (!rewardInfo) {\r\n        this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n        continue;\r\n      }\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: rewardMint,\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n      const insInfo = ClmmInstrument.collectRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n\r\n        rewardMint,\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = { ...address, ...insInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address });\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    inputMint: string | PublicKey;\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = inputMint.toString() === poolInfo.mintA.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = baseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? amountIn : 0,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? 0 : amountIn,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        inputMint: new PublicKey(inputMint),\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swapBaseOut<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    outputMint: string | PublicKey;\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = outputMint.toString() === poolInfo.mintB.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 =\r\n        outputMint.toString() === poolInfo.mintB.address\r\n          ? MIN_SQRT_PRICE_X64.add(new BN(1))\r\n          : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? amountInMax : 0,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? 0 : amountInMax,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseOutInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        outputMint: new PublicKey(outputMint),\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>({\r\n    allPoolInfo,\r\n    allPositions,\r\n    lockInfo,\r\n    ownerInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    programId,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n    lockProgram = CLMM_LOCK_PROGRAM_ID,\r\n    lockAuth = CLMM_LOCK_AUTH_ID,\r\n    clmmProgram = CLMM_PROGRAM_ID,\r\n  }: HarvestAllRewardsParams<T>): Promise<MakeMultiTxData<T>> {\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccountRawInfos) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, programId).publicKey;\r\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      } else {\r\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      }\r\n    }\r\n    const allNftMints = Object.values(allPositions)\r\n      .flat()\r\n      .map((p) => p.nftMint);\r\n\r\n    const mintData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      allNftMints.map((n) => ({ pubkey: n })),\r\n    );\r\n    const record: Record<string, PublicKey | null> = {};\r\n    mintData.forEach((data) => {\r\n      record[data.pubkey.toBase58()] = data?.accountInfo?.owner ?? null;\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    for (const itemInfo of Object.values(allPoolInfo)) {\r\n      if (allPositions[itemInfo.id] === undefined) continue;\r\n      if (\r\n        !allPositions[itemInfo.id].find(\r\n          (i) => !i.liquidity.isZero() || i.rewardInfos.find((ii) => !ii.rewardAmountOwed.isZero()),\r\n        )\r\n      )\r\n        continue;\r\n\r\n      const poolInfo = itemInfo;\r\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n      let ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.address];\r\n      if (!ownerTokenAccountA) {\r\n        if (mintAUseSOLBalance) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: poolInfo.mintA.programId,\r\n            mint: new PublicKey(poolInfo.mintA.address),\r\n            notUseTokenAccount: mintAUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !mintAUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n          ownerTokenAccountA = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        } else {\r\n          const mint = new PublicKey(poolInfo.mintA.address);\r\n          ownerTokenAccountA = this.scope.account.getAssociatedTokenAccount(\r\n            mint,\r\n            new PublicKey(poolInfo.mintA.programId),\r\n          );\r\n          txBuilder.addInstruction({\r\n            instructions: [\r\n              createAssociatedTokenAccountIdempotentInstruction(\r\n                this.scope.ownerPubKey,\r\n                ownerTokenAccountA,\r\n                this.scope.ownerPubKey,\r\n                mint,\r\n                new PublicKey(poolInfo.mintA.programId),\r\n              ),\r\n            ],\r\n          });\r\n        }\r\n      }\r\n\r\n      let ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.address];\r\n      if (!ownerTokenAccountB) {\r\n        if (mintBUseSOLBalance) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: poolInfo.mintB.programId,\r\n            mint: new PublicKey(poolInfo.mintB.address),\r\n            notUseTokenAccount: mintBUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !mintBUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n          ownerTokenAccountB = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        } else {\r\n          const mint = new PublicKey(poolInfo.mintB.address);\r\n          ownerTokenAccountB = this.scope.account.getAssociatedTokenAccount(\r\n            mint,\r\n            new PublicKey(poolInfo.mintB.programId),\r\n          );\r\n          txBuilder.addInstruction({\r\n            instructions: [\r\n              createAssociatedTokenAccountIdempotentInstruction(\r\n                this.scope.ownerPubKey,\r\n                ownerTokenAccountB,\r\n                this.scope.ownerPubKey,\r\n                mint,\r\n                new PublicKey(poolInfo.mintB.programId),\r\n              ),\r\n            ],\r\n          });\r\n        }\r\n      }\r\n\r\n      ownerMintToAccount[poolInfo.mintA.address] = ownerTokenAccountA;\r\n      ownerMintToAccount[poolInfo.mintB.address] = ownerTokenAccountB;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n\r\n      for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          });\r\n          ownerRewardAccount = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount!);\r\n      }\r\n\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n\r\n      const rewardAccountsFullInfo: {\r\n        poolRewardVault: PublicKey;\r\n        ownerRewardVault: PublicKey;\r\n        rewardMint: PublicKey;\r\n      }[] = [];\r\n      for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n        rewardAccountsFullInfo.push({\r\n          poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n          ownerRewardVault: rewardAccounts[i],\r\n          rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n        });\r\n      }\r\n\r\n      for (const itemPosition of allPositions[itemInfo.id]) {\r\n        const lockData = lockInfo?.[itemInfo.id]?.[itemPosition.nftMint.toBase58()];\r\n        if (lockData) {\r\n          const lockNftAccount = getATAAddress(\r\n            this.scope.ownerPubKey,\r\n            lockData.lockNftMint,\r\n            TOKEN_PROGRAM_ID,\r\n          ).publicKey;\r\n\r\n          const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickLower,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickUpper,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayLowerStartIndex,\r\n          );\r\n          const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayUpperStartIndex,\r\n          );\r\n          const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            itemPosition.tickLower,\r\n            itemPosition.tickUpper,\r\n          );\r\n          const lockPositionId = getPdaLockClPositionIdV2(lockProgram, lockData.lockNftMint).publicKey;\r\n          const harvestLockIns = ClmmInstrument.harvestLockPositionInstructionV2({\r\n            programId: lockProgram,\r\n            auth: lockAuth,\r\n            lockPositionId,\r\n            clmmProgram,\r\n            lockOwner: this.scope.ownerPubKey,\r\n            lockNftMint: lockData.lockNftMint,\r\n            lockNftAccount,\r\n            positionNftAccount: lockData.nftAccount,\r\n            positionId: lockData.positionId,\r\n            poolId: lockData.poolId,\r\n            protocolPosition,\r\n            vaultA: new PublicKey(poolKeys.vault.A),\r\n            vaultB: new PublicKey(poolKeys.vault.B),\r\n            tickArrayLower,\r\n            tickArrayUpper,\r\n            userVaultA: ownerTokenAccountA!,\r\n            userVaultB: ownerTokenAccountB!,\r\n            mintA: new PublicKey(poolKeys.mintA.address),\r\n            mintB: new PublicKey(poolKeys.mintB.address),\r\n            rewardAccounts: rewardAccountsFullInfo,\r\n            exTickArrayBitmap: getPdaExBitmapAccount(clmmProgram, lockData.poolId).publicKey,\r\n          });\r\n          txBuilder.addInstruction({\r\n            instructions: [harvestLockIns],\r\n            instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n            lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n          });\r\n        } else {\r\n          const insData = ClmmInstrument.decreaseLiquidityInstructions({\r\n            poolInfo,\r\n            poolKeys,\r\n            ownerPosition: itemPosition,\r\n            ownerInfo: {\r\n              wallet: this.scope.ownerPubKey,\r\n              tokenAccountA: ownerTokenAccountA,\r\n              tokenAccountB: ownerTokenAccountB,\r\n              rewardAccounts,\r\n            },\r\n            liquidity: new BN(0),\r\n            amountMinA: new BN(0),\r\n            amountMinB: new BN(0),\r\n            nft2022: record[itemPosition.nftMint.toBase58()]?.equals(TOKEN_2022_PROGRAM_ID),\r\n          });\r\n          txBuilder.addInstruction(insData);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async getWhiteListMint({ programId }: { programId: PublicKey }): Promise<PublicKey[]> {\r\n    const accountInfo = await this.scope.connection.getAccountInfo(getPdaOperationAccount(programId).publicKey);\r\n    if (!accountInfo) return [];\r\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data);\r\n    return whitelistMintsInfo.whitelistMints.filter((i) => !i.equals(PublicKey.default));\r\n  }\r\n\r\n  public async getOwnerPositionInfo({\r\n    programId = CLMM_PROGRAM_ID,\r\n  }: {\r\n    programId?: string | PublicKey;\r\n  }): Promise<ReturnType<typeof PositionInfoLayout.decode>[]> {\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\r\n    const allPositionKey = balanceMints.map(\r\n      (acc) => getPdaPersonalPositionAddress(new PublicKey(programId), acc.accountInfo.mint).publicKey,\r\n    );\r\n\r\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\r\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\r\n    accountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = PositionInfoLayout.decode(positionRes.data);\r\n      allPosition.push(position);\r\n    });\r\n\r\n    return allPosition;\r\n  }\r\n\r\n  public async getOwnerLockedPositionInfo({\r\n    programId = CLMM_LOCK_PROGRAM_ID,\r\n  }: {\r\n    programId?: string | PublicKey;\r\n  }): Promise<\r\n    {\r\n      position: ReturnType<typeof PositionInfoLayout.decode>;\r\n      lockInfo: ReturnType<typeof LockClPositionLayoutV2.decode>;\r\n    }[]\r\n  > {\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\r\n    const allPositionKey = balanceMints.map(\r\n      (acc) => getPdaLockClPositionIdV2(new PublicKey(programId), acc.accountInfo.mint).publicKey,\r\n    );\r\n\r\n    const lockAccountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\r\n    const allLockPosition: ReturnType<typeof LockClPositionLayoutV2.decode>[] = [];\r\n    lockAccountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = LockClPositionLayoutV2.decode(positionRes.data);\r\n      allLockPosition.push(position);\r\n    });\r\n\r\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allLockPosition.map((p) => p.positionId));\r\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\r\n    accountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = PositionInfoLayout.decode(positionRes.data);\r\n      allPosition.push(position);\r\n    });\r\n\r\n    return allLockPosition.map((data, idx) => ({\r\n      position: allPosition[idx],\r\n      lockInfo: data,\r\n    }));\r\n  }\r\n\r\n  public async getRpcClmmPoolInfo({ poolId }: { poolId: string | PublicKey }): Promise<ClmmParsedRpcData> {\r\n    return (await this.getRpcClmmPoolInfos({ poolIds: [poolId] }))[String(poolId)];\r\n  }\r\n\r\n  public async getRpcClmmPoolInfos({\r\n    poolIds,\r\n    config,\r\n  }: {\r\n    poolIds: (string | PublicKey)[];\r\n    config?: { batchRequest?: boolean; chunkCount?: number };\r\n  }): Promise<{\r\n    [poolId: string]: ClmmParsedRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n    const returnData: {\r\n      [poolId: string]: ClmmParsedRpcData;\r\n    } = {};\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = PoolInfoLayout.decode(item.accountInfo.data);\r\n      const currentPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n        rpc.sqrtPriceX64,\r\n        rpc.mintDecimalsA,\r\n        rpc.mintDecimalsB,\r\n      ).toNumber();\r\n\r\n      returnData[String(poolIds[i])] = {\r\n        ...rpc,\r\n        currentPrice,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  public async getComputeClmmPoolInfos({\r\n    clmmPoolsRpcInfo,\r\n    mintInfos,\r\n  }: {\r\n    clmmPoolsRpcInfo: Record<\r\n      string,\r\n      ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number; programId: PublicKey }\r\n    >;\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n  }): Promise<{\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const configSet = new Set(Object.keys(clmmPoolsRpcInfo).map((p) => clmmPoolsRpcInfo[p].ammConfig.toBase58()));\r\n    const res = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      Array.from(configSet).map((s) => ({ pubkey: new PublicKey(s) })),\r\n    );\r\n    const clmmConfigs: Record<string, ReturnType<typeof ClmmConfigLayout.decode>> = {};\r\n    res.forEach((acc) => {\r\n      if (!acc.accountInfo) return;\r\n      clmmConfigs[acc.pubkey.toBase58()] = ClmmConfigLayout.decode(acc.accountInfo.data);\r\n    });\r\n    const computeClmmPoolInfo = await PoolUtils.fetchComputeMultipleClmmInfo({\r\n      connection: this.scope.connection,\r\n      rpcDataMap: clmmPoolsRpcInfo,\r\n      poolList: Object.keys(clmmPoolsRpcInfo).map((poolId) => {\r\n        const [mintA, mintB] = [clmmPoolsRpcInfo[poolId].mintA.toBase58(), clmmPoolsRpcInfo[poolId].mintB.toBase58()];\r\n        return {\r\n          id: poolId,\r\n          programId: clmmPoolsRpcInfo[poolId].programId.toBase58(),\r\n          mintA: toApiV3Token({\r\n            address: mintA,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsA,\r\n            programId: mintInfos[mintA].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          mintB: toApiV3Token({\r\n            address: mintB,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsB,\r\n            programId: mintInfos[mintB].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          price: clmmPoolsRpcInfo[poolId].currentPrice,\r\n          config: {\r\n            ...clmmConfigs[clmmPoolsRpcInfo[poolId].ammConfig.toBase58()],\r\n            id: clmmPoolsRpcInfo[poolId].ammConfig.toBase58(),\r\n\r\n            fundFeeRate: 0,\r\n            description: \"\",\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        };\r\n      }),\r\n    });\r\n\r\n    const computePoolTickData = await PoolUtils.fetchMultiplePoolTickArrays({\r\n      connection: this.scope.connection,\r\n      poolKeys: Object.values(computeClmmPoolInfo),\r\n    });\r\n\r\n    return {\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n    };\r\n  }\r\n\r\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    computePoolInfo: ComputeClmmPoolInfo;\r\n    tickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const rpcData = await this.getRpcClmmPoolInfo({ poolId });\r\n\r\n    const mintSet = new Set([rpcData.mintA.toBase58(), rpcData.mintB.toBase58()]);\r\n\r\n    const mintInfos = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo: { [poolId]: rpcData },\r\n      mintInfos,\r\n    });\r\n    const vaultData = await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, [\r\n      { pubkey: rpcData.vaultA },\r\n      { pubkey: rpcData.vaultB },\r\n    ]);\r\n\r\n    const poolInfo = clmmComputeInfoToApiInfo(computeClmmPoolInfo[poolId]);\r\n\r\n    if (!vaultData[0].accountInfo || !vaultData[1].accountInfo) throw new Error(\"pool vault data not found\");\r\n    poolInfo.mintAmountA = Number(AccountLayout.decode(vaultData[0].accountInfo.data).amount.toString());\r\n    poolInfo.mintAmountB = Number(AccountLayout.decode(vaultData[1].accountInfo?.data).amount.toString());\r\n\r\n    const poolKeys: ClmmKeys = {\r\n      ...computeClmmPoolInfo[poolId],\r\n      exBitmapAccount: computeClmmPoolInfo[poolId].exBitmapAccount.toBase58(),\r\n      observationId: computeClmmPoolInfo[poolId].observationId.toBase58(),\r\n      id: poolId,\r\n      programId: rpcData.programId.toBase58(),\r\n      openTime: rpcData.startTime.toString(),\r\n      vault: {\r\n        A: rpcData.vaultA.toBase58(),\r\n        B: rpcData.vaultB.toBase58(),\r\n      },\r\n      config: poolInfo.config,\r\n      rewardInfos: computeClmmPoolInfo[poolId].rewardInfos\r\n        .filter((r) => !r.tokenVault.equals(PublicKey.default))\r\n        .map((r) => ({\r\n          mint: toApiV3Token({ address: r.tokenMint.toBase58(), programId: TOKEN_PROGRAM_ID.toBase58(), decimals: 10 }),\r\n          vault: r.tokenVault.toBase58(),\r\n        })),\r\n    };\r\n    return { poolInfo, poolKeys, computePoolInfo: computeClmmPoolInfo[poolId], tickData: computePoolTickData };\r\n  }\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { MintLayout, RawMint, TOKEN_PROGRAM_ID, TransferFeeConfigLayout } from \"@solana/spl-token\";\r\nimport { BigNumberish } from \"@/common/bignumber\";\r\nimport { Token, TokenAmount } from \"../../module\";\r\nimport { SOL_INFO, TOKEN_WSOL } from \"./constant\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nimport { ApiV3Token } from \"../../api\";\r\nimport { solToWSol } from \"@/common\";\r\n\r\nexport const parseTokenInfo = async ({\r\n  connection,\r\n  mint,\r\n}: {\r\n  connection: Connection;\r\n  mint: PublicKey | string;\r\n}): Promise<RawMint | undefined> => {\r\n  const accountData = await connection.getAccountInfo(new PublicKey(mint));\r\n  if (!accountData || accountData.data.length !== MintLayout.span) return;\r\n  const tokenInfo = MintLayout.decode(accountData.data);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n  return tokenInfo;\r\n};\r\n\r\nexport const toTokenInfo = ({\r\n  mint,\r\n  decimals,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  logoURI = \"\",\r\n  priority = 3,\r\n}: {\r\n  mint: PublicKey;\r\n  decimals: number;\r\n  programId?: PublicKey | string;\r\n  priority?: number;\r\n  logoURI?: string;\r\n}): TokenInfo => {\r\n  const pubStr = mint.toBase58().substring(0, 6);\r\n  return {\r\n    address: mint.toBase58(),\r\n    decimals,\r\n    symbol: pubStr,\r\n    logoURI,\r\n    extensions: {},\r\n    chainId: 101,\r\n    programId: programId.toString(),\r\n    name: pubStr,\r\n    tags: [],\r\n    priority,\r\n  };\r\n};\r\n\r\nexport const toToken = (props: Omit<TokenInfo, \"priority\">): Token =>\r\n  new Token({\r\n    mint: props.address,\r\n    decimals: props.decimals,\r\n    symbol: props.symbol,\r\n    name: props.name,\r\n  });\r\n\r\nexport const toTokenAmount = ({\r\n  amount,\r\n  isRaw,\r\n  name,\r\n  ...props\r\n}: Omit<TokenInfo, \"priority\"> & {\r\n  amount: BigNumberish;\r\n  isRaw?: boolean;\r\n  name?: string;\r\n}): TokenAmount =>\r\n  new TokenAmount(\r\n    new Token({\r\n      mint: solToWSol(props.address).toBase58(),\r\n      decimals: props.decimals,\r\n      symbol: props.symbol,\r\n      name,\r\n    }),\r\n    amount,\r\n    isRaw,\r\n    name,\r\n  );\r\n\r\nexport function solToWSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === SOL_INFO.address) return TOKEN_WSOL as T;\r\n  return token;\r\n}\r\n\r\nexport function wSolToSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === TOKEN_WSOL.address) return SOL_INFO as T;\r\n  return token;\r\n}\r\n\r\nexport const toApiV3Token = ({\r\n  address,\r\n  programId,\r\n  decimals,\r\n  ...props\r\n}: {\r\n  address: string;\r\n  programId: string;\r\n  decimals: number;\r\n} & Partial<ApiV3Token>): ApiV3Token => ({\r\n  chainId: 101,\r\n  address: solToWSol(address).toBase58(),\r\n  programId,\r\n  logoURI: \"\",\r\n  symbol: \"\",\r\n  name: \"\",\r\n  decimals,\r\n  tags: [],\r\n  extensions: props.extensions || {},\r\n  ...props,\r\n});\r\n\r\nexport const toFeeConfig = (\r\n  config?: ReturnType<typeof TransferFeeConfigLayout.decode> | undefined | null,\r\n): ApiV3Token[\"extensions\"][\"feeConfig\"] | undefined =>\r\n  config\r\n    ? {\r\n        ...config,\r\n        transferFeeConfigAuthority: config.transferFeeConfigAuthority.toBase58(),\r\n        withdrawWithheldAuthority: config.withdrawWithheldAuthority.toBase58(),\r\n        withheldAmount: config.withheldAmount.toString(),\r\n        olderTransferFee: {\r\n          ...config.olderTransferFee,\r\n          epoch: config.olderTransferFee.epoch.toString(),\r\n          maximumFee: config.olderTransferFee.maximumFee.toString(),\r\n        },\r\n        newerTransferFee: {\r\n          ...config.newerTransferFee,\r\n          epoch: config.newerTransferFee.epoch.toString(),\r\n          maximumFee: config.newerTransferFee.maximumFee.toString(),\r\n        },\r\n      }\r\n    : undefined;\r\n","import { Keypair, PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger, Logger } from \"../common/logger\";\r\nimport { TxBuilder } from \"../common/txTool/txTool\";\r\n\r\nimport { Raydium } from \"./\";\r\nimport { Owner } from \"@/common\";\r\n\r\nexport interface ModuleBaseProps {\r\n  scope: Raydium;\r\n  moduleName: string;\r\n}\r\n\r\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\r\n  args\r\n    .map((arg) => {\r\n      try {\r\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\r\n      } catch {\r\n        return arg;\r\n      }\r\n    })\r\n    .join(\", \");\r\nexport default class ModuleBase {\r\n  public scope: Raydium;\r\n  private disabled = false;\r\n  protected logger: Logger;\r\n\r\n  constructor({ scope, moduleName }: ModuleBaseProps) {\r\n    this.scope = scope;\r\n    this.logger = createLogger(moduleName);\r\n  }\r\n\r\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\r\n    this.scope.checkOwner();\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer || this.scope.ownerPubKey,\r\n      cluster: this.scope.cluster,\r\n      owner: this.scope.owner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      loopMultiTxStatus: this.scope.loopMultiTxStatus,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  protected createSniperTxBuilder(owner: Keypair, feePayer: PublicKey): TxBuilder {\r\n    const sniperOwner = new Owner(owner);\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer,\r\n      cluster: this.scope.cluster,\r\n      owner: sniperOwner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      loopMultiTxStatus: this.scope.loopMultiTxStatus,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.debug(joinMsg(args));\r\n  }\r\n\r\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.info(joinMsg(args));\r\n  }\r\n\r\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\r\n    const message = joinMsg(args);\r\n    throw new Error(message);\r\n  }\r\n\r\n  public checkDisabled(): void {\r\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\r\n  }\r\n}\r\n","import { Connection, Keypair, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token, ClmmKeys } from \"@/api/type\";\r\nimport {\r\n  InstructionType,\r\n  MEMO_PROGRAM_ID,\r\n  MEMO_PROGRAM_ID2,\r\n  METADATA_PROGRAM_ID,\r\n  RENT_PROGRAM_ID,\r\n  createLogger,\r\n  getATAAddress,\r\n  parseBigNumberish,\r\n} from \"@/common\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { bool, s32, struct, u128, u64, u8 } from \"@/marshmallow\";\r\nimport { ClmmPositionLayout, ObservationInfoLayout } from \"./layout\";\r\nimport {\r\n  ClmmPoolPersonalPosition,\r\n  ClosePositionExtInfo,\r\n  InitRewardExtInfo,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport {\r\n  getPdaExBitmapAccount,\r\n  getPdaLockPositionId,\r\n  getPdaMetadataKey,\r\n  getPdaObservationAccount,\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaPoolId,\r\n  getPdaPoolRewardVaulId,\r\n  getPdaPoolVaultId,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaTickArrayAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\nimport { ZERO } from \"./utils/constants\";\r\nObservationInfoLayout.span; // do not delete this line\r\n\r\nconst logger = createLogger(\"Raydium_Clmm\");\r\n\r\nconst anchorDataBuf = {\r\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\r\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\r\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\r\n  openPosition: [77, 184, 74, 214, 112, 86, 241, 199],\r\n  openPositionWithTokenEx: [77, 255, 174, 82, 125, 29, 201, 46],\r\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\r\n  increaseLiquidity: [133, 29, 89, 223, 69, 238, 176, 10],\r\n  decreaseLiquidity: [58, 127, 188, 62, 79, 82, 196, 96],\r\n  swap: [43, 4, 237, 11, 26, 201, 30, 98], // [248, 198, 158, 145, 225, 117, 135, 200],\r\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\r\n};\r\n\r\nconst lockInsDataBuf = [188, 37, 179, 131, 82, 150, 84, 73];\r\nconst lockHarvestInsDataBuf = [16, 72, 250, 198, 14, 162, 212, 19];\r\n\r\ninterface CreatePoolInstruction {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  ammConfigId: PublicKey;\r\n  initialPriceX64: BN;\r\n  forerunCreate?: boolean;\r\n  extendMintAccount?: PublicKey[];\r\n}\r\n\r\nexport class ClmmInstrument {\r\n  static createPoolInstruction(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    poolCreator: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    observationId: PublicKey,\r\n    mintA: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintProgramIdA: PublicKey,\r\n    mintB: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintProgramIdB: PublicKey,\r\n    exTickArrayBitmap: PublicKey,\r\n    sqrtPriceX64: BN,\r\n    extendMintAccount?: PublicKey[],\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"sqrtPriceX64\"), u64(\"zero\")]);\r\n\r\n    const keys = [\r\n      { pubkey: poolCreator, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n      { pubkey: exTickArrayBitmap, isSigner: false, isWritable: true },\r\n      { pubkey: mintProgramIdA, isSigner: false, isWritable: false },\r\n      { pubkey: mintProgramIdB, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      ...(extendMintAccount?.map((k) => ({ pubkey: k, isSigner: false, isWritable: false })) || []),\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        sqrtPriceX64,\r\n        zero: ZERO,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async createPoolInstructions(props: CreatePoolInstruction): Promise<\r\n    ReturnTypeMakeInstructions<{\r\n      poolId: PublicKey;\r\n      observationId: PublicKey;\r\n      exBitmapAccount: PublicKey;\r\n      mintAVault: PublicKey;\r\n      mintBVault: PublicKey;\r\n    }>\r\n  > {\r\n    const { programId, owner, mintA, mintB, ammConfigId, initialPriceX64, extendMintAccount } = props;\r\n    const [mintAAddress, mintBAddress] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\r\n\r\n    const { publicKey: poolId } = getPdaPoolId(programId, ammConfigId, mintAAddress, mintBAddress);\r\n    const { publicKey: observationId } = getPdaObservationAccount(programId, poolId);\r\n    const { publicKey: mintAVault } = getPdaPoolVaultId(programId, poolId, mintAAddress);\r\n    const { publicKey: mintBVault } = getPdaPoolVaultId(programId, poolId, mintBAddress);\r\n    const exBitmapAccount = getPdaExBitmapAccount(programId, poolId).publicKey;\r\n\r\n    const ins = [\r\n      this.createPoolInstruction(\r\n        programId,\r\n        poolId,\r\n        owner,\r\n        ammConfigId,\r\n        observationId,\r\n        mintAAddress,\r\n        mintAVault,\r\n        new PublicKey(mintA.programId || TOKEN_PROGRAM_ID),\r\n        mintBAddress,\r\n        mintBVault,\r\n        new PublicKey(mintB.programId || TOKEN_PROGRAM_ID),\r\n        exBitmapAccount,\r\n        initialPriceX64,\r\n        extendMintAccount,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.CreateAccount, InstructionType.ClmmCreatePool],\r\n      address: { poolId, observationId, exBitmapAccount, mintAVault, mintBVault },\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      signers,\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n    };\r\n  }\r\n\r\n  static async openPositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromBaseExtInfo>> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromBaseInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromBaseInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromLiquidityExtInfo[\"address\"]>> {\r\n    let nftMintAccount: PublicKey;\r\n    const signers: Keypair[] = [];\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static closePositionInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n    nft2022?: boolean,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([]);\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({}, data);\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static closePositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    ownerPosition,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n    };\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ClosePositionExtInfo[\"address\"]> {\r\n    const programId = new PublicKey(poolInfo.programId);\r\n    // const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    ins.push(\r\n      this.closePositionInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        ownerPosition.nftMint,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        nft2022,\r\n      ),\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        positionNftAccount,\r\n        personalPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmClosePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        optionBaseFlag: 0,\r\n        baseFlag: false,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const ins = this.increasePositionFromLiquidityInstruction(\r\n      programId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(programId, id).publicKey\r\n        : undefined,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPoolPersonalPosition;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [\r\n        this.increasePositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          positionNftAccount,\r\n          personalPosition,\r\n          id,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        ),\r\n      ],\r\n      signers: [],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[],\r\n\r\n    liquidity: BN,\r\n    amountMinA: BN,\r\n    amountMinB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"liquidity\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMinA,\r\n        amountMinB,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMinA,\r\n    amountMinB,\r\n    programId,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n      rewardAccounts: PublicKey[];\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMinA: BN;\r\n    amountMinB: BN;\r\n    programId?: PublicKey;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [poolProgramId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, id, tickArrayUpperStartIndex);\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, programId);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolProgramId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolInfo.rewardDefaultInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: ownerInfo.rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolInfo.rewardDefaultInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    const decreaseIns = this.decreaseLiquidityInstruction(\r\n      poolProgramId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n      rewardAccounts,\r\n\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(poolProgramId, id).publicKey\r\n        : undefined,\r\n    );\r\n    ins.push(decreaseIns);\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static swapInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    inputTokenAccount: PublicKey,\r\n    outputTokenAccount: PublicKey,\r\n    inputVault: PublicKey,\r\n    outputVault: PublicKey,\r\n    inputMint: PublicKey,\r\n    outputMint: PublicKey,\r\n    tickArray: PublicKey[],\r\n    observationId: PublicKey,\r\n\r\n    amount: BN,\r\n    otherAmountThreshold: BN,\r\n    sqrtPriceLimitX64: BN,\r\n    isBaseInput: boolean,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u64(\"amount\"),\r\n      u64(\"otherAmountThreshold\"),\r\n      u128(\"sqrtPriceLimitX64\"),\r\n      bool(\"isBaseInput\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...tickArray.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: false },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: inputVault, isSigner: false, isWritable: true },\r\n      { pubkey: outputVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: inputMint, isSigner: false, isWritable: false },\r\n      { pubkey: outputMint, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        amount,\r\n        otherAmountThreshold,\r\n        sqrtPriceLimitX64,\r\n        isBaseInput,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static makeSwapBaseInInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    inputMint: PublicKey;\r\n\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const isInputMintA = poolInfo.mintA.address === inputMint.toString();\r\n\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n\r\n        isInputMintA ? mintAVault : mintBVault,\r\n        isInputMintA ? mintBVault : mintAVault,\r\n\r\n        isInputMintA ? mintA : mintB,\r\n        isInputMintA ? mintB : mintA,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        true,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseIn],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static makeSwapBaseOutInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    outputMint: PublicKey;\r\n\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n    const isInputMintA = poolInfo.mintA.address === outputMint.toBase58();\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n\r\n        isInputMintA ? mintBVault : mintAVault,\r\n        isInputMintA ? mintAVault : mintBVault,\r\n\r\n        isInputMintA ? mintB : mintA,\r\n        isInputMintA ? mintA : mintB,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        false,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseOut],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static initRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardProgramId: PublicKey,\r\n    rewardMint: PublicKey,\r\n    rewardVault: PublicKey,\r\n\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u64(\"openTime\"), u64(\"endTime\"), u128(\"emissionsPerSecondX64\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: rewardProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n        emissionsPerSecondX64,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static initRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      programId: PublicKey;\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions<InitRewardExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const poolRewardVault = getPdaPoolRewardVaulId(programId, id, rewardInfo.mint).publicKey;\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n    const ins = [\r\n      this.initRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardInfo.programId,\r\n        rewardInfo.mint,\r\n        poolRewardVault,\r\n\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { poolRewardVault, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmInitReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static setRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\"), u128(\"emissionsPerSecondX64\"), u64(\"openTime\"), u64(\"endTime\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: true },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n        emissionsPerSecondX64,\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static setRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    let rewardMint: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardInfo.mint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n        rewardMint = new PublicKey(poolKeys.rewardInfos[index].mint.address);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n\r\n    const ins = [\r\n      this.setRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint!,\r\n\r\n        rewardIndex!,\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault!, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSetReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static collectRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static collectRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardMint,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardMint: PublicKey;\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardMint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const ins = [\r\n      this.collectRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint,\r\n\r\n        rewardIndex!,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault! },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmCollectReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static async makeLockPositions({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    payer,\r\n    wallet,\r\n    nftMint,\r\n    nft2022,\r\n    getEphemeralSigners,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    wallet: PublicKey;\r\n    payer: PublicKey;\r\n    nftMint: PublicKey;\r\n    nft2022?: boolean;\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<ReturnTypeMakeInstructions<ClmmLockAddress>> {\r\n    const signers: Signer[] = [];\r\n    let lockNftMint: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      lockNftMint = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      lockNftMint = _k.publicKey;\r\n    }\r\n\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(wallet, nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(wallet, nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, nftMint);\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(wallet, lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const metadataAccount = getPdaMetadataKey(lockNftMint).publicKey;\r\n\r\n    const ins = ClmmInstrument.lockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      payer,\r\n      positionOwner: wallet,\r\n      lockOwner: wallet,\r\n      positionNftAccount,\r\n      positionId,\r\n      lockPositionId,\r\n      lockNftMint,\r\n      lockNftAccount,\r\n      metadataAccount,\r\n      withMetadata: true,\r\n      nft2022,\r\n\r\n      positionNftMint: nftMint,\r\n      authPositionNftAccount: getATAAddress(authProgramId, nftMint, nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID)\r\n        .publicKey,\r\n      positionNftProgram: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n    });\r\n\r\n    return {\r\n      address: {\r\n        positionId,\r\n        lockPositionId,\r\n        lockNftAccount,\r\n        lockNftMint,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmLockPosition],\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static lockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    payer,\r\n    positionOwner,\r\n    lockOwner,\r\n    positionNftAccount,\r\n    positionId,\r\n    positionNftMint,\r\n    authPositionNftAccount,\r\n    positionNftProgram,\r\n    lockPositionId,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    metadataAccount,\r\n    withMetadata,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    payer: PublicKey;\r\n    positionOwner: PublicKey;\r\n    lockOwner: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    positionNftMint: PublicKey;\r\n    authPositionNftAccount: PublicKey;\r\n    positionNftProgram: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    metadataAccount: PublicKey;\r\n    withMetadata: boolean;\r\n    nft2022?: boolean;\r\n  }): TransactionInstruction {\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionOwner, isSigner: true, isWritable: true },\r\n      { pubkey: lockOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: authPositionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: true },\r\n      { pubkey: lockNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftProgram, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    const dataLayout = struct([bool(\"withMetadata\")]);\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        withMetadata,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...lockInsDataBuf, ...data]);\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static lockPositionInstruction({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    owner,\r\n    positionNft,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    owner: PublicKey;\r\n    positionNft: PublicKey;\r\n  }): TransactionInstruction {\r\n    const { publicKey: nftAccount } = getATAAddress(owner, positionNft, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, positionNft);\r\n\r\n    const keys = [\r\n      { pubkey: authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(programId, positionId).publicKey, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstruction(props: {\r\n    poolKeys: ClmmKeys;\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    ownerPosition: ClmmPositionLayout;\r\n    owner: PublicKey;\r\n    ownerRewardAccounts: PublicKey[];\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n  }): TransactionInstruction {\r\n    const [poolProgramId, poolId] = [new PublicKey(props.poolKeys.programId), new PublicKey(props.poolKeys.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickLower,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickUpper,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayUpperStartIndex);\r\n    const { publicKey: nftAccount } = getATAAddress(props.owner, props.ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, props.ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      poolId,\r\n      props.ownerPosition.tickLower,\r\n      props.ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n\r\n    for (let i = 0; i < props.poolKeys.rewardInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(props.poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: props.ownerRewardAccounts[i],\r\n        rewardMint: new PublicKey(props.poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const remainingAccounts = [\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: props.authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(props.programId, positionId).publicKey, isSigner: false, isWritable: false },\r\n      { pubkey: poolProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: props.owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.A), isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.B), isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintA.address), isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintB.address), isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId: props.programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    lockPositionId,\r\n    clmmProgram,\r\n    lockOwner,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    positionNftAccount,\r\n    positionId,\r\n    poolId,\r\n    protocolPosition,\r\n    vaultA,\r\n    vaultB,\r\n    tickArrayLower,\r\n    tickArrayUpper,\r\n    userVaultA,\r\n    userVaultB,\r\n    mintA,\r\n    mintB,\r\n    rewardAccounts,\r\n    exTickArrayBitmap,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    clmmProgram: PublicKey;\r\n    lockOwner: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    poolId: PublicKey;\r\n    protocolPosition: PublicKey;\r\n    vaultA: PublicKey;\r\n    vaultB: PublicKey;\r\n    tickArrayLower: PublicKey;\r\n    tickArrayUpper: PublicKey;\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n    mintA: PublicKey;\r\n    mintB: PublicKey;\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[];\r\n\r\n    exTickArrayBitmap?: PublicKey;\r\n  }): TransactionInstruction {\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: lockOwner, isSigner: true, isWritable: false },\r\n      // { pubkey: lockNftMint, isSigner: false, isWritable: false },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: false },\r\n      { pubkey: clmmProgram, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: vaultA, isSigner: false, isWritable: true },\r\n      { pubkey: vaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { ClmmPoolInfo } from \"../type\";\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { SqrtPriceMath, TickMath } from \"./math\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { TickArrayBitmapExtensionLayout } from \"../layout\";\r\n\r\nexport const TICK_ARRAY_SIZE = 60;\r\nexport const TICK_ARRAY_BITMAP_SIZE = 512;\r\n\r\nexport interface ReturnTypeGetTickPrice {\r\n  tick: number;\r\n  price: Decimal;\r\n  tickSqrtPriceX64: BN;\r\n}\r\n\r\nexport interface ReturnTypeGetPriceAndTick {\r\n  tick: number;\r\n  price: Decimal;\r\n}\r\n\r\nexport type Tick = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  rewardGrowthsOutsideX64: BN[];\r\n};\r\n\r\nexport type TickArray = {\r\n  address: PublicKey;\r\n  poolId: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: Tick[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport type TickState = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  tickCumulativeOutside: BN;\r\n  secondsPerLiquidityOutsideX64: BN;\r\n  secondsOutside: number;\r\n  rewardGrowthsOutside: BN[];\r\n};\r\n\r\nexport type TickArrayState = {\r\n  ammPool: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: TickState[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport class TickUtils {\r\n  public static getTickArrayAddressByTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n  ): PublicKey {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return tickArrayAddress;\r\n  }\r\n\r\n  public static getTickOffsetInArray(tickIndex: number, tickSpacing: number): number {\r\n    if (tickIndex % tickSpacing != 0) {\r\n      throw new Error(\"tickIndex % tickSpacing not equal 0\");\r\n    }\r\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing);\r\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\r\n      throw new Error(\"tick offset in array overflow\");\r\n    }\r\n    return offsetInArray;\r\n  }\r\n\r\n  public static getTickArrayBitIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = TickQuery.tickCount(tickSpacing);\r\n\r\n    let startIndex: number = tickIndex / ticksInArray;\r\n    if (tickIndex < 0 && tickIndex % ticksInArray != 0) {\r\n      startIndex = Math.ceil(startIndex) - 1;\r\n    } else {\r\n      startIndex = Math.floor(startIndex);\r\n    }\r\n    return startIndex;\r\n  }\r\n\r\n  public static getTickArrayStartIndexByTick(tickIndex: number, tickSpacing: number): number {\r\n    return this.getTickArrayBitIndex(tickIndex, tickSpacing) * TickQuery.tickCount(tickSpacing);\r\n  }\r\n\r\n  public static getTickArrayOffsetInBitmapByTick(tick: number, tickSpacing: number): number {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    return Math.abs(compressed);\r\n  }\r\n\r\n  public static checkTickArrayIsInitialized(\r\n    bitmap: BN,\r\n    tick: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    isInitialized: boolean;\r\n    startIndex: number;\r\n  } {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    const bitPos = Math.abs(compressed);\r\n    return {\r\n      isInitialized: bitmap.testn(bitPos),\r\n      startIndex: (bitPos - 512) * multiplier,\r\n    };\r\n  }\r\n\r\n  public static getNextTickArrayStartIndex(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): number {\r\n    return zeroForOne\r\n      ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE\r\n      : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE;\r\n  }\r\n\r\n  public static mergeTickArrayBitmap(bns: BN[]): BN {\r\n    let b = new BN(0);\r\n    for (let i = 0; i < bns.length; i++) {\r\n      b = b.add(bns[i].shln(64 * i));\r\n    }\r\n    return b;\r\n  }\r\n\r\n  public static getInitializedTickArrayInRange(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    tickSpacing: number,\r\n    tickArrayStartIndex: number,\r\n    expectedCount: number,\r\n  ): number[] {\r\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE));\r\n    return [\r\n      // find right of currenct offset\r\n      ...TickUtils.searchLowBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset - 1,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n\r\n      // find left of current offset\r\n      ...TickUtils.searchHightBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public static getAllInitializedTickArrayStartIndex(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    // find from offset 0 to 1024\r\n    return TickUtils.searchHightBitFromStart(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      -7680,\r\n      TICK_ARRAY_BITMAP_SIZE,\r\n      tickSpacing,\r\n    );\r\n  }\r\n\r\n  public static getAllInitializedTickArrayInfo(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    tickSpacing: number,\r\n  ): {\r\n    tickArrayStartIndex: number;\r\n    tickArrayAddress: PublicKey;\r\n  }[] {\r\n    const result: {\r\n      tickArrayStartIndex: number;\r\n      tickArrayAddress: PublicKey;\r\n    }[] = [];\r\n    const allInitializedTickArrayIndex: number[] = TickUtils.getAllInitializedTickArrayStartIndex(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n    );\r\n    for (const startIndex of allInitializedTickArrayIndex) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n      result.push({\r\n        tickArrayStartIndex: startIndex,\r\n        tickArrayAddress: address,\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static getAllInitializedTickInTickArray(tickArray: TickArrayState): TickState[] {\r\n    return tickArray.ticks.filter((i) => i.liquidityGross.gtn(0));\r\n  }\r\n\r\n  public static searchLowBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex >= -7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex--;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static searchHightBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex < 7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex++;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static checkIsOutOfBoundary(tick: number): boolean {\r\n    return tick < MIN_TICK || tick > MAX_TICK;\r\n  }\r\n\r\n  public static nextInitTick(\r\n    tickArrayCurrent: TickArray,\r\n    currentTickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    t: boolean,\r\n  ): Tick | null {\r\n    const currentTickArrayStartIndex = TickQuery.getArrayStartIndex(currentTickIndex, tickSpacing);\r\n    if (currentTickArrayStartIndex != tickArrayCurrent.startTickIndex) {\r\n      return null;\r\n    }\r\n    let offsetInArray = Math.floor((currentTickIndex - tickArrayCurrent.startTickIndex) / tickSpacing);\r\n\r\n    if (zeroForOne) {\r\n      while (offsetInArray >= 0) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray - 1;\r\n      }\r\n    } else {\r\n      if (!t) offsetInArray = offsetInArray + 1;\r\n      while (offsetInArray < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray + 1;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static firstInitializedTick(tickArrayCurrent: TickArray, zeroForOne: boolean): Tick {\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n\r\n    throw Error(`firstInitializedTick check error: ${tickArrayCurrent} - ${zeroForOne}`);\r\n  }\r\n\r\n  public static _getTickPriceLegacy({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static _getPriceAndTickLegacy({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.ammConfig.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n\r\n  public static getTickPrice({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static getPriceAndTick({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.config.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nexport const ZERO = new BN(0);\r\nexport const ONE = new BN(1);\r\nexport const NEGATIVE_ONE = new BN(-1);\r\n\r\nexport const Q64 = new BN(1).shln(64);\r\nexport const Q128 = new BN(1).shln(128);\r\n\r\nexport const MaxU64 = Q64.sub(ONE);\r\n\r\nexport const U64Resolution = 64;\r\n\r\nexport const MaxUint128 = Q128.subn(1);\r\n\r\nexport const MIN_TICK = -443636;\r\nexport const MAX_TICK = -MIN_TICK;\r\n\r\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"4295048016\");\r\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"79226673521066979257578248091\");\r\n\r\nexport const MIN_SQRT_PRICE_X64_ADD_ONE: BN = new BN(\"4295048017\");\r\nexport const MAX_SQRT_PRICE_X64_SUB_ONE: BN = new BN(\"79226673521066979257578248090\");\r\n\r\n// export const MIN_TICK_ARRAY_START_INDEX = -307200;\r\n// export const MAX_TICK_ARRAY_START_INDEX = 306600;\r\n\r\nexport const BIT_PRECISION = 16;\r\nexport const LOG_B_2_X32 = \"59543866431248\";\r\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\r\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\r\n\r\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\r\n\r\nexport enum Fee {\r\n  rate_500 = 500, //  500 / 10e6 = 0.0005\r\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\r\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\r\n}\r\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\r\n  [Fee.rate_500]: 10,\r\n  [Fee.rate_3000]: 60,\r\n  [Fee.rate_10000]: 200,\r\n};\r\n\r\nexport const mockCreatePoolInfo = {\r\n  version: 6,\r\n  liquidity: ZERO,\r\n  tickCurrent: 0,\r\n  feeGrowthGlobalX64A: ZERO,\r\n  feeGrowthGlobalX64B: ZERO,\r\n  protocolFeesTokenA: ZERO,\r\n  protocolFeesTokenB: ZERO,\r\n  swapInAmountTokenA: ZERO,\r\n  swapOutAmountTokenB: ZERO,\r\n  swapInAmountTokenB: ZERO,\r\n  swapOutAmountTokenA: ZERO,\r\n  tickArrayBitmap: [],\r\n\r\n  rewardInfos: [],\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  tvl: 0,\r\n};\r\n\r\nexport const mockV3CreatePoolInfo = {\r\n  tvl: 0,\r\n  volumeQuote: 0,\r\n  mintAmountA: 0,\r\n  mintAmountB: 0,\r\n  rewardDefaultInfos: [],\r\n  farmUpcomingCount: 0,\r\n  farmOngoingCount: 0,\r\n  farmFinishedCount: 0,\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  pooltype: [],\r\n};\r\n\r\nexport const U64_IGNORE_RANGE = new BN(\"18446744073700000000\");\r\n","import { EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common/transfer\";\r\nimport { ReturnTypeGetLiquidityAmountOut } from \"../type\";\r\nimport {\r\n  BIT_PRECISION,\r\n  Fee,\r\n  FEE_RATE_DENOMINATOR,\r\n  LOG_B_2_X32,\r\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\r\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\r\n  MAX_SQRT_PRICE_X64,\r\n  MAX_TICK,\r\n  MaxU64,\r\n  MaxUint128,\r\n  MIN_SQRT_PRICE_X64,\r\n  MIN_TICK,\r\n  NEGATIVE_ONE,\r\n  ONE,\r\n  Q128,\r\n  Q64,\r\n  U64Resolution,\r\n  ZERO,\r\n} from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { PoolUtils } from \"./pool\";\r\nimport { Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { TickArrayBitmapExtensionLayout } from \"../layout\";\r\n\r\nexport class MathUtil {\r\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\r\n    const numerator = a.mul(b);\r\n    let result = numerator.div(denominator);\r\n    if (!numerator.mod(denominator).eq(ZERO)) {\r\n      result = result.add(ONE);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    return a.mul(b).div(denominator);\r\n  }\r\n\r\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    const numerator = a.mul(b).add(denominator.sub(ONE));\r\n    return numerator.div(denominator);\r\n  }\r\n\r\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\r\n    return new Decimal(num.toString()).div(Decimal.pow(2, 64)).toDecimalPlaces(decimalPlaces);\r\n  }\r\n\r\n  public static decimalToX64(num: Decimal): BN {\r\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\r\n  }\r\n\r\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\r\n    return n0.add(Q128).sub(n1).mod(Q128);\r\n  }\r\n}\r\n\r\n// sqrt price math\r\nfunction mulRightShift(val: BN, mulBy: BN): BN {\r\n  return signedRightShift(val.mul(mulBy), 64, 256);\r\n}\r\n\r\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\r\n  twosN0.imaskn(bitWidth + 1);\r\n  return twosN0.fromTwos(bitWidth);\r\n}\r\n\r\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\r\n  twoN0.imaskn(bitWidth - shiftBy + 1);\r\n  return twoN0.fromTwos(bitWidth - shiftBy);\r\n}\r\n\r\nexport class SqrtPriceMath {\r\n  public static sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\r\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\r\n      .pow(2)\r\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\r\n  }\r\n\r\n  public static priceToSqrtPriceX64(price: Decimal, decimalsA: number, decimalsB: number): BN {\r\n    return MathUtil.decimalToX64(price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt());\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromInput(sqrtPriceX64: BN, liquidity: BN, amountIn: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountIn, true)\r\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountIn, true);\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromOutput(sqrtPriceX64: BN, liquidity: BN, amountOut: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountOut, false)\r\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountOut, false);\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    if (amount.eq(ZERO)) return sqrtPriceX64;\r\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\r\n\r\n    if (add) {\r\n      const numerator1 = liquidityLeftShift;\r\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\r\n      if (denominator.gte(numerator1)) {\r\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\r\n      }\r\n      return MathUtil.mulDivRoundingUp(numerator1, ONE, numerator1.div(sqrtPriceX64).add(amount));\r\n    } else {\r\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\r\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\");\r\n      }\r\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\r\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\r\n    }\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    const deltaY = amount.shln(U64Resolution);\r\n    if (add) {\r\n      return sqrtPriceX64.add(deltaY.div(liquidity));\r\n    } else {\r\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(deltaY, ONE, liquidity);\r\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\");\r\n      }\r\n      return sqrtPriceX64.sub(amountDivLiquidity);\r\n    }\r\n  }\r\n\r\n  public static getSqrtPriceX64FromTick(tick: number): BN {\r\n    if (!Number.isInteger(tick)) {\r\n      throw new Error(\"tick must be integer\");\r\n    }\r\n    if (tick < MIN_TICK || tick > MAX_TICK) {\r\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\r\n    }\r\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\r\n\r\n    let ratio: BN = (tickAbs & 0x1) != 0 ? new BN(\"18445821805675395072\") : new BN(\"18446744073709551616\");\r\n    if ((tickAbs & 0x2) != 0) ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\r\n    if ((tickAbs & 0x4) != 0) ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\r\n    if ((tickAbs & 0x8) != 0) ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\r\n    if ((tickAbs & 0x10) != 0) ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\r\n    if ((tickAbs & 0x20) != 0) ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\r\n    if ((tickAbs & 0x40) != 0) ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\r\n    if ((tickAbs & 0x80) != 0) ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\r\n    if ((tickAbs & 0x100) != 0) ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\r\n    if ((tickAbs & 0x200) != 0) ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\r\n    if ((tickAbs & 0x400) != 0) ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\r\n    if ((tickAbs & 0x800) != 0) ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\r\n    if ((tickAbs & 0x1000) != 0) ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\r\n    if ((tickAbs & 0x2000) != 0) ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\r\n    if ((tickAbs & 0x4000) != 0) ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\r\n    if ((tickAbs & 0x8000) != 0) ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\r\n    if ((tickAbs & 0x10000) != 0) ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\r\n    if ((tickAbs & 0x20000) != 0) ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\r\n    if ((tickAbs & 0x40000) != 0) ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\r\n\r\n    if (tick > 0) ratio = MaxUint128.div(ratio);\r\n    return ratio;\r\n  }\r\n\r\n  public static getTickFromPrice(price: Decimal, decimalsA: number, decimalsB: number): number {\r\n    return SqrtPriceMath.getTickFromSqrtPriceX64(SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB));\r\n  }\r\n\r\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\r\n    if (sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) || sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)) {\r\n      throw new Error(\"Provided sqrtPrice is not within the supported sqrtPrice range.\");\r\n    }\r\n\r\n    const msb = sqrtPriceX64.bitLength() - 1;\r\n    const adjustedMsb = new BN(msb - 64);\r\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\r\n\r\n    let bit = new BN(\"8000000000000000\", \"hex\");\r\n    let precision = 0;\r\n    let log2pFractionX64 = new BN(0);\r\n\r\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\r\n\r\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\r\n      r = r.mul(r);\r\n      const rMoreThanTwo = r.shrn(127);\r\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\r\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\r\n      bit = bit.shrn(1);\r\n      precision += 1;\r\n    }\r\n\r\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\r\n\r\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\r\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\r\n\r\n    const tickLow = signedRightShift(logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)), 64, 128).toNumber();\r\n    const tickHigh = signedRightShift(logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)), 64, 128).toNumber();\r\n\r\n    if (tickLow == tickHigh) {\r\n      return tickLow;\r\n    } else {\r\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh);\r\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow;\r\n    }\r\n  }\r\n}\r\n\r\n// tick math\r\nexport class TickMath {\r\n  public static getTickWithPriceAndTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): number {\r\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\r\n      SqrtPriceMath.priceToSqrtPriceX64(price, mintDecimalsA, mintDecimalsB),\r\n    );\r\n    let result = tick / tickSpacing;\r\n    if (result < 0) {\r\n      result = Math.floor(result);\r\n    } else {\r\n      result = Math.ceil(result);\r\n    }\r\n    return result * tickSpacing;\r\n  }\r\n\r\n  public static roundPriceWithTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): Decimal {\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(price, tickSpacing, mintDecimalsA, mintDecimalsB);\r\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    return SqrtPriceMath.sqrtPriceX64ToPrice(sqrtPriceX64, mintDecimalsA, mintDecimalsB);\r\n  }\r\n}\r\n\r\nexport class LiquidityMath {\r\n  public static addDelta(x: BN, y: BN): BN {\r\n    return x.add(y);\r\n  }\r\n\r\n  public static getTokenAmountAFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    const numerator1 = liquidity.ushln(U64Resolution);\r\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivRoundingUp(MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B), ONE, sqrtPriceX64A)\r\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(sqrtPriceX64A);\r\n  }\r\n\r\n  public static getTokenAmountBFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\r\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountA(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountA: BN, roundUp: boolean): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\r\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n    const result = numerator.div(denominator);\r\n\r\n    if (roundUp) {\r\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\r\n    } else {\r\n      return result.shrn(U64Resolution);\r\n    }\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountB(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountB: BN): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    return MathUtil.mulDivFloor(amountB, MaxU64, sqrtPriceX64B.sub(sqrtPriceX64A));\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmounts(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    amountA: BN,\r\n    amountB: BN,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, amountA, false);\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceCurrentX64, sqrtPriceX64B, amountA, false);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceCurrentX64, amountB);\r\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\r\n    } else {\r\n      return LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, amountB);\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidity(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): { amountA: BN; amountB: BN } {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return {\r\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n        amountB: new BN(0),\r\n      };\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\r\n        sqrtPriceCurrentX64,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\r\n        sqrtPriceX64A,\r\n        sqrtPriceCurrentX64,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      return { amountA, amountB };\r\n    } else {\r\n      return {\r\n        amountA: new BN(0),\r\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n      };\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidityWithSlippage(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    amountMax: boolean,\r\n    roundUp: boolean,\r\n    amountSlippage: number,\r\n  ): { amountSlippageA: BN; amountSlippageB: BN } {\r\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n      sqrtPriceCurrentX64,\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      roundUp,\r\n    );\r\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\r\n\r\n    const amount0Slippage = new BN(new Decimal(amountA.toString()).mul(coefficient).toFixed(0));\r\n    const amount1Slippage = new BN(new Decimal(amountB.toString()).mul(coefficient).toFixed(0));\r\n    return {\r\n      amountSlippageA: amount0Slippage,\r\n      amountSlippageB: amount1Slippage,\r\n    };\r\n  }\r\n\r\n  public static getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n\r\n    epochInfo: EpochInfo;\r\n    amountAddFee: boolean;\r\n  }): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, amountAddFee),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, amountAddFee),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n\r\n// swap math\r\n\r\ntype SwapStep = {\r\n  sqrtPriceX64Next: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n};\r\n\r\nexport interface StepComputations {\r\n  sqrtPriceStartX64: BN;\r\n  tickNext: number;\r\n  initialized: boolean;\r\n  sqrtPriceNextX64: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n}\r\n\r\nexport abstract class SwapMath {\r\n  public static swapCompute(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickArrayBitmap: BN[],\r\n    tickarrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n    zeroForOne: boolean,\r\n    fee: number,\r\n    liquidity: BN,\r\n    currentTick: number,\r\n    tickSpacing: number,\r\n    currentSqrtPriceX64: BN,\r\n    amountSpecified: BN,\r\n    lastSavedTickArrayStartIndex: number,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    amountSpecifiedRemaining: BN;\r\n    amountCalculated: BN;\r\n    feeAmount: BN;\r\n    sqrtPriceX64: BN;\r\n    liquidity: BN;\r\n    tickCurrent: number;\r\n    accounts: PublicKey[];\r\n  } {\r\n    if (amountSpecified.eq(ZERO)) {\r\n      throw new Error(\"amountSpecified must not be 0\");\r\n    }\r\n    if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n    if (zeroForOne) {\r\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n      }\r\n    } else {\r\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than current\");\r\n      }\r\n    }\r\n    const baseInput = amountSpecified.gt(ZERO);\r\n\r\n    const state = {\r\n      amountSpecifiedRemaining: amountSpecified,\r\n      amountCalculated: ZERO,\r\n      sqrtPriceX64: currentSqrtPriceX64,\r\n      tick:\r\n        currentTick > lastSavedTickArrayStartIndex\r\n          ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n          : lastSavedTickArrayStartIndex,\r\n      accounts: [] as PublicKey[],\r\n      liquidity,\r\n      feeAmount: new BN(0),\r\n    };\r\n    let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n    let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n    let loopCount = 0;\r\n    let t = !zeroForOne && tickArrayCurrent.startTickIndex === state.tick;\r\n    while (\r\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n      !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n      // state.tick < MAX_TICK &&\r\n      // state.tick > MIN_TICK\r\n    ) {\r\n      if (loopCount > 10) {\r\n        // throw Error('liquidity limit')\r\n      }\r\n      const step: Partial<StepComputations> = {};\r\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n      const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne, t);\r\n\r\n      let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n      let tickArrayAddress: null | PublicKey = null;\r\n\r\n      if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n        const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n          {\r\n            tickCurrent: state.tick,\r\n            tickSpacing,\r\n            tickArrayBitmap,\r\n            exBitmapInfo: tickarrayBitmapExtension,\r\n          },\r\n          tickAarrayStartIndex,\r\n          zeroForOne,\r\n        );\r\n        if (!nextInitTickArrayIndex.isExist) {\r\n          if (catchLiquidityInsufficient) {\r\n            return {\r\n              allTrade: false,\r\n              amountSpecifiedRemaining: state.amountSpecifiedRemaining,\r\n              amountCalculated: state.amountCalculated,\r\n              feeAmount: state.feeAmount,\r\n              sqrtPriceX64: state.sqrtPriceX64,\r\n              liquidity: state.liquidity,\r\n              tickCurrent: state.tick,\r\n              accounts: state.accounts,\r\n            };\r\n          }\r\n          throw Error(\"swapCompute LiquidityInsufficient\");\r\n        }\r\n        tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n        const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n          programId,\r\n          poolId,\r\n          tickAarrayStartIndex,\r\n        );\r\n        tickArrayAddress = expectedNextTickArrayAddress;\r\n        tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n        try {\r\n          nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n        } catch (e) {\r\n          throw Error(\"not found next tick info\");\r\n        }\r\n      }\r\n\r\n      step.tickNext = nextInitTick.tick;\r\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n      if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n        state.accounts.push(tickArrayAddress);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n      if (step.tickNext < MIN_TICK) {\r\n        step.tickNext = MIN_TICK;\r\n      } else if (step.tickNext > MAX_TICK) {\r\n        step.tickNext = MAX_TICK;\r\n      }\r\n\r\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n      let targetPrice: BN;\r\n      if (\r\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n      ) {\r\n        targetPrice = sqrtPriceLimitX64;\r\n      } else {\r\n        targetPrice = step.sqrtPriceNextX64;\r\n      }\r\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n        state.sqrtPriceX64,\r\n        targetPrice,\r\n        state.liquidity,\r\n        state.amountSpecifiedRemaining,\r\n        fee,\r\n        zeroForOne,\r\n      );\r\n\r\n      state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n      if (baseInput) {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n      } else {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n        state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n      }\r\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n        if (step.initialized) {\r\n          let liquidityNet = nextInitTick.liquidityNet;\r\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n        }\r\n\r\n        t = step.tickNext != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === step.tickNext;\r\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext; //\r\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n        const _T = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n        t = _T != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === _T;\r\n        state.tick = _T;\r\n      }\r\n      ++loopCount;\r\n    }\r\n\r\n    try {\r\n      const { nextStartIndex: tickAarrayStartIndex, isExist } = TickQuery.nextInitializedTickArray(\r\n        state.tick,\r\n        tickSpacing,\r\n        zeroForOne,\r\n        tickArrayBitmap,\r\n        tickarrayBitmapExtension,\r\n      );\r\n      if (isExist && lastSavedTickArrayStartIndex !== tickAarrayStartIndex) {\r\n        state.accounts.push(getPdaTickArrayAddress(programId, poolId, tickAarrayStartIndex).publicKey);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    return {\r\n      allTrade: true,\r\n      amountSpecifiedRemaining: ZERO,\r\n      amountCalculated: state.amountCalculated,\r\n      feeAmount: state.feeAmount,\r\n      sqrtPriceX64: state.sqrtPriceX64,\r\n      liquidity: state.liquidity,\r\n      tickCurrent: state.tick,\r\n      accounts: state.accounts,\r\n    };\r\n  }\r\n  // public static swapCompute(\r\n  //   programId: PublicKey,\r\n  //   poolId: PublicKey,\r\n  //   tickArrayCache: { [key: string]: TickArray },\r\n  //   tickArrayBitmap: BN[],\r\n  //   tickarrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  //   zeroForOne: boolean,\r\n  //   fee: number,\r\n  //   liquidity: BN,\r\n  //   currentTick: number,\r\n  //   tickSpacing: number,\r\n  //   currentSqrtPriceX64: BN,\r\n  //   amountSpecified: BN,\r\n  //   lastSavedTickArrayStartIndex: number,\r\n  //   sqrtPriceLimitX64?: BN,\r\n  // ): {\r\n  //   amountCalculated: BN;\r\n  //   feeAmount: BN;\r\n  //   sqrtPriceX64: BN;\r\n  //   liquidity: BN;\r\n  //   tickCurrent: number;\r\n  //   accounts: PublicKey[];\r\n  // } {\r\n  //   if (amountSpecified.eq(ZERO)) {\r\n  //     throw new Error(\"amountSpecified must not be 0\");\r\n  //   }\r\n  //   if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n  //   if (zeroForOne) {\r\n  //     if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n  //     }\r\n  //   } else {\r\n  //     if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than current\");\r\n  //     }\r\n  //   }\r\n  //   const baseInput = amountSpecified.gt(ZERO);\r\n\r\n  //   const state = {\r\n  //     amountSpecifiedRemaining: amountSpecified,\r\n  //     amountCalculated: ZERO,\r\n  //     sqrtPriceX64: currentSqrtPriceX64,\r\n  //     tick:\r\n  //       currentTick > lastSavedTickArrayStartIndex\r\n  //         ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n  //         : lastSavedTickArrayStartIndex,\r\n  //     accounts: [] as PublicKey[],\r\n  //     liquidity,\r\n  //     feeAmount: new BN(0),\r\n  //   };\r\n  //   let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n  //   let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n  //   let loopCount = 0;\r\n  //   while (\r\n  //     !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n  //     !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n  //     // state.tick < MAX_TICK &&\r\n  //     // state.tick > MIN_TICK\r\n  //   ) {\r\n  //     if (loopCount > 10) {\r\n  //       throw Error(\"liquidity limit\");\r\n  //     }\r\n  //     const step: Partial<StepComputations> = {};\r\n  //     step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n  //     const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne);\r\n\r\n  //     let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n  //     let tickArrayAddress: PublicKey | null = null;\r\n\r\n  //     if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n  //       const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n  //         {\r\n  //           tickCurrent: state.tick,\r\n  //           tickSpacing,\r\n  //           tickArrayBitmap,\r\n  //           exBitmapInfo: tickarrayBitmapExtension,\r\n  //         },\r\n  //         tickAarrayStartIndex,\r\n  //         zeroForOne,\r\n  //       );\r\n  //       if (!nextInitTickArrayIndex.isExist) {\r\n  //         throw Error(\"swapCompute LiquidityInsufficient\");\r\n  //       }\r\n  //       tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n  //       const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n  //         programId,\r\n  //         poolId,\r\n  //         tickAarrayStartIndex,\r\n  //       );\r\n  //       tickArrayAddress = expectedNextTickArrayAddress;\r\n  //       tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n  //       nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n  //     }\r\n\r\n  //     step.tickNext = nextInitTick.tick;\r\n  //     step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n  //     if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n  //       state.accounts.push(tickArrayAddress);\r\n  //       lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //     }\r\n  //     if (step.tickNext < MIN_TICK) {\r\n  //       step.tickNext = MIN_TICK;\r\n  //     } else if (step.tickNext > MAX_TICK) {\r\n  //       step.tickNext = MAX_TICK;\r\n  //     }\r\n\r\n  //     step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n  //     let targetPrice: BN;\r\n  //     if (\r\n  //       (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n  //       (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n  //     ) {\r\n  //       targetPrice = sqrtPriceLimitX64;\r\n  //     } else {\r\n  //       targetPrice = step.sqrtPriceNextX64;\r\n  //     }\r\n  //     [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n  //       state.sqrtPriceX64,\r\n  //       targetPrice,\r\n  //       state.liquidity,\r\n  //       state.amountSpecifiedRemaining,\r\n  //       fee,\r\n  //     );\r\n\r\n  //     state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n  //     if (baseInput) {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n  //       state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n  //     } else {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n  //       state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n  //     }\r\n  //     if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n  //       if (step.initialized) {\r\n  //         let liquidityNet = nextInitTick.liquidityNet;\r\n  //         if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n  //         state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n  //       }\r\n  //       state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\r\n  //     } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n  //       state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n  //     }\r\n  //     ++loopCount;\r\n  //   }\r\n\r\n  //   // try {\r\n  //   //   console.log('state.tick', state.tick)\r\n  //   //   const { nextStartIndex: tickAarrayStartIndex } = TickQuery.nextInitializedTickArray(\r\n  //   //     state.tick,\r\n  //   //     tickSpacing,\r\n  //   //     zeroForOne,\r\n  //   //     tickArrayBitmap,\r\n  //   //     tickarrayBitmapExtension,\r\n  //   //   );\r\n  //   //   if (\r\n  //   //     lastSavedTickArrayStartIndex !== tickAarrayStartIndex\r\n  //   //   ) {\r\n  //   //     state.accounts.push(getPdaTickArrayAddress(\r\n  //   //       programId,\r\n  //   //       poolId,\r\n  //   //       tickAarrayStartIndex,\r\n  //   //     ).publicKey)\r\n  //   //     lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //   //   }\r\n  //   // } catch (e) { /* empty */ }\r\n\r\n  //   return {\r\n  //     amountCalculated: state.amountCalculated,\r\n  //     feeAmount: state.feeAmount,\r\n  //     sqrtPriceX64: state.sqrtPriceX64,\r\n  //     liquidity: state.liquidity,\r\n  //     tickCurrent: state.tick,\r\n  //     accounts: state.accounts,\r\n  //   };\r\n  // }\r\n\r\n  private static swapStepCompute(\r\n    sqrtPriceX64Current: BN,\r\n    sqrtPriceX64Target: BN,\r\n    liquidity: BN,\r\n    amountRemaining: BN,\r\n    feeRate: Fee,\r\n    zeroForOne: boolean,\r\n  ): [BN, BN, BN, BN] {\r\n    const swapStep: SwapStep = {\r\n      sqrtPriceX64Next: new BN(0),\r\n      amountIn: new BN(0),\r\n      amountOut: new BN(0),\r\n      feeAmount: new BN(0),\r\n    };\r\n\r\n    const baseInput = amountRemaining.gte(ZERO);\r\n\r\n    if (baseInput) {\r\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\r\n        amountRemaining,\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\r\n        FEE_RATE_DENOMINATOR,\r\n      );\r\n      swapStep.amountIn = zeroForOne\r\n        ? LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, true)\r\n        : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, true);\r\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemainingSubtractFee,\r\n          zeroForOne,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountOut = zeroForOne\r\n        ? LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, false)\r\n        : LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, false);\r\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemaining.mul(NEGATIVE_ONE),\r\n          zeroForOne,\r\n        );\r\n      }\r\n    }\r\n\r\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\r\n\r\n    if (zeroForOne) {\r\n      if (!(reachTargetPrice && baseInput)) {\r\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          true,\r\n        );\r\n      }\r\n\r\n      if (!(reachTargetPrice && !baseInput)) {\r\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          false,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountIn =\r\n        reachTargetPrice && baseInput\r\n          ? swapStep.amountIn\r\n          : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, swapStep.sqrtPriceX64Next, liquidity, true);\r\n      swapStep.amountOut =\r\n        reachTargetPrice && !baseInput\r\n          ? swapStep.amountOut\r\n          : LiquidityMath.getTokenAmountAFromLiquidity(\r\n              sqrtPriceX64Current,\r\n              swapStep.sqrtPriceX64Next,\r\n              liquidity,\r\n              false,\r\n            );\r\n    }\r\n\r\n    if (!baseInput && swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))) {\r\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\r\n    }\r\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\r\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\r\n    } else {\r\n      swapStep.feeAmount = MathUtil.mulDivCeil(\r\n        swapStep.amountIn,\r\n        new BN(feeRate),\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate)),\r\n      );\r\n    }\r\n    return [swapStep.sqrtPriceX64Next, swapStep.amountIn, swapStep.amountOut, swapStep.feeAmount];\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nexport function u16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setUint16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function i16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setInt16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function u32ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(4);\r\n  const view = new DataView(arr);\r\n  view.setUint32(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function i32ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(4);\r\n  const view = new DataView(arr);\r\n  view.setInt32(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function leadingZeros(bitNum: number, data: BN): number {\r\n  let i = 0;\r\n  for (let j = bitNum - 1; j >= 0; j--) {\r\n    if (!data.testn(j)) {\r\n      i++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nexport function trailingZeros(bitNum: number, data: BN) {\r\n  let i = 0;\r\n  for (let j = 0; j < bitNum; j++) {\r\n    if (!data.testn(j)) {\r\n      i++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nexport function isZero(bitNum: number, data: BN): boolean {\r\n  for (let i = 0; i < bitNum; i++) {\r\n    if (data.testn(i)) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function mostSignificantBit(bitNum: number, data: BN): number | null {\r\n  if (isZero(bitNum, data)) return null;\r\n  else return leadingZeros(bitNum, data);\r\n}\r\n\r\nexport function leastSignificantBit(bitNum: number, data: BN): number | null {\r\n  if (isZero(bitNum, data)) return null;\r\n  else return trailingZeros(bitNum, data);\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { findProgramAddress, METADATA_PROGRAM_ID } from \"../../../common\";\r\n\r\nimport { i32ToBytes, u16ToBytes } from \"./util\";\r\n\r\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\r\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\r\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\r\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\r\nexport const POOL_TICK_ARRAY_BITMAP_SEED = Buffer.from(\"pool_tick_array_bitmap_extension\", \"utf8\");\r\nexport const OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\r\n\r\nexport function getPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolVaultId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  vaultMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolRewardVaulId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  rewardMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaTickArrayAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  startIndex: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)], programId);\r\n}\r\n\r\nexport function getPdaProtocolPositionAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  tickLower: number,\r\n  tickUpper: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [POSITION_SEED, poolId.toBuffer(), i32ToBytes(tickLower), i32ToBytes(tickUpper)],\r\n    programId,\r\n  );\r\n}\r\n\r\nexport function getPdaPersonalPositionAddress(\r\n  programId: PublicKey,\r\n  nftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POSITION_SEED, nftMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaMetadataKey(mint: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [Buffer.from(\"metadata\", \"utf8\"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    METADATA_PROGRAM_ID,\r\n  );\r\n}\r\n\r\nexport function getPdaOperationAccount(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OPERATION_SEED], programId);\r\n}\r\n\r\nexport function getPdaExBitmapAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_TICK_ARRAY_BITMAP_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaObservationAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport const POOL_LOCK_ID_SEED = Buffer.from(\"locked_position\", \"utf8\");\r\nexport function getPdaLockPositionId(\r\n  programId: PublicKey,\r\n  positionId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, positionId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLockClPositionIdV2(\r\n  programId: PublicKey,\r\n  lockNftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, lockNftMint.toBuffer()], programId);\r\n}\r\n\r\nexport const SUPPORT_MINT_SEED = Buffer.from(\"support_mint\", \"utf8\");\r\nexport function getPdaMintExAccount(\r\n  programId: PublicKey,\r\n  mintAddress: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([SUPPORT_MINT_SEED, mintAddress.toBuffer()], programId);\r\n}\r\n","import { Connection, EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  ClmmPoolInfo,\r\n  ClmmPoolRewardInfo,\r\n  ComputeClmmPoolInfo,\r\n  ReturnTypeComputeAmountOut,\r\n  ReturnTypeComputeAmountOutBaseOut,\r\n  ReturnTypeComputeAmountOutFormat,\r\n  ReturnTypeFetchExBitmaps,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  ReturnTypeGetLiquidityAmountOut,\r\n  SDKParsedConcentratedInfo,\r\n} from \"../type\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token } from \"@/api/type\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport {\r\n  getMultipleAccountsInfo,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getTransferAmountFeeV2,\r\n  minExpirationTime,\r\n  solToWSol,\r\n} from \"@/common\";\r\nimport { Percent, Price, Token, TokenAmount } from \"@/module\";\r\nimport { TokenAccountRaw } from \"@/raydium/account/types\";\r\nimport {\r\n  PoolInfoLayout,\r\n  PositionInfoLayout,\r\n  RewardInfo,\r\n  TickArrayBitmapExtensionLayout,\r\n  TickArrayLayout,\r\n} from \"../layout\";\r\nimport { MAX_SQRT_PRICE_X64, MAX_TICK, MIN_SQRT_PRICE_X64, MIN_TICK, NEGATIVE_ONE, Q64, ZERO } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath, SwapMath } from \"./math\";\r\nimport { getPdaExBitmapAccount, getPdaPersonalPositionAddress, getPdaTickArrayAddress } from \"./pda\";\r\nimport { PositionUtils } from \"./position\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickArrayBitmap, TickArrayBitmapExtensionUtils } from \"./tickarrayBitmap\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class PoolUtils {\r\n  public static getOutputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    inputTokenMint: PublicKey,\r\n    inputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    expectedAmountOut: BN;\r\n    remainingAccounts: PublicKey[];\r\n    executionPrice: BN;\r\n    feeAmount: BN;\r\n  } {\r\n    const zeroForOne = inputTokenMint.toBase58() === poolInfo.mintA.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    // try {\r\n    //   const preTick = this.preInitializedTickArrayStartIndex(poolInfo, !zeroForOne)\r\n    //   if (preTick.isExist) {\r\n    //     const { publicKey: address } = getPdaTickArrayAddress(\r\n    //       poolInfo.programId,\r\n    //       poolInfo.id,\r\n    //       preTick.nextStartIndex\r\n    //     );\r\n    //     allNeededAccounts.push(address)\r\n    //   }\r\n    // } catch (e) { /* empty */ }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      allTrade,\r\n      amountCalculated: outputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      inputAmount,\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return {\r\n      allTrade,\r\n      expectedAmountOut: outputAmount.mul(NEGATIVE_ONE),\r\n      remainingAccounts: allNeededAccounts,\r\n      executionPrice,\r\n      feeAmount,\r\n    };\r\n  }\r\n\r\n  public static getInputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    outputTokenMint: PublicKey,\r\n    outputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n  ): { expectedAmountIn: BN; remainingAccounts: PublicKey[]; executionPrice: BN; feeAmount: BN } {\r\n    const zeroForOne = outputTokenMint.toBase58() === poolInfo.mintB.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    try {\r\n      const preTick = this.preInitializedTickArrayStartIndex(poolInfo, zeroForOne);\r\n      if (preTick.isExist) {\r\n        const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, preTick.nextStartIndex);\r\n        allNeededAccounts.push(address);\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      amountCalculated: inputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      outputAmount.mul(NEGATIVE_ONE),\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return { expectedAmountIn: inputAmount, remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\r\n  }\r\n\r\n  public static getFirstInitializedTickArray(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ):\r\n    | { isExist: true; startIndex: number; nextAccountMeta: PublicKey }\r\n    | { isExist: false; startIndex: undefined; nextAccountMeta: undefined } {\r\n    const { isInitialized, startIndex } = PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.tickSpacing, [\r\n      poolInfo.tickCurrent,\r\n    ])\r\n      ? TickArrayBitmapExtensionUtils.checkTickArrayIsInit(\r\n          TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n          poolInfo.tickSpacing,\r\n          poolInfo.exBitmapInfo,\r\n        )\r\n      : TickUtils.checkTickArrayIsInitialized(\r\n          TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n          poolInfo.tickCurrent,\r\n          poolInfo.tickSpacing,\r\n        );\r\n\r\n    if (isInitialized) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, startIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(\r\n      poolInfo,\r\n      TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n      zeroForOne,\r\n    );\r\n    if (isExist) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, nextStartIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex: nextStartIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined };\r\n  }\r\n\r\n  public static preInitializedTickArrayStartIndex(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    const currentOffset = Math.floor(poolInfo.tickCurrent / TickQuery.tickCount(poolInfo.tickSpacing));\r\n\r\n    const result: number[] = !zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(\r\n          poolInfo.tickArrayBitmap,\r\n          poolInfo.exBitmapInfo,\r\n          currentOffset - 1,\r\n          1,\r\n          poolInfo.tickSpacing,\r\n        )\r\n      : TickUtils.searchHightBitFromStart(\r\n          poolInfo.tickArrayBitmap,\r\n          poolInfo.exBitmapInfo,\r\n          currentOffset + 1,\r\n          1,\r\n          poolInfo.tickSpacing,\r\n        );\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    poolInfo:\r\n      | {\r\n          tickCurrent: number;\r\n          tickSpacing: number;\r\n          tickArrayBitmap: BN[];\r\n          exBitmapInfo: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>;\r\n        }\r\n      | ClmmPoolInfo,\r\n    lastTickArrayStartIndex: number,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    lastTickArrayStartIndex = TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing);\r\n\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const { isInit: startIsInit, tickIndex: startIndex } = TickArrayBitmap.nextInitializedTickArrayStartIndex(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n      );\r\n      if (startIsInit) {\r\n        return { isExist: true, nextStartIndex: startIndex };\r\n      }\r\n      lastTickArrayStartIndex = startIndex;\r\n\r\n      const { isInit, tickIndex } = TickArrayBitmapExtensionUtils.nextInitializedTickArrayFromOneBitmap(\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n        poolInfo.exBitmapInfo,\r\n      );\r\n      if (isInit) return { isExist: true, nextStartIndex: tickIndex };\r\n\r\n      lastTickArrayStartIndex = tickIndex;\r\n\r\n      if (lastTickArrayStartIndex < MIN_TICK || lastTickArrayStartIndex > MAX_TICK)\r\n        return { isExist: false, nextStartIndex: 0 };\r\n    }\r\n\r\n    // const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\r\n    //   poolInfo.tickArrayBitmap\r\n    // );\r\n    // const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\r\n    //   poolInfo.tickCurrent,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n    // const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset - 1,\r\n    //   0,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // ) : TickUtils.searchHightBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset,\r\n    //   1024,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n\r\n    // return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\r\n  }\r\n\r\n  public static async updatePoolRewardInfos({\r\n    connection,\r\n    apiPoolInfo,\r\n    chainTime,\r\n    poolLiquidity,\r\n    rewardInfos,\r\n  }: {\r\n    connection: Connection;\r\n    apiPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n    chainTime: number;\r\n    poolLiquidity: BN;\r\n    rewardInfos: ReturnType<typeof RewardInfo.decode>[];\r\n  }): Promise<ClmmPoolRewardInfo[]> {\r\n    const nRewardInfo: ClmmPoolRewardInfo[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      const _itemReward = rewardInfos[i];\r\n      const apiRewardProgram =\r\n        apiPoolInfo.rewardDefaultInfos[i]?.mint.programId ??\r\n        (await connection.getAccountInfo(_itemReward.tokenMint))?.owner;\r\n      if (apiRewardProgram === undefined) throw Error(\"get new reward mint info error\");\r\n\r\n      const itemReward: ClmmPoolRewardInfo = {\r\n        ..._itemReward,\r\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\r\n        remainingRewards: undefined,\r\n        tokenProgramId: new PublicKey(apiRewardProgram),\r\n      };\r\n\r\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue;\r\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\r\n        nRewardInfo.push(itemReward);\r\n        continue;\r\n      }\r\n\r\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime));\r\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime);\r\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, poolLiquidity);\r\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64);\r\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, Q64);\r\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta);\r\n      nRewardInfo.push({\r\n        ...itemReward,\r\n        rewardGrowthGlobalX64,\r\n        rewardTotalEmissioned,\r\n        lastUpdateTime: latestUpdateTime,\r\n      });\r\n    }\r\n    return nRewardInfo;\r\n  }\r\n\r\n  public static isOverflowDefaultTickarrayBitmap(tickSpacing: number, tickarrayStartIndexs: number[]): boolean {\r\n    const { maxTickBoundary, minTickBoundary } = this.tickRange(tickSpacing);\r\n\r\n    for (const tickIndex of tickarrayStartIndexs) {\r\n      const tickarrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n\r\n      if (tickarrayStartIndex >= maxTickBoundary || tickarrayStartIndex < minTickBoundary) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public static tickRange(tickSpacing: number): {\r\n    maxTickBoundary: number;\r\n    minTickBoundary: number;\r\n  } {\r\n    let maxTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let minTickBoundary = -maxTickBoundary;\r\n\r\n    if (maxTickBoundary > MAX_TICK) {\r\n      maxTickBoundary = TickQuery.getArrayStartIndex(MAX_TICK, tickSpacing) + TickQuery.tickCount(tickSpacing);\r\n    }\r\n    if (minTickBoundary < MIN_TICK) {\r\n      minTickBoundary = TickQuery.getArrayStartIndex(MIN_TICK, tickSpacing);\r\n    }\r\n    return { maxTickBoundary, minTickBoundary };\r\n  }\r\n\r\n  public static get_tick_array_offset(tickarrayStartIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickarrayStartIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n\r\n    return (tickarrayStartIndex / TickQuery.tickCount(tickSpacing)) * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  static async fetchExBitmaps({\r\n    connection,\r\n    exBitmapAddress,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    exBitmapAddress: PublicKey[];\r\n    batchRequest: boolean;\r\n  }): Promise<ReturnTypeFetchExBitmaps> {\r\n    const fetchedBitmapAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n      connection,\r\n      exBitmapAddress.map((i) => ({ pubkey: i })),\r\n      { batchRequest },\r\n    );\r\n\r\n    const returnTypeFetchExBitmaps: ReturnTypeFetchExBitmaps = {};\r\n    for (const item of fetchedBitmapAccount) {\r\n      if (item.accountInfo === null) continue;\r\n\r\n      returnTypeFetchExBitmaps[item.pubkey.toString()] = TickArrayBitmapExtensionLayout.decode(item.accountInfo.data);\r\n    }\r\n    return returnTypeFetchExBitmaps;\r\n  }\r\n\r\n  static async fetchMultiplePoolTickArrays({\r\n    connection,\r\n    poolKeys,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    poolKeys: Omit<ComputeClmmPoolInfo, \"ammConfig\">[];\r\n    batchRequest?: boolean;\r\n  }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\r\n    const tickArraysToPoolId: { [key: string]: PublicKey } = {};\r\n    const tickArrays: { pubkey: PublicKey }[] = [];\r\n    for (const itemPoolInfo of poolKeys) {\r\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n        itemPoolInfo.tickCurrent,\r\n        itemPoolInfo.tickSpacing,\r\n      );\r\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n        itemPoolInfo.tickArrayBitmap,\r\n        itemPoolInfo.exBitmapInfo,\r\n        itemPoolInfo.tickSpacing,\r\n        currentTickArrayStartIndex,\r\n        7,\r\n      );\r\n      for (const itemIndex of startIndexArray) {\r\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\r\n          itemPoolInfo.programId,\r\n          itemPoolInfo.id,\r\n          itemIndex,\r\n        );\r\n        tickArrays.push({ pubkey: tickArrayAddress });\r\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id;\r\n      }\r\n    }\r\n\r\n    const fetchedTickArrays = await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest });\r\n\r\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {};\r\n\r\n    for (const itemAccountInfo of fetchedTickArrays) {\r\n      if (!itemAccountInfo.accountInfo) continue;\r\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()];\r\n      if (!poolId) continue;\r\n      if (tickArrayCache[poolId.toString()] === undefined) tickArrayCache[poolId.toString()] = {};\r\n\r\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data);\r\n\r\n      tickArrayCache[poolId.toString()][accountLayoutData.startTickIndex] = {\r\n        ...accountLayoutData,\r\n        address: itemAccountInfo.pubkey,\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  // deprecated, new api doesn't need\r\n  static async fetchPoolsAccountPosition({\r\n    pools,\r\n    connection,\r\n    ownerInfo,\r\n    batchRequest = false,\r\n    updateOwnerRewardAndFee = true,\r\n  }: {\r\n    pools: SDKParsedConcentratedInfo[];\r\n    connection: Connection;\r\n    ownerInfo: { wallet: PublicKey; tokenAccounts: TokenAccountRaw[] };\r\n    batchRequest?: boolean;\r\n    updateOwnerRewardAndFee?: boolean;\r\n  }): Promise<SDKParsedConcentratedInfo[]> {\r\n    const programIds: PublicKey[] = [];\r\n\r\n    for (let index = 0; index < pools.length; index++) {\r\n      const accountInfo = pools[index];\r\n\r\n      if (accountInfo === null) continue;\r\n\r\n      if (!programIds.find((i) => i.equals(accountInfo.state.programId))) programIds.push(accountInfo.state.programId);\r\n    }\r\n\r\n    if (ownerInfo) {\r\n      const allMint = ownerInfo.tokenAccounts.map((i) => i.accountInfo.mint);\r\n      const allPositionKey: PublicKey[] = [];\r\n      for (const itemMint of allMint) {\r\n        for (const itemProgramId of programIds) {\r\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey);\r\n        }\r\n      }\r\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest });\r\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {};\r\n      for (const itemAccountInfo of positionAccountInfos) {\r\n        if (itemAccountInfo === null) continue;\r\n        // TODO: add check\r\n\r\n        const position = PositionInfoLayout.decode(itemAccountInfo.data);\r\n        const itemPoolId = position.poolId.toString();\r\n        const poolInfoA = pools.find((pool) => pool.state.id.toBase58() === itemPoolId);\r\n        if (poolInfoA === undefined) continue;\r\n\r\n        const poolInfo = poolInfoA.state;\r\n\r\n        const priceLower = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickLower,\r\n          baseIn: true,\r\n        });\r\n        const priceUpper = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickUpper,\r\n          baseIn: true,\r\n        });\r\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n          poolInfo.sqrtPriceX64,\r\n          priceLower.tickSqrtPriceX64,\r\n          priceUpper.tickSqrtPriceX64,\r\n          position.liquidity,\r\n          false,\r\n        );\r\n\r\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())));\r\n\r\n        poolInfoA.positionAccount = [\r\n          ...(poolInfoA.positionAccount ?? []),\r\n          {\r\n            poolId: position.poolId,\r\n            nftMint: position.nftMint,\r\n\r\n            priceLower: priceLower.price,\r\n            priceUpper: priceUpper.price,\r\n            amountA,\r\n            amountB,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper,\r\n            liquidity: position.liquidity,\r\n            feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\r\n            feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\r\n            tokenFeesOwedA: position.tokenFeesOwedA,\r\n            tokenFeesOwedB: position.tokenFeesOwedB,\r\n            rewardInfos: position.rewardInfos.map((i) => ({\r\n              ...i,\r\n              pendingReward: new BN(0),\r\n            })),\r\n\r\n            leverage,\r\n            tokenFeeAmountA: new BN(0),\r\n            tokenFeeAmountB: new BN(0),\r\n          },\r\n        ];\r\n\r\n        const tickArrayLowerAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickLower,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        const tickArrayUpperAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickUpper,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`\r\n        ] = tickArrayLowerAddress;\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`\r\n        ] = tickArrayUpperAddress;\r\n      }\r\n\r\n      if (updateOwnerRewardAndFee) {\r\n        const tickArrayKeys = Object.values(keyToTickArrayAddress);\r\n        const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest });\r\n        const tickArrayLayout = {};\r\n        for (let index = 0; index < tickArrayKeys.length; index++) {\r\n          const tickArrayData = tickArrayDatas[index];\r\n          if (tickArrayData === null) continue;\r\n          const key = tickArrayKeys[index].toString();\r\n          tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data);\r\n        }\r\n\r\n        for (const { state, positionAccount } of pools) {\r\n          if (!positionAccount) continue;\r\n          for (const itemPA of positionAccount) {\r\n            const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`;\r\n            const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`;\r\n            const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()];\r\n            const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()];\r\n            const tickLowerState: Tick =\r\n              tickArrayLower.ticks[TickUtils.getTickOffsetInArray(itemPA.tickLower, state.tickSpacing)];\r\n            const tickUpperState: Tick =\r\n              tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(itemPA.tickUpper, state.tickSpacing)];\r\n            const { tokenFeeAmountA, tokenFeeAmountB } = await PositionUtils.GetPositionFees(\r\n              state,\r\n              itemPA,\r\n              tickLowerState,\r\n              tickUpperState,\r\n            );\r\n            const rewardInfos = await PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState);\r\n            itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(new BN(0)) ? tokenFeeAmountA : new BN(0);\r\n            itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(new BN(0)) ? tokenFeeAmountB : new BN(0);\r\n            for (let i = 0; i < rewardInfos.length; i++) {\r\n              itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(new BN(0)) ? rewardInfos[i] : new BN(0);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return pools;\r\n  }\r\n\r\n  static computeAmountOut({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountIn,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountIn: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n    catchLiquidityInsufficient: boolean;\r\n  }): ReturnTypeComputeAmountOut {\r\n    let sqrtPriceLimitX64: BN;\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const [baseFeeConfig, outFeeConfig] = isBaseIn\r\n      ? [poolInfo.mintA.extensions.feeConfig, poolInfo.mintB.extensions.feeConfig]\r\n      : [poolInfo.mintB.extensions.feeConfig, poolInfo.mintA.extensions.feeConfig];\r\n\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountIn = getTransferAmountFeeV2(amountIn, baseFeeConfig, epochInfo, false);\r\n\r\n    const {\r\n      allTrade,\r\n      expectedAmountOut: _expectedAmountOut,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getOutputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountIn.amount.sub(realAmountIn.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n\r\n    const amountOut = getTransferAmountFeeV2(_expectedAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _minAmountOut = _expectedAmountOut\r\n      .mul(new BN(Math.floor((1 - slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    const minAmountOut = getTransferAmountFeeV2(_minAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime: minExpirationTime(realAmountIn.expirationTime, amountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n      remainingAccounts,\r\n      executionPriceX64: _executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountOutFormat({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    amountIn,\r\n    tokenOut: _tokenOut,\r\n    slippage,\r\n    epochInfo,\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    amountIn: BN;\r\n    tokenOut: ApiV3Token;\r\n    slippage: number;\r\n    epochInfo: EpochInfo;\r\n    catchLiquidityInsufficient?: boolean;\r\n  }): ReturnTypeComputeAmountOutFormat {\r\n    const baseIn = _tokenOut.address === poolInfo.mintB.address;\r\n    const [inputMint, outMint] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n    const [baseToken, outToken] = [\r\n      new Token({\r\n        ...inputMint,\r\n        mint: inputMint.address,\r\n        isToken2022: inputMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n      new Token({\r\n        ...outMint,\r\n        mint: outMint.address,\r\n        isToken2022: outMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n    ];\r\n\r\n    const {\r\n      allTrade,\r\n      realAmountIn: _realAmountIn,\r\n      amountOut: _amountOut,\r\n      minAmountOut: _minAmountOut,\r\n      expirationTime,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    } = PoolUtils.computeAmountOut({\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint: new PublicKey(inputMint.address),\r\n      amountIn,\r\n      slippage,\r\n      epochInfo,\r\n      catchLiquidityInsufficient,\r\n    });\r\n\r\n    const realAmountIn = {\r\n      ..._realAmountIn,\r\n      amount: new TokenAmount(baseToken, _realAmountIn.amount),\r\n      fee: _realAmountIn.fee === undefined ? undefined : new TokenAmount(baseToken, _realAmountIn.fee),\r\n    };\r\n\r\n    const amountOut = {\r\n      ..._amountOut,\r\n      amount: new TokenAmount(outToken, _amountOut.amount),\r\n      fee: _amountOut.fee === undefined ? undefined : new TokenAmount(outToken, _amountOut.fee),\r\n    };\r\n    const minAmountOut = {\r\n      ..._minAmountOut,\r\n      amount: new TokenAmount(outToken, _minAmountOut.amount),\r\n      fee: _minAmountOut.fee === undefined ? undefined : new TokenAmount(outToken, _minAmountOut.fee),\r\n    };\r\n\r\n    const _currentPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: currentPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _executionPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: executionPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _fee = new TokenAmount(baseToken, fee);\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime,\r\n      currentPrice: _currentPrice,\r\n      executionPrice: _executionPrice,\r\n      priceImpact,\r\n      fee: _fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountIn({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountOut,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountOut: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n  }): ReturnTypeComputeAmountOutBaseOut {\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const feeConfigs = {\r\n      [poolInfo.mintA.address]: poolInfo.mintA.extensions.feeConfig,\r\n      [poolInfo.mintB.address]: poolInfo.mintB.extensions.feeConfig,\r\n    };\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = !isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountOut = getTransferAmountFeeV2(amountOut, feeConfigs[baseMint.toString()], epochInfo, true);\r\n\r\n    const {\r\n      expectedAmountIn: _expectedAmountIn,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getInputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountOut.amount.sub(realAmountOut.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n    );\r\n\r\n    const inMint = isBaseIn ? poolInfo.mintB.address : poolInfo.mintA.address;\r\n\r\n    const amountIn = getTransferAmountFeeV2(_expectedAmountIn, feeConfigs[inMint], epochInfo, false);\r\n    // const amountIn = getTransferAmountFee(\r\n    //   _expectedAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _maxAmountIn = _expectedAmountIn\r\n      .mul(new BN(Math.floor((1 + slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    // const maxAmountIn = getTransferAmountFee(\r\n    //   _maxAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n    const maxAmountIn = getTransferAmountFeeV2(_maxAmountIn, feeConfigs[inMint], epochInfo, true);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      amountIn,\r\n      maxAmountIn,\r\n      realAmountOut,\r\n      expirationTime: minExpirationTime(amountIn.expirationTime, realAmountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n\r\n      remainingAccounts,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeMultiplier({\r\n    poolInfo,\r\n    aprType,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprInfo = poolInfo[aprType];\r\n\r\n    const priceLower = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickLowerIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n    const priceUpper = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickUpperIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n\r\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin);\r\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax);\r\n\r\n    const sub = _maxPrice - _minPrice;\r\n\r\n    const userRange = priceUpper - priceLower;\r\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin;\r\n\r\n    let p: number;\r\n\r\n    if (sub <= 0) p = 0;\r\n    else if (userRange === sub) p = tradeRange / sub;\r\n    else if (tradeRange === sub) p = sub / userRange;\r\n    else p = (sub / tradeRange) * (sub / userRange);\r\n\r\n    return {\r\n      feeApr: aprInfo.feeApr * p,\r\n      rewardsApr: [(aprInfo.rewardApr[0] ?? 0) * p, (aprInfo.rewardApr[1] ?? 0) * p, (aprInfo.rewardApr[2] ?? 0) * p],\r\n      apr: aprInfo.apr * p,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeDelta({\r\n    poolInfo,\r\n    poolLiquidity,\r\n    aprType,\r\n    mintPrice,\r\n    liquidity,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n    chainTime,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolLiquidity: BN;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    mintPrice: { [mint: string]: { value: number } };\r\n\r\n    liquidity: BN;\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n\r\n    chainTime: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprTypeDay = aprType === \"day\" ? 1 : aprType === \"week\" ? 7 : aprType === \"month\" ? 30 : 0;\r\n    const aprInfo = poolInfo[aprType];\r\n    const mintPriceA = mintPrice[solToWSol(poolInfo.mintA.address).toString()];\r\n    const mintPriceB = mintPrice[solToWSol(poolInfo.mintB.address).toString()];\r\n    const mintDecimalsA = poolInfo.mintA.decimals;\r\n    const mintDecimalsB = poolInfo.mintB.decimals;\r\n\r\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 };\r\n\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex);\r\n\r\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        poolLiquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const poolTvl = new Decimal(poolLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n    const userTvl = new Decimal(userLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n\r\n    const p = new Decimal(1).div(poolTvl.add(userTvl));\r\n\r\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\r\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\r\n\r\n    const SECONDS_PER_YEAR = 3600 * 24 * 365;\r\n\r\n    const rewardsApr = poolInfo.rewardDefaultInfos.map((i) => {\r\n      const iDecimal = i.mint.decimals;\r\n      const iPrice = mintPrice[i.mint.address];\r\n\r\n      if (\r\n        chainTime < ((i as any).startTime ?? 0) ||\r\n        chainTime > ((i as any).endTime ?? 0) ||\r\n        !i.perSecond ||\r\n        !iPrice ||\r\n        iDecimal === undefined\r\n      )\r\n        return 0;\r\n\r\n      return new Decimal(iPrice.value)\r\n        .mul(new Decimal(i.perSecond).mul(SECONDS_PER_YEAR))\r\n        .div(new Decimal(10).pow(iDecimal))\r\n        .mul(p)\r\n        .mul(100)\r\n        .toNumber();\r\n    });\r\n\r\n    return {\r\n      feeApr,\r\n      rewardsApr,\r\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0),\r\n    };\r\n  }\r\n\r\n  static async getLiquidityAmountOutFromAmountIn({\r\n    poolInfo,\r\n    inputA,\r\n    tickLower,\r\n    tickUpper,\r\n    amount,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountHasFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    inputA: boolean;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n    epochInfo: EpochInfo;\r\n    amountHasFee: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    // const coefficient = add ? 1 - slippage : 1 + slippage;\r\n    const addFeeAmount = getTransferAmountFeeV2(\r\n      amount,\r\n      poolInfo[inputA ? \"mintA\" : \"mintB\"].extensions?.feeConfig,\r\n      epochInfo,\r\n      !amountHasFee,\r\n    );\r\n    const _amount = new BN(\r\n      new Decimal(addFeeAmount.amount.sub(addFeeAmount.fee ?? ZERO).toString()).toFixed(0), // .mul(coefficient).toFixed(0),\r\n    );\r\n\r\n    let liquidity: BN;\r\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\r\n      liquidity = inputA\r\n        ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add)\r\n        : new BN(0);\r\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\r\n      liquidity = inputA ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = inputA\r\n        ? new BN(0)\r\n        : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\r\n    }\r\n\r\n    const amountFromLiquidity = await PoolUtils.getAmountsFromLiquidity({\r\n      epochInfo,\r\n      poolInfo,\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      slippage,\r\n      add,\r\n    });\r\n    return {\r\n      liquidity,\r\n      amountA: inputA ? addFeeAmount : amountFromLiquidity.amountA,\r\n      amountB: inputA ? amountFromLiquidity.amountB : addFeeAmount,\r\n      amountSlippageA: inputA ? addFeeAmount : amountFromLiquidity.amountSlippageA,\r\n      amountSlippageB: inputA ? amountFromLiquidity.amountSlippageB : addFeeAmount,\r\n      expirationTime: amountFromLiquidity.expirationTime,\r\n    };\r\n  }\r\n\r\n  static async getAmountsFromLiquidity({\r\n    epochInfo,\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n  }: {\r\n    epochInfo: EpochInfo;\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(\r\n      SqrtPriceMath.priceToSqrtPriceX64(new Decimal(poolInfo.price), poolInfo.mintA.decimals, poolInfo.mintB.decimals),\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      add,\r\n    );\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        amounts.amountA.muln(coefficientRe),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        amounts.amountB.muln(coefficientRe),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n\r\n  static async fetchComputeMultipleClmmInfo({\r\n    connection,\r\n    poolList,\r\n    rpcDataMap = {},\r\n  }: {\r\n    rpcDataMap?: Record<string, ReturnType<typeof PoolInfoLayout.decode>>;\r\n    connection: Connection;\r\n    poolList: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">[];\r\n  }): Promise<Record<string, ComputeClmmPoolInfo>> {\r\n    const fetchRpcList = poolList.filter((p) => !rpcDataMap[p.id]).map((p) => new PublicKey(p.id));\r\n    const rpcRes = await getMultipleAccountsInfo(connection, fetchRpcList);\r\n    rpcRes.forEach((r, idx) => {\r\n      if (!r) return;\r\n      rpcDataMap[fetchRpcList[idx].toBase58()] = PoolInfoLayout.decode(r.data);\r\n    });\r\n\r\n    const pdaList = poolList.map(\r\n      (poolInfo) => getPdaExBitmapAccount(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n    );\r\n\r\n    const exBitData = await PoolUtils.fetchExBitmaps({\r\n      connection,\r\n      exBitmapAddress: pdaList,\r\n      batchRequest: false,\r\n    });\r\n\r\n    return poolList.reduce(\r\n      (acc, cur) => ({\r\n        ...acc,\r\n        [cur.id]: {\r\n          ...rpcDataMap[cur.id],\r\n          id: new PublicKey(cur.id),\r\n          version: 6,\r\n          programId: new PublicKey(cur.programId),\r\n          mintA: cur.mintA,\r\n          mintB: cur.mintB,\r\n          ammConfig: {\r\n            ...cur.config,\r\n            id: new PublicKey(cur.config.id),\r\n            fundOwner: \"\",\r\n          },\r\n          currentPrice: new Decimal(cur.price),\r\n          exBitmapAccount: getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey,\r\n          exBitmapInfo:\r\n            exBitData[getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey.toBase58()],\r\n          startTime: rpcDataMap[cur.id].startTime.toNumber(),\r\n          rewardInfos: rpcDataMap[cur.id].rewardInfos,\r\n        },\r\n      }),\r\n      {} as Record<string, ComputeClmmPoolInfo>,\r\n    );\r\n  }\r\n\r\n  static async fetchComputeClmmInfo({\r\n    connection,\r\n    poolInfo,\r\n    rpcData,\r\n  }: {\r\n    connection: Connection;\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">;\r\n    rpcData?: ReturnType<typeof PoolInfoLayout.decode>;\r\n  }): Promise<ComputeClmmPoolInfo> {\r\n    return (\r\n      await this.fetchComputeMultipleClmmInfo({\r\n        connection,\r\n        rpcDataMap: rpcData ? { [poolInfo.id]: rpcData } : undefined,\r\n        poolList: [poolInfo],\r\n      })\r\n    )[poolInfo.id];\r\n  }\r\n}\r\n\r\nexport function getLiquidityFromAmounts({\r\n  poolInfo,\r\n  tickLower,\r\n  tickUpper,\r\n  amountA,\r\n  amountB,\r\n  slippage,\r\n  add,\r\n  epochInfo,\r\n  amountHasFee,\r\n}: {\r\n  poolInfo: ApiV3PoolInfoConcentratedItem;\r\n  tickLower: number;\r\n  tickUpper: number;\r\n  amountA: BN;\r\n  amountB: BN;\r\n  slippage: number;\r\n  add: boolean;\r\n  epochInfo: EpochInfo;\r\n  amountHasFee: boolean;\r\n}): ReturnTypeGetLiquidityAmountOut {\r\n  const [_tickLower, _tickUpper, _amountA, _amountB] =\r\n    tickLower < tickUpper ? [tickLower, tickUpper, amountA, amountB] : [tickUpper, tickLower, amountB, amountA];\r\n  const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n    new Decimal(poolInfo.price),\r\n    poolInfo.mintA.decimals,\r\n    poolInfo.mintB.decimals,\r\n  );\r\n  const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(_tickLower);\r\n  const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(_tickUpper);\r\n\r\n  const [amountFeeA, amountFeeB] = [\r\n    getTransferAmountFeeV2(_amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n    getTransferAmountFeeV2(_amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n  ];\r\n\r\n  const liquidity = LiquidityMath.getLiquidityFromTokenAmounts(\r\n    sqrtPriceX64,\r\n    sqrtPriceX64A,\r\n    sqrtPriceX64B,\r\n    amountFeeA.amount.sub(amountFeeA.fee ?? ZERO),\r\n    amountFeeB.amount.sub(amountFeeB.fee ?? ZERO),\r\n  );\r\n\r\n  return LiquidityMath.getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee: !amountHasFee,\r\n  });\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport function clmmComputeInfoToApiInfo(pool: ComputeClmmPoolInfo): ApiV3PoolInfoConcentratedItem {\r\n  return {\r\n    ...pool,\r\n    type: \"Concentrated\",\r\n    programId: pool.programId.toString(),\r\n    id: pool.id.toString(),\r\n    rewardDefaultInfos: [],\r\n    rewardDefaultPoolInfos: \"Clmm\",\r\n    price: pool.currentPrice.toNumber(),\r\n    mintAmountA: 0,\r\n    mintAmountB: 0,\r\n    feeRate: pool.ammConfig.tradeFeeRate,\r\n    openTime: pool.startTime.toString(),\r\n    tvl: 0,\r\n\r\n    day: mockRewardData,\r\n    week: mockRewardData,\r\n    month: mockRewardData,\r\n    pooltype: [],\r\n\r\n    farmUpcomingCount: 0,\r\n    farmOngoingCount: 0,\r\n    farmFinishedCount: 0,\r\n    burnPercent: 0,\r\n    config: {\r\n      ...pool.ammConfig,\r\n      id: pool.ammConfig.id.toString(),\r\n      defaultRange: 0,\r\n      defaultRangePoint: [],\r\n    },\r\n  };\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common\";\r\nimport { ClmmPositionLayout } from \"../layout\";\r\nimport { ClmmPoolInfo, ClmmPoolPersonalPosition, ClmmPoolRewardInfo, GetAmountParams, ReturnTypeGetLiquidityAmountOut } from \"../type\";\r\nimport { Q64 } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath } from \"./math\";\r\nimport { Tick } from \"./tick\";\r\n\r\nexport class PositionUtils {\r\n  static getfeeGrowthInside(\r\n    poolState: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { feeGrowthInsideX64A: BN; feeGrowthInsideBX64: BN } {\r\n    let feeGrowthBelowX64A = new BN(0);\r\n    let feeGrowthBelowX64B = new BN(0);\r\n    if (poolState.tickCurrent >= tickLowerState.tick) {\r\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\r\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(tickLowerState.feeGrowthOutsideX64A);\r\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(tickLowerState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    let feeGrowthAboveX64A = new BN(0);\r\n    let feeGrowthAboveX64B = new BN(0);\r\n    if (poolState.tickCurrent < tickUpperState.tick) {\r\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\r\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(tickUpperState.feeGrowthOutsideX64A);\r\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(tickUpperState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\r\n      feeGrowthAboveX64A,\r\n    );\r\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\r\n      feeGrowthAboveX64B,\r\n    );\r\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\r\n  }\r\n\r\n  static GetPositionFees(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionFeesV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionRewardsV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64B\"> & {\r\n      rewardInfos: { rewardGrowthGlobalX64: BN }[];\r\n    },\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInsideV2(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static GetPositionRewards(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInside(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static getRewardGrowthInside(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: ClmmPoolRewardInfo[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getRewardGrowthInsideV2(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: Pick<ClmmPoolRewardInfo, \"rewardGrowthGlobalX64\">[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getAmountsFromLiquidity({\r\n    poolInfo,\r\n    ownerPosition,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n  }: GetAmountParams): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { getMultipleAccountsInfo } from \"../../../common\";\r\nimport { TickArrayLayout } from \"../layout\";\r\n\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { Tick, TICK_ARRAY_SIZE, TickArray, TickUtils } from \"./tick\";\r\nimport { TickArrayBitmapExtensionLayout } from \"../layout\";\r\n\r\nexport const FETCH_TICKARRAY_COUNT = 15;\r\n\r\nexport declare type PoolVars = {\r\n  key: PublicKey;\r\n  tokenA: PublicKey;\r\n  tokenB: PublicKey;\r\n  fee: number;\r\n};\r\n\r\nexport class TickQuery {\r\n  public static async getTickArrays(\r\n    connection: Connection,\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickCurrent: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapArray: BN[],\r\n    exTickArrayBitmap: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  ): Promise<{ [key: string]: TickArray }> {\r\n    const tickArraysToFetch: PublicKey[] = [];\r\n    const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickCurrent, tickSpacing);\r\n\r\n    const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n      tickArrayBitmapArray,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n      currentTickArrayStartIndex,\r\n      Math.floor(FETCH_TICKARRAY_COUNT / 2),\r\n    );\r\n    for (let i = 0; i < startIndexArray.length; i++) {\r\n      const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndexArray[i]);\r\n      tickArraysToFetch.push(tickArrayAddress);\r\n    }\r\n\r\n    const fetchedTickArrays = (await getMultipleAccountsInfo(connection, tickArraysToFetch)).map((i) =>\r\n      i !== null ? TickArrayLayout.decode(i.data) : null,\r\n    );\r\n\r\n    const tickArrayCache: { [key: string]: TickArray } = {};\r\n    for (let i = 0; i < tickArraysToFetch.length; i++) {\r\n      const _info = fetchedTickArrays[i];\r\n      if (_info === null) continue;\r\n\r\n      tickArrayCache[_info.startTickIndex] = {\r\n        ..._info,\r\n        address: tickArraysToFetch[i],\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  public static nextInitializedTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    nextTick: Tick;\r\n    tickArrayAddress: PublicKey | undefined;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    let {\r\n      initializedTick: nextTick,\r\n      tickArrayAddress,\r\n      tickArrayStartTickIndex,\r\n    } = this.nextInitializedTickInOneArray(programId, poolId, tickArrayCache, tickIndex, tickSpacing, zeroForOne);\r\n    while (nextTick == undefined || nextTick.liquidityGross.lten(0)) {\r\n      tickArrayStartTickIndex = TickUtils.getNextTickArrayStartIndex(tickArrayStartTickIndex, tickSpacing, zeroForOne);\r\n      if (this.checkIsValidStartIndex(tickArrayStartTickIndex, tickSpacing)) {\r\n        throw new Error(\"No enough initialized tickArray\");\r\n      }\r\n      const cachedTickArray = tickArrayCache[tickArrayStartTickIndex];\r\n\r\n      if (cachedTickArray === undefined) continue;\r\n\r\n      const {\r\n        nextTick: _nextTick,\r\n        tickArrayAddress: _tickArrayAddress,\r\n        tickArrayStartTickIndex: _tickArrayStartTickIndex,\r\n      } = this.firstInitializedTickInOneArray(programId, poolId, cachedTickArray, zeroForOne);\r\n      [nextTick, tickArrayAddress, tickArrayStartTickIndex] = [_nextTick, _tickArrayAddress, _tickArrayStartTickIndex];\r\n    }\r\n    if (nextTick == undefined) {\r\n      throw new Error(\"No invaild tickArray cache\");\r\n    }\r\n    return { nextTick, tickArrayAddress, tickArrayStartTickIndex };\r\n  }\r\n\r\n  public static nextInitializedTickArray(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmap: BN[],\r\n    exBitmapInfo: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  ): {\r\n    isExist: boolean;\r\n    nextStartIndex: number;\r\n  } {\r\n    const currentOffset = Math.floor(tickIndex / TickQuery.tickCount(tickSpacing));\r\n    const result: number[] = zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset - 1, 1, tickSpacing)\r\n      : TickUtils.searchHightBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset + 1, 1, tickSpacing);\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static firstInitializedTickInOneArray(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArray: TickArray,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    nextTick: Tick | undefined;\r\n    tickArrayAddress: PublicKey;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    let nextInitializedTick: Tick | undefined = undefined;\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        const tickInArray = tickArray.ticks[i];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        const tickInArray = tickArray.ticks[i];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, tickArray.startTickIndex);\r\n    return { nextTick: nextInitializedTick, tickArrayAddress, tickArrayStartTickIndex: tickArray.startTickIndex };\r\n  }\r\n\r\n  public static nextInitializedTickInOneArray(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    initializedTick: Tick | undefined;\r\n    tickArrayAddress: PublicKey | undefined;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    let tickPositionInArray = Math.floor((tickIndex - startIndex) / tickSpacing);\r\n    const cachedTickArray = tickArrayCache[startIndex];\r\n    if (cachedTickArray == undefined) {\r\n      return {\r\n        initializedTick: undefined,\r\n        tickArrayAddress: undefined,\r\n        tickArrayStartTickIndex: startIndex,\r\n      };\r\n    }\r\n    let nextInitializedTick: Tick | undefined = undefined;\r\n    if (zeroForOne) {\r\n      while (tickPositionInArray >= 0) {\r\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        tickPositionInArray = tickPositionInArray - 1;\r\n      }\r\n    } else {\r\n      tickPositionInArray = tickPositionInArray + 1;\r\n      while (tickPositionInArray < TICK_ARRAY_SIZE) {\r\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        tickPositionInArray = tickPositionInArray + 1;\r\n      }\r\n    }\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return {\r\n      initializedTick: nextInitializedTick,\r\n      tickArrayAddress,\r\n      tickArrayStartTickIndex: cachedTickArray.startTickIndex,\r\n    };\r\n  }\r\n\r\n  public static getArrayStartIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = this.tickCount(tickSpacing);\r\n    const start = Math.floor(tickIndex / ticksInArray);\r\n\r\n    return start * ticksInArray;\r\n  }\r\n\r\n  public static checkIsValidStartIndex(tickIndex: number, tickSpacing: number): boolean {\r\n    if (TickUtils.checkIsOutOfBoundary(tickIndex)) {\r\n      if (tickIndex > MAX_TICK) {\r\n        return false;\r\n      }\r\n      const minStartIndex = TickUtils.getTickArrayStartIndexByTick(MIN_TICK, tickSpacing);\r\n      return tickIndex == minStartIndex;\r\n    }\r\n    return tickIndex % this.tickCount(tickSpacing) == 0;\r\n  }\r\n\r\n  public static tickCount(tickSpacing: number): number {\r\n    return TICK_ARRAY_SIZE * tickSpacing;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, TICK_ARRAY_SIZE, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { isZero, leadingZeros, leastSignificantBit, mostSignificantBit, trailingZeros } from \"./util\";\r\nimport { TickArrayBitmapExtensionLayout } from \"../layout\";\r\n\r\nexport const EXTENSION_TICKARRAY_BITMAP_SIZE = 14;\r\n\r\nexport class TickArrayBitmap {\r\n  public static maxTickInTickarrayBitmap(tickSpacing: number): number {\r\n    return tickSpacing * TICK_ARRAY_SIZE * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  public static getBitmapTickBoundary(\r\n    tickarrayStartIndex: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    minValue: number;\r\n    maxValue: number;\r\n  } {\r\n    const ticksInOneBitmap = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    let m = Math.floor(Math.abs(tickarrayStartIndex) / ticksInOneBitmap);\r\n    if (tickarrayStartIndex < 0 && Math.abs(tickarrayStartIndex) % ticksInOneBitmap != 0) m += 1;\r\n\r\n    const minValue = ticksInOneBitmap * m;\r\n\r\n    return tickarrayStartIndex < 0\r\n      ? { minValue: -minValue, maxValue: -minValue + ticksInOneBitmap }\r\n      : { minValue, maxValue: minValue + ticksInOneBitmap };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    bitMap: BN,\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): { isInit: boolean; tickIndex: number } {\r\n    if (!TickQuery.checkIsValidStartIndex(lastTickArrayStartIndex, tickSpacing))\r\n      throw Error(\"nextInitializedTickArrayStartIndex check error\");\r\n\r\n    const tickBoundary = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - TickQuery.tickCount(tickSpacing)\r\n      : lastTickArrayStartIndex + TickQuery.tickCount(tickSpacing);\r\n\r\n    if (nextTickArrayStartIndex < -tickBoundary || nextTickArrayStartIndex >= tickBoundary) {\r\n      return { isInit: false, tickIndex: lastTickArrayStartIndex };\r\n    }\r\n\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    let compressed = nextTickArrayStartIndex / multiplier + 512;\r\n\r\n    if (nextTickArrayStartIndex < 0 && nextTickArrayStartIndex % multiplier != 0) {\r\n      compressed--;\r\n    }\r\n\r\n    const bitPos = Math.abs(compressed);\r\n\r\n    if (zeroForOne) {\r\n      const offsetBitMap = bitMap.shln(1024 - bitPos - 1);\r\n      const nextBit = mostSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos - nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: -tickBoundary };\r\n      }\r\n    } else {\r\n      const offsetBitMap = bitMap.shrn(bitPos);\r\n      const nextBit = leastSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos + nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: tickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class TickArrayBitmapExtensionUtils {\r\n  public static getBitmapOffset(tickIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n    this.checkExtensionBoundary(tickIndex, tickSpacing);\r\n\r\n    const ticksInOneBitmap = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let offset = Math.floor(Math.abs(tickIndex) / ticksInOneBitmap) - 1;\r\n\r\n    if (tickIndex < 0 && Math.abs(tickIndex) % ticksInOneBitmap === 0) offset--;\r\n    return offset;\r\n  }\r\n\r\n  public static getBitmap(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  ): { offset: number; tickarrayBitmap: BN[] } {\r\n    const offset = this.getBitmapOffset(tickIndex, tickSpacing);\r\n    if (tickIndex < 0) {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.negativeTickArrayBitmap[offset] };\r\n    } else {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.positiveTickArrayBitmap[offset] };\r\n    }\r\n  }\r\n\r\n  public static checkExtensionBoundary(tickIndex: number, tickSpacing: number) {\r\n    const { positiveTickBoundary, negativeTickBoundary } = this.extensionTickBoundary(tickSpacing);\r\n\r\n    if (tickIndex >= negativeTickBoundary && tickIndex < positiveTickBoundary) {\r\n      throw Error(\"checkExtensionBoundary -> InvalidTickArrayBoundary\");\r\n    }\r\n  }\r\n\r\n  public static extensionTickBoundary(tickSpacing: number): {\r\n    positiveTickBoundary: number;\r\n    negativeTickBoundary: number;\r\n  } {\r\n    const positiveTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n\r\n    const negativeTickBoundary = -positiveTickBoundary;\r\n\r\n    if (MAX_TICK <= positiveTickBoundary)\r\n      throw Error(`extensionTickBoundary check error: ${MAX_TICK}, ${positiveTickBoundary}`);\r\n    if (negativeTickBoundary <= MIN_TICK)\r\n      throw Error(`extensionTickBoundary check error: ${negativeTickBoundary}, ${MIN_TICK}`);\r\n\r\n    return { positiveTickBoundary, negativeTickBoundary };\r\n  }\r\n\r\n  public static checkTickArrayIsInit(\r\n    tickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  ): { isInitialized: boolean; startIndex: number } {\r\n    const { tickarrayBitmap } = this.getBitmap(tickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(tickArrayStartIndex, tickSpacing);\r\n\r\n    return {\r\n      isInitialized: TickUtils.mergeTickArrayBitmap(tickarrayBitmap).testn(tickArrayOffsetInBitmap),\r\n      startIndex: tickArrayStartIndex,\r\n    };\r\n  }\r\n\r\n  public static nextInitializedTickArrayFromOneBitmap(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmapExtension: ReturnType<typeof TickArrayBitmapExtensionLayout.decode>,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const multiplier = TickQuery.tickCount(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - multiplier\r\n      : lastTickArrayStartIndex + multiplier;\r\n    const { tickarrayBitmap } = this.getBitmap(nextTickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    return this.nextInitializedTickArrayInBitmap(tickarrayBitmap, nextTickArrayStartIndex, tickSpacing, zeroForOne);\r\n  }\r\n\r\n  public static nextInitializedTickArrayInBitmap(\r\n    tickarrayBitmap: BN[],\r\n    nextTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const { minValue: bitmapMinTickBoundary, maxValue: bitmapMaxTickBoundary } = TickArrayBitmap.getBitmapTickBoundary(\r\n      nextTickArrayStartIndex,\r\n      tickSpacing,\r\n    );\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(nextTickArrayStartIndex, tickSpacing);\r\n    if (zeroForOne) {\r\n      // tick from upper to lower\r\n      // find from highter bits to lower bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shln(\r\n        TICK_ARRAY_BITMAP_SIZE - 1 - tickArrayOffsetInBitmap,\r\n      );\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : leadingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex - nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMinTickBoundary };\r\n      }\r\n    } else {\r\n      // tick from lower to upper\r\n      // find from lower bits to highter bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shrn(tickArrayOffsetInBitmap);\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : trailingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex + nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMaxTickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n\r\n  public static tickArrayOffsetInBitmap(tickArrayStartIndex: number, tickSpacing: number): number {\r\n    const m = Math.abs(tickArrayStartIndex) % TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let tickArrayOffsetInBitmap = Math.floor(m / TickQuery.tickCount(tickSpacing));\r\n    if (tickArrayStartIndex < 0 && m != 0) {\r\n      tickArrayOffsetInBitmap = TICK_ARRAY_BITMAP_SIZE - tickArrayOffsetInBitmap;\r\n    }\r\n    return tickArrayOffsetInBitmap;\r\n  }\r\n}\r\n","import { blob, bool, i128, i64, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\r\nimport { EXTENSION_TICKARRAY_BITMAP_SIZE } from \"./utils/tickarrayBitmap\";\r\n\r\nexport const ClmmConfigLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  u16(\"index\"),\r\n  publicKey(\"\"),\r\n  u32(\"protocolFeeRate\"),\r\n  u32(\"tradeFeeRate\"),\r\n  u16(\"tickSpacing\"),\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const ObservationLayout = struct([u32(\"blockTimestamp\"), i64(\"tickCumulative\"), seq(u64(), 4)]);\r\nexport const ObservationInfoLayout = struct([\r\n  blob(8),\r\n  bool(\"initialized\"),\r\n  u64(\"recentEpoch\"),\r\n  u16(\"observationIndex\"),\r\n  publicKey(\"poolId\"),\r\n  seq(ObservationLayout, 100, \"observations\"),\r\n  seq(u64(), 4),\r\n]);\r\n\r\nexport const RewardInfo = struct([\r\n  u8(\"rewardState\"),\r\n  u64(\"openTime\"),\r\n  u64(\"endTime\"),\r\n  u64(\"lastUpdateTime\"),\r\n  u128(\"emissionsPerSecondX64\"),\r\n  u64(\"rewardTotalEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  publicKey(\"tokenMint\"),\r\n  publicKey(\"tokenVault\"),\r\n  publicKey(\"creator\"),\r\n  u128(\"rewardGrowthGlobalX64\"),\r\n]);\r\nexport const PoolInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"ammConfig\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n  publicKey(\"observationId\"),\r\n  u8(\"mintDecimalsA\"),\r\n  u8(\"mintDecimalsB\"),\r\n  u16(\"tickSpacing\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"sqrtPriceX64\"),\r\n  s32(\"tickCurrent\"),\r\n  u32(),\r\n  u128(\"feeGrowthGlobalX64A\"),\r\n  u128(\"feeGrowthGlobalX64B\"),\r\n  u64(\"protocolFeesTokenA\"),\r\n  u64(\"protocolFeesTokenB\"),\r\n\r\n  u128(\"swapInAmountTokenA\"),\r\n  u128(\"swapOutAmountTokenB\"),\r\n  u128(\"swapInAmountTokenB\"),\r\n  u128(\"swapOutAmountTokenA\"),\r\n\r\n  u8(\"status\"),\r\n\r\n  seq(u8(), 7, \"\"),\r\n\r\n  seq(RewardInfo, 3, \"rewardInfos\"),\r\n  seq(u64(), 16, \"tickArrayBitmap\"),\r\n\r\n  u64(\"totalFeesTokenA\"),\r\n  u64(\"totalFeesClaimedTokenA\"),\r\n  u64(\"totalFeesTokenB\"),\r\n  u64(\"totalFeesClaimedTokenB\"),\r\n\r\n  u64(\"fundFeesTokenA\"),\r\n  u64(\"fundFeesTokenB\"),\r\n\r\n  u64(\"startTime\"),\r\n\r\n  seq(u64(), 15 * 4 - 3, \"padding\"),\r\n]);\r\n\r\nexport const PositionRewardInfoLayout = struct([u128(\"growthInsideLastX64\"), u64(\"rewardAmountOwed\")]);\r\nexport const PositionInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"nftMint\"),\r\n  publicKey(\"poolId\"),\r\n\r\n  s32(\"tickLower\"),\r\n  s32(\"tickUpper\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n\r\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport type ClmmPositionLayout = ReturnType<typeof PositionInfoLayout.decode>;\r\n\r\nexport const ProtocolPositionLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"poolId\"),\r\n  s32(\"tickLowerIndex\"),\r\n  s32(\"tickUpperIndex\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n  seq(u128(), 3, \"rewardGrowthInside\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const TickLayout = struct([\r\n  s32(\"tick\"),\r\n  i128(\"liquidityNet\"),\r\n  u128(\"liquidityGross\"),\r\n  u128(\"feeGrowthOutsideX64A\"),\r\n  u128(\"feeGrowthOutsideX64B\"),\r\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\r\n\r\n  seq(u32(), 13, \"\"),\r\n]);\r\n\r\nexport const TickArrayLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  s32(\"startTickIndex\"),\r\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\r\n  u8(\"initializedTickCount\"),\r\n\r\n  seq(u8(), 115, \"\"),\r\n]);\r\n\r\nexport const OperationLayout = struct([blob(329), seq(publicKey(), 100, \"whitelistMints\")]);\r\n\r\nexport const TickArrayBitmapExtensionLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"positiveTickArrayBitmap\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"negativeTickArrayBitmap\"),\r\n]);\r\n\r\nexport const LockPositionLayout = struct([\r\n  u64(),\r\n  u8(\"bump\"),\r\n  publicKey(\"owner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  seq(u64(), 8),\r\n]);\r\n\r\nexport const LockClPositionLayoutV2 = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"lockOwner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  publicKey(\"lockNftMint\"),\r\n  u64(\"recentEpoch\"),\r\n  seq(u64(), 8),\r\n]);\r\n","import { blob, bool, publicKey, seq, struct, u16, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const CpmmConfigInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  bool(\"disableCreatePool\"),\r\n  u16(\"index\"),\r\n  u64(\"tradeFeeRate\"),\r\n  u64(\"protocolFeeRate\"),\r\n  u64(\"fundFeeRate\"),\r\n  u64(\"createPoolFee\"),\r\n\r\n  publicKey(\"protocolOwner\"),\r\n  publicKey(\"fundOwner\"),\r\n\r\n  u64(\"creatorFeeRate\"),\r\n  seq(u64(), 15),\r\n]);\r\n\r\nexport const CpmmPoolInfoLayout = struct([\r\n  blob(8),\r\n\r\n  publicKey(\"configId\"),\r\n  publicKey(\"poolCreator\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n\r\n  publicKey(\"mintLp\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n\r\n  publicKey(\"mintProgramA\"),\r\n  publicKey(\"mintProgramB\"),\r\n\r\n  publicKey(\"observationId\"),\r\n\r\n  u8(\"bump\"),\r\n  u8(\"status\"),\r\n\r\n  u8(\"lpDecimals\"),\r\n  u8(\"mintDecimalA\"),\r\n  u8(\"mintDecimalB\"),\r\n\r\n  u64(\"lpAmount\"),\r\n  u64(\"protocolFeesMintA\"),\r\n  u64(\"protocolFeesMintB\"),\r\n  u64(\"fundFeesMintA\"),\r\n  u64(\"fundFeesMintB\"),\r\n  u64(\"openTime\"),\r\n  u64(\"epoch\"),\r\n\r\n  u8(\"feeOn\"),\r\n  bool(\"enableCreatorFee\"),\r\n  seq(u8(), 6),\r\n  u64(\"creatorFeesMintA\"),\r\n  u64(\"creatorFeesMintB\"),\r\n\r\n  seq(u64(), 28),\r\n]);\r\n\r\nexport const CpmmPermission = struct([blob(8), publicKey(\"configId\"), seq(u64(), 30)]);\r\n","import BN from \"bn.js\";\r\n\r\nimport { AccountMeta, PublicKey, TransactionInstruction, Signer, Keypair, SystemProgram } from \"@solana/web3.js\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport {\r\n  MEMO_PROGRAM_ID2,\r\n  RENT_PROGRAM_ID,\r\n  SYSTEM_PROGRAM_ID,\r\n  METADATA_PROGRAM_ID,\r\n  createLogger,\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  InstructionType,\r\n} from \"@/common\";\r\nimport { getCpmmPdaPoolId, getCpLockPda } from \"./pda\";\r\n\r\nimport { struct, u8, u64, bool } from \"@/marshmallow\";\r\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\r\nimport { ApiV3PoolInfoStandardItemCpmm, CpmmKeys } from \"@/api\";\r\nimport { getATAAddress } from \"@/common\";\r\nimport { getPdaMetadataKey } from \"../clmm\";\r\nimport { CpmmLockExtInfo, FeeOn } from \"./type\";\r\n\r\nconst logger = createLogger(\"Raydium_cpmm\");\r\nconst anchorDataBuf = {\r\n  initialize: [175, 175, 109, 31, 13, 152, 155, 237],\r\n  deposit: [242, 35, 198, 137, 82, 225, 242, 182],\r\n  withdraw: [183, 18, 70, 156, 148, 109, 161, 34],\r\n  swapBaseInput: [143, 190, 90, 218, 196, 30, 51, 222],\r\n  swapBaseOutput: [55, 217, 98, 86, 163, 74, 180, 173],\r\n  lockCpLiquidity: [216, 157, 29, 78, 38, 51, 31, 26],\r\n  collectCpFee: [8, 30, 51, 199, 209, 184, 247, 133],\r\n\r\n  createPermissionPda: Buffer.from([135, 136, 2, 216, 137, 169, 181, 202]),\r\n  closePermissionPda: Buffer.from([156, 84, 32, 118, 69, 135, 70, 123]),\r\n  initializeWithPermission: Buffer.from([63, 55, 254, 65, 49, 178, 89, 121]),\r\n  collectCreatorFee: Buffer.from([20, 22, 86, 123, 198, 28, 219, 132]),\r\n};\r\n\r\nexport function makeCreateCpmmPoolInInstruction(\r\n  programId: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  createPoolFeeAccount: PublicKey,\r\n  mintProgramA: PublicKey,\r\n  mintProgramB: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountMaxA: BN,\r\n  amountMaxB: BN,\r\n  openTime: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountMaxA\"), u64(\"amountMaxB\"), u64(\"openTime\")]);\r\n\r\n  const pdaPoolId = getCpmmPdaPoolId(programId, configId, mintA, mintB).publicKey;\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: creator, isSigner: true, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: !poolId.equals(pdaPoolId), isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: createPoolFeeAccount, isSigner: false, isWritable: true },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountMaxA,\r\n      amountMaxB,\r\n      openTime,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initialize, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeDepositCpmmInInstruction(\r\n  programId: PublicKey,\r\n  owner: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n\r\n  lpAmount: BN,\r\n  amountMaxA: BN,\r\n  amountMaxB: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMaxA\"), u64(\"amountMaxB\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  logger.debug(\"cpmm deposit data\", {\r\n    lpAmount: lpAmount.toString(),\r\n    amountMaxA: amountMaxA.toString(),\r\n    amountMaxB: amountMaxB.toString(),\r\n  });\r\n  dataLayout.encode(\r\n    {\r\n      lpAmount,\r\n      amountMaxA,\r\n      amountMaxB,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.deposit, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeWithdrawCpmmInInstruction(\r\n  programId: PublicKey,\r\n  owner: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n\r\n  lpAmount: BN,\r\n  amountMinA: BN,\r\n  amountMinB: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      lpAmount,\r\n      amountMinA,\r\n      amountMinB,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.withdraw, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeSwapCpmmBaseInInstruction(\r\n  programId: PublicKey,\r\n  payer: PublicKey,\r\n  authority: PublicKey,\r\n  configId: PublicKey,\r\n  poolId: PublicKey,\r\n  userInputAccount: PublicKey,\r\n  userOutputAccount: PublicKey,\r\n  inputVault: PublicKey,\r\n  outputVault: PublicKey,\r\n  inputTokenProgram: PublicKey,\r\n  outputTokenProgram: PublicKey,\r\n  inputMint: PublicKey,\r\n  outputMint: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountIn: BN,\r\n  amounOutMin: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountIn\"), u64(\"amounOutMin\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: inputVault, isSigner: false, isWritable: true },\r\n    { pubkey: outputVault, isSigner: false, isWritable: true },\r\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: inputMint, isSigner: false, isWritable: false },\r\n    { pubkey: outputMint, isSigner: false, isWritable: false },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountIn,\r\n      amounOutMin,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.swapBaseInput, ...data]),\r\n  });\r\n}\r\nexport function makeSwapCpmmBaseOutInstruction(\r\n  programId: PublicKey,\r\n  payer: PublicKey,\r\n  authority: PublicKey,\r\n  configId: PublicKey,\r\n  poolId: PublicKey,\r\n  userInputAccount: PublicKey,\r\n  userOutputAccount: PublicKey,\r\n  inputVault: PublicKey,\r\n  outputVault: PublicKey,\r\n  inputTokenProgram: PublicKey,\r\n  outputTokenProgram: PublicKey,\r\n  inputMint: PublicKey,\r\n  outputMint: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountInMax: BN,\r\n  amountOut: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountInMax\"), u64(\"amountOut\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: inputVault, isSigner: false, isWritable: true },\r\n    { pubkey: outputVault, isSigner: false, isWritable: true },\r\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: inputMint, isSigner: false, isWritable: false },\r\n    { pubkey: outputMint, isSigner: false, isWritable: false },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountInMax,\r\n      amountOut,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.swapBaseOutput, ...data]),\r\n  });\r\n}\r\n\r\nexport async function makeCpmmLockInstruction(props: {\r\n  poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n  poolKeys: CpmmKeys;\r\n  ownerInfo: {\r\n    feePayer: PublicKey;\r\n    wallet: PublicKey;\r\n  };\r\n  feeNftOwner: PublicKey;\r\n\r\n  lockProgram: PublicKey;\r\n  lockAuthProgram: PublicKey;\r\n  lpAmount: BN;\r\n  withMetadata?: boolean;\r\n  getEphemeralSigners?: (k: number) => any;\r\n}): Promise<ReturnTypeMakeInstructions<CpmmLockExtInfo>> {\r\n  const { ownerInfo, poolInfo, poolKeys, feeNftOwner, getEphemeralSigners } = props;\r\n\r\n  const signers: Signer[] = [];\r\n  const [poolId, lpMint] = [new PublicKey(poolInfo.id), new PublicKey(poolInfo.lpMint.address)];\r\n\r\n  let nftMintAccount: PublicKey;\r\n  if (getEphemeralSigners) {\r\n    nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n  } else {\r\n    const _k = Keypair.generate();\r\n    signers.push(_k);\r\n    nftMintAccount = _k.publicKey;\r\n  }\r\n\r\n  const { publicKey: nftAccount } = getATAAddress(feeNftOwner, nftMintAccount, TOKEN_PROGRAM_ID);\r\n  const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n  const { publicKey: lockPda } = getCpLockPda(props.lockProgram, nftMintAccount);\r\n\r\n  const { publicKey: userLpVault } = getATAAddress(ownerInfo.wallet, lpMint, TOKEN_PROGRAM_ID);\r\n  const { publicKey: lockLpVault } = getATAAddress(props.lockAuthProgram, lpMint, TOKEN_PROGRAM_ID);\r\n\r\n  const ins = cpmmLockPositionInstruction({\r\n    programId: props.lockProgram,\r\n    auth: props.lockAuthProgram,\r\n    payer: ownerInfo.feePayer,\r\n    liquidityOwner: ownerInfo.wallet,\r\n    nftOwner: feeNftOwner,\r\n    nftMint: nftMintAccount,\r\n    nftAccount,\r\n    poolId,\r\n    lockPda,\r\n    mintLp: lpMint,\r\n    userLpVault,\r\n    lockLpVault,\r\n    poolVaultA: new PublicKey(poolKeys.vault.A),\r\n    poolVaultB: new PublicKey(poolKeys.vault.B),\r\n    metadataAccount,\r\n    lpAmount: props.lpAmount,\r\n    withMetadata: props.withMetadata ?? true,\r\n  });\r\n\r\n  return {\r\n    address: {\r\n      nftMint: nftMintAccount,\r\n      nftAccount,\r\n      metadataAccount,\r\n      lockPda,\r\n      userLpVault,\r\n      lockLpVault,\r\n    },\r\n    instructions: [ins],\r\n    signers,\r\n    instructionTypes: [InstructionType.CpmmLockLp],\r\n    lookupTableAddress: [],\r\n  };\r\n}\r\n\r\nexport function cpmmLockPositionInstruction({\r\n  programId,\r\n  auth,\r\n  payer,\r\n  liquidityOwner,\r\n  nftOwner,\r\n  nftMint,\r\n  nftAccount,\r\n  poolId,\r\n  lockPda,\r\n  mintLp,\r\n  userLpVault,\r\n  lockLpVault,\r\n  poolVaultA,\r\n  poolVaultB,\r\n  metadataAccount,\r\n  lpAmount,\r\n  withMetadata,\r\n}: {\r\n  programId: PublicKey;\r\n  auth: PublicKey;\r\n  payer: PublicKey;\r\n  liquidityOwner: PublicKey;\r\n  nftOwner: PublicKey;\r\n  nftMint: PublicKey;\r\n  nftAccount: PublicKey;\r\n  poolId: PublicKey;\r\n  lockPda: PublicKey;\r\n  mintLp: PublicKey;\r\n  userLpVault: PublicKey;\r\n  lockLpVault: PublicKey;\r\n  poolVaultA: PublicKey;\r\n  poolVaultB: PublicKey;\r\n  metadataAccount: PublicKey;\r\n  lpAmount: BN;\r\n  withMetadata: boolean;\r\n}): TransactionInstruction {\r\n  const keys = [\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: liquidityOwner, isSigner: true, isWritable: false },\r\n    { pubkey: nftOwner, isSigner: false, isWritable: false },\r\n    { pubkey: nftMint, isSigner: true, isWritable: true },\r\n    { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n    { pubkey: poolId, isSigner: false, isWritable: false },\r\n    { pubkey: lockPda, isSigner: false, isWritable: true },\r\n    { pubkey: mintLp, isSigner: false, isWritable: false },\r\n    { pubkey: userLpVault, isSigner: false, isWritable: true },\r\n    { pubkey: lockLpVault, isSigner: false, isWritable: true },\r\n    { pubkey: poolVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: poolVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n  const dataLayout = struct([u64(\"lpAmount\"), bool(\"withMetadata\")]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      lpAmount,\r\n      withMetadata,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.lockCpLiquidity, ...data]);\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function collectCpFeeInstruction({\r\n  programId,\r\n  nftOwner,\r\n  auth,\r\n  nftAccount,\r\n  lockPda,\r\n  poolId,\r\n  mintLp,\r\n  userVaultA,\r\n  userVaultB,\r\n  poolVaultA,\r\n  poolVaultB,\r\n  mintA,\r\n  mintB,\r\n  lockLpVault,\r\n  lpFeeAmount,\r\n  cpmmProgram,\r\n  cpmmAuthProgram,\r\n}: {\r\n  programId: PublicKey;\r\n  nftOwner: PublicKey;\r\n  auth: PublicKey;\r\n  nftMint: PublicKey;\r\n  nftAccount: PublicKey;\r\n  lockPda: PublicKey;\r\n  poolId: PublicKey;\r\n  mintLp: PublicKey;\r\n  userVaultA: PublicKey;\r\n  userVaultB: PublicKey;\r\n  poolVaultA: PublicKey;\r\n  poolVaultB: PublicKey;\r\n  mintA: PublicKey;\r\n  mintB: PublicKey;\r\n  lockLpVault: PublicKey;\r\n  lpFeeAmount: BN;\r\n  cpmmProgram?: PublicKey;\r\n  cpmmAuthProgram?: PublicKey;\r\n}): TransactionInstruction {\r\n  const keys = [\r\n    { pubkey: auth, isSigner: false, isWritable: false },\r\n    { pubkey: nftOwner, isSigner: true, isWritable: false },\r\n    // { pubkey: nftMint, isSigner: false, isWritable: true },\r\n    { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n    { pubkey: lockPda, isSigner: false, isWritable: true },\r\n    { pubkey: cpmmProgram ?? CREATE_CPMM_POOL_PROGRAM, isSigner: false, isWritable: false },\r\n    { pubkey: cpmmAuthProgram ?? CREATE_CPMM_POOL_AUTH, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintLp, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: poolVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: poolVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lockLpVault, isSigner: false, isWritable: true },\r\n    // { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n  ];\r\n  const dataLayout = struct([u64(\"lpFeeAmount\")]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      lpFeeAmount,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.collectCpFee, ...data]);\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function makeCollectCreatorFeeInstruction(\r\n  programId: PublicKey,\r\n  creator: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  configId: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  ownerVaultA: PublicKey,\r\n  ownerVaultB: PublicKey,\r\n  mintProgramA: PublicKey,\r\n  mintProgramB: PublicKey,\r\n): TransactionInstruction {\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: creator, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: ownerVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: ownerVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: mintProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: anchorDataBuf.collectCreatorFee,\r\n  });\r\n}\r\n\r\nexport function initializeWithPermission(\r\n  programId: PublicKey,\r\n  payer: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n  payerVaultA: PublicKey,\r\n  payerVaultB: PublicKey,\r\n  payerLpAccount: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  createPoolFeeAccount: PublicKey,\r\n  mintProgramA: PublicKey,\r\n  mintProgramB: PublicKey,\r\n  observationId: PublicKey,\r\n  permissionPda: PublicKey,\r\n\r\n  amountA: BN,\r\n  amountB: BN,\r\n  openTime: BN,\r\n\r\n  feeOn: FeeOn,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountA\"), u64(\"amountB\"), u64(\"openTime\"), u8(\"feeOn\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: creator, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: payerVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: payerVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: payerLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: createPoolFeeAccount, isSigner: false, isWritable: true },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n    { pubkey: permissionPda, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountA,\r\n      amountB,\r\n      openTime,\r\n      feeOn,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initializeWithPermission, ...data]),\r\n  });\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { findProgramAddress } from \"../../common/txTool/txUtils\";\r\n\r\nconst AUTH_SEED = Buffer.from(\"vault_and_lp_mint_auth_seed\", \"utf8\");\r\nconst AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nconst POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nconst POOL_LP_MINT_SEED = Buffer.from(\"pool_lp_mint\", \"utf8\");\r\nconst POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nconst OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\r\nconst PERMISSION_SEED = Buffer.from(\"permission\", \"utf8\");\r\n\r\nexport function getPdaPoolAuthority(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AUTH_SEED], programId);\r\n}\r\n\r\nexport function getCpmmPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getCpmmPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLpMint(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LP_MINT_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaVault(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  mint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), mint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaObservationId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nfunction u16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setUint16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function getCreatePoolKeys({\r\n  poolId: propPoolId,\r\n  programId,\r\n  configId,\r\n  mintA,\r\n  mintB,\r\n}: {\r\n  poolId?: PublicKey;\r\n  programId: PublicKey;\r\n  configId: PublicKey;\r\n  mintA: PublicKey;\r\n  mintB: PublicKey;\r\n}): {\r\n  poolId: PublicKey;\r\n  configId: PublicKey;\r\n  authority: PublicKey;\r\n  lpMint: PublicKey;\r\n  vaultA: PublicKey;\r\n  vaultB: PublicKey;\r\n  observationId: PublicKey;\r\n} {\r\n  // const configId = getCpmmPdaAmmConfigId(programId, 0).publicKey;\r\n  const authority = getPdaPoolAuthority(programId).publicKey;\r\n  const poolId = propPoolId || getCpmmPdaPoolId(programId, configId, mintA, mintB).publicKey;\r\n  const lpMint = getPdaLpMint(programId, poolId).publicKey;\r\n  const vaultA = getPdaVault(programId, poolId, mintA).publicKey;\r\n  const vaultB = getPdaVault(programId, poolId, mintB).publicKey;\r\n  const observationId = getPdaObservationId(programId, poolId).publicKey;\r\n\r\n  return {\r\n    poolId,\r\n    configId,\r\n    authority,\r\n    lpMint,\r\n    vaultA,\r\n    vaultB,\r\n    observationId,\r\n  };\r\n}\r\n\r\nexport const LOCK_LIQUIDITY_SEED = Buffer.from(\"locked_liquidity\", \"utf8\");\r\n\r\nexport function getCpLockPda(\r\n  programId: PublicKey,\r\n  mint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([LOCK_LIQUIDITY_SEED, mint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPermissionId(\r\n  programId: PublicKey,\r\n  owner: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([PERMISSION_SEED, owner.toBuffer()], programId);\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js-light\";\r\nimport { ApiV3Token } from \"../../../api/type\";\r\nimport { BNDivCeil } from \"../../../common\";\r\nimport { ConstantProductCurve } from \"./constantProduct\";\r\nimport { CpmmFee as Fee } from \"./fee\";\r\n\r\nexport enum RoundDirection {\r\n  Floor,\r\n  Ceiling,\r\n}\r\n\r\nexport type SwapWithoutFeesResult = { destinationAmountSwapped: BN };\r\n\r\nexport type TradingTokenResult = { tokenAmount0: BN; tokenAmount1: BN };\r\n\r\nexport type SwapResult = {\r\n  newInputVaultAmount: BN;\r\n  newOutputVaultAmount: BN;\r\n  inputAmount: BN;\r\n  outputAmount: BN;\r\n  tradeFee: BN;\r\n  protocolFee: BN;\r\n  fundFee: BN;\r\n  creatorFee: BN;\r\n};\r\n\r\nexport enum TradeDirection {\r\n  ZeroForOne,\r\n  OneForZero,\r\n}\r\nexport enum TradeDirectionOpposite {\r\n  OneForZero,\r\n  ZeroForOne,\r\n}\r\n\r\nexport class CurveCalculator {\r\n  static validate_supply(tokenAmount0: BN, tokenAmount1: BN): void {\r\n    if (tokenAmount0.isZero()) throw Error(\"tokenAmount0 is zero\");\r\n    if (tokenAmount1.isZero()) throw Error(\"tokenAmount1 is zero\");\r\n  }\r\n\r\n  static swapBaseInput(\r\n    inputAmount: BN,\r\n    inputVaultAmount: BN,\r\n    outputVaultAmount: BN,\r\n    tradeFeeRate: BN,\r\n    creatorFeeRate: BN,\r\n    protocolFeeRate: BN,\r\n    fundFeeRate: BN,\r\n    isCreatorFeeOnInput: boolean,\r\n  ): SwapResult {\r\n    let creatorFee = new BN(0);\r\n\r\n    const tradeFee = Fee.tradingFee(inputAmount, tradeFeeRate);\r\n\r\n    let inputAmountLessFees;\r\n    if (isCreatorFeeOnInput) {\r\n      creatorFee = Fee.creatorFee(inputAmount, creatorFeeRate);\r\n      inputAmountLessFees = inputAmount.sub(tradeFee).sub(creatorFee);\r\n    } else {\r\n      inputAmountLessFees = inputAmount.sub(tradeFee);\r\n    }\r\n\r\n    const protocolFee = Fee.protocolFee(tradeFee, protocolFeeRate);\r\n    const fundFee = Fee.protocolFee(tradeFee, fundFeeRate);\r\n\r\n    const outputAmountSwapped = ConstantProductCurve.swapBaseInputWithoutFees(\r\n      inputAmountLessFees,\r\n      inputVaultAmount,\r\n      outputVaultAmount,\r\n    );\r\n\r\n    let outputAmount;\r\n    if (isCreatorFeeOnInput) {\r\n      outputAmount = outputAmountSwapped;\r\n    } else {\r\n      creatorFee = Fee.creatorFee(outputAmountSwapped, creatorFeeRate);\r\n      outputAmount = outputAmountSwapped.sub(creatorFee);\r\n    }\r\n\r\n    return {\r\n      newInputVaultAmount: inputVaultAmount.add(inputAmountLessFees),\r\n      newOutputVaultAmount: outputVaultAmount.sub(outputAmountSwapped),\r\n      inputAmount,\r\n      outputAmount,\r\n      tradeFee,\r\n      protocolFee,\r\n      fundFee,\r\n      creatorFee,\r\n    };\r\n  }\r\n\r\n  static swapBaseOutput(\r\n    outputAmount: BN,\r\n    inputVaultAmount: BN,\r\n    outputVaultAmount: BN,\r\n    tradeFeeRate: BN,\r\n    creatorFeeRate: BN,\r\n    protocolFeeRate: BN,\r\n    fundFeeRate: BN,\r\n    isCreatorFeeOnInput: boolean,\r\n  ): SwapResult {\r\n    let tradeFee;\r\n    let creatorFee = new BN(0);\r\n\r\n    let actualOutputAmount;\r\n\r\n    if (isCreatorFeeOnInput) {\r\n      actualOutputAmount = outputAmount;\r\n    } else {\r\n      const outAmountWithCreatorFee = Fee.calculatePreFeeAmount(outputAmount, creatorFeeRate);\r\n      creatorFee = outAmountWithCreatorFee.sub(outputAmount);\r\n      actualOutputAmount = outAmountWithCreatorFee;\r\n    }\r\n\r\n    const inputAmountSwapped = ConstantProductCurve.swapBaseOutputWithoutFees(\r\n      actualOutputAmount,\r\n      inputVaultAmount,\r\n      outputVaultAmount,\r\n    );\r\n\r\n    let inputAmount;\r\n    if (isCreatorFeeOnInput) {\r\n      const inputAmountWithFee = Fee.calculatePreFeeAmount(inputAmountSwapped, tradeFeeRate.add(creatorFeeRate));\r\n      const totalFee = inputAmountWithFee.sub(inputAmountSwapped);\r\n      creatorFee = Fee.splitCreatorFee(totalFee, tradeFeeRate, creatorFeeRate);\r\n      tradeFee = totalFee.sub(creatorFee);\r\n      inputAmount = inputAmountWithFee;\r\n    } else {\r\n      const inputAmountWithFee = Fee.calculatePreFeeAmount(inputAmountSwapped, tradeFeeRate);\r\n      tradeFee = inputAmountWithFee.sub(inputAmountSwapped);\r\n      inputAmount = inputAmountWithFee;\r\n    }\r\n\r\n    const protocolFee = Fee.protocolFee(tradeFee, protocolFeeRate);\r\n    const fundFee = Fee.fundFee(tradeFee, fundFeeRate);\r\n\r\n    return {\r\n      newInputVaultAmount: inputVaultAmount.add(inputAmountSwapped),\r\n      newOutputVaultAmount: outputAmount.sub(actualOutputAmount),\r\n      inputAmount,\r\n      outputAmount,\r\n      tradeFee,\r\n      protocolFee,\r\n      fundFee,\r\n      creatorFee,\r\n    };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { RoundDirection, TradingTokenResult } from \"./calculator\";\r\n\r\nfunction checkedRem(dividend: BN, divisor: BN): BN {\r\n  if (divisor.isZero()) throw Error(\"divisor is zero\");\r\n\r\n  const result = dividend.mod(divisor);\r\n  return result;\r\n}\r\n\r\nfunction checkedCeilDiv(dividend: BN, rhs: BN): BN[] {\r\n  if (rhs.isZero()) throw Error(\"rhs is zero\");\r\n\r\n  let quotient = dividend.div(rhs);\r\n\r\n  const remainder = checkedRem(dividend, rhs);\r\n\r\n  if (remainder.gt(ZERO)) {\r\n    quotient = quotient.add(new BN(1));\r\n  }\r\n  return [quotient, rhs];\r\n}\r\n\r\nconst ZERO = new BN(0);\r\n\r\nexport class ConstantProductCurve {\r\n  static swapBaseInputWithoutFees(inputAmount: BN, inputVaultAmount: BN, onputVaultAmount: BN): BN {\r\n    const numerator = inputAmount.mul(onputVaultAmount);\r\n    const denominator = inputVaultAmount.add(inputAmount);\r\n\r\n    const outputAmount = numerator.div(denominator);\r\n    return outputAmount;\r\n  }\r\n\r\n  static swapBaseOutputWithoutFees(outputAmount: BN, inputVaultAmount: BN, onputVaultAmount: BN): BN {\r\n    const numerator = inputVaultAmount.mul(outputAmount);\r\n    const denominator = onputVaultAmount.sub(outputAmount);\r\n    const [inputAmount] = checkedCeilDiv(numerator, denominator);\r\n\r\n    return inputAmount;\r\n  }\r\n\r\n  static lpTokensToTradingTokens(\r\n    lpTokenAmount: BN,\r\n    lpTokenSupply: BN,\r\n    swapTokenAmount0: BN,\r\n    swapTokenAmount1: BN,\r\n    roundDirection: RoundDirection,\r\n  ): TradingTokenResult {\r\n    let tokenAmount0 = lpTokenAmount.mul(swapTokenAmount0).div(lpTokenSupply);\r\n    let tokenAmount1 = lpTokenAmount.mul(swapTokenAmount1).div(lpTokenSupply);\r\n\r\n    if (roundDirection === RoundDirection.Floor) {\r\n      return { tokenAmount0, tokenAmount1 };\r\n    } else if (roundDirection === RoundDirection.Ceiling) {\r\n      const tokenRemainder0 = checkedRem(lpTokenAmount.mul(swapTokenAmount0), lpTokenSupply);\r\n\r\n      if (tokenRemainder0.gt(ZERO) && tokenAmount0.gt(ZERO)) {\r\n        tokenAmount0 = tokenAmount0.add(new BN(1));\r\n      }\r\n\r\n      const token1Remainder = checkedRem(lpTokenAmount.mul(swapTokenAmount1), lpTokenSupply);\r\n\r\n      if (token1Remainder.gt(ZERO) && tokenAmount1.gt(ZERO)) {\r\n        tokenAmount1 = tokenAmount1.add(new BN(1));\r\n      }\r\n\r\n      return { tokenAmount0, tokenAmount1 };\r\n    }\r\n    throw Error(\"roundDirection value error\");\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { ceilDiv, floorDiv } from \"@/common/bignumber\";\r\nimport { FEE_RATE_DENOMINATOR_VALUE } from \"@/common/fee\";\r\n\r\nexport class CpmmFee {\r\n  static tradingFee(amount: BN, tradeFeeRate: BN): BN {\r\n    return ceilDiv(amount, tradeFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n  static protocolFee(amount: BN, protocolFeeRate: BN): BN {\r\n    return floorDiv(amount, protocolFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n  static fundFee(amount: BN, fundFeeRate: BN): BN {\r\n    return floorDiv(amount, fundFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n\r\n  static creatorFee(amount: BN, creatorFeeRate: BN): BN {\r\n    return ceilDiv(amount, creatorFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n\r\n  static splitCreatorFee(totalFee: BN, tradeFeeRate: BN, creatorFeeRate: BN): BN {\r\n    return floorDiv(totalFee, creatorFeeRate, tradeFeeRate.add(creatorFeeRate));\r\n  }\r\n\r\n  static calculatePreFeeAmount(postFeeAmount: BN, tradeFeeRate: BN): BN {\r\n    if (tradeFeeRate.isZero()) return postFeeAmount;\r\n\r\n    const numerator = postFeeAmount.mul(FEE_RATE_DENOMINATOR_VALUE);\r\n    const denominator = FEE_RATE_DENOMINATOR_VALUE.sub(tradeFeeRate);\r\n\r\n    return numerator.add(denominator).sub(new BN(1)).div(denominator);\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { SerumVersion } from \"../serum\";\r\n\r\nexport const LIQUIDITY_FEES_NUMERATOR = new BN(25);\r\nexport const LIQUIDITY_FEES_DENOMINATOR = new BN(10000);\r\n\r\n// liquidity version => serum version\r\nexport const LIQUIDITY_VERSION_TO_SERUM_VERSION: {\r\n  [key in 4 | 5]?: SerumVersion;\r\n} = {\r\n  4: 3,\r\n  5: 3,\r\n};\r\n","import { GetStructureSchema, publicKey, seq, struct, u128, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const fixedSwapInLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"minAmountOut\")]);\r\nexport const fixedSwapOutLayout = struct([u8(\"instruction\"), u64(\"maxAmountIn\"), u64(\"amountOut\")]);\r\n\r\nexport const createPoolV4Layout = struct([u8(\"instruction\"), u8(\"nonce\")]);\r\nexport const initPoolLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"startTime\")]);\r\n/* ================= state layouts ================= */\r\nexport const liquidityStateV4Layout = struct([\r\n  u64(\"status\"),\r\n  u64(\"nonce\"),\r\n  u64(\"maxOrder\"),\r\n  u64(\"depth\"),\r\n  u64(\"baseDecimal\"),\r\n  u64(\"quoteDecimal\"),\r\n  u64(\"state\"),\r\n  u64(\"resetFlag\"),\r\n  u64(\"minSize\"),\r\n  u64(\"volMaxCutRatio\"),\r\n  u64(\"amountWaveRatio\"),\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n  u64(\"minPriceMultiplier\"),\r\n  u64(\"maxPriceMultiplier\"),\r\n  u64(\"systemDecimalValue\"),\r\n  u64(\"minSeparateNumerator\"),\r\n  u64(\"minSeparateDenominator\"),\r\n  u64(\"tradeFeeNumerator\"),\r\n  u64(\"tradeFeeDenominator\"),\r\n  u64(\"pnlNumerator\"),\r\n  u64(\"pnlDenominator\"),\r\n  u64(\"swapFeeNumerator\"),\r\n  u64(\"swapFeeDenominator\"),\r\n  u64(\"baseNeedTakePnl\"),\r\n  u64(\"quoteNeedTakePnl\"),\r\n  u64(\"quoteTotalPnl\"),\r\n  u64(\"baseTotalPnl\"),\r\n  u64(\"poolOpenTime\"),\r\n  u64(\"punishPcAmount\"),\r\n  u64(\"punishCoinAmount\"),\r\n  u64(\"orderbookToInitTime\"),\r\n  // u128('poolTotalDepositPc'),\r\n  // u128('poolTotalDepositCoin'),\r\n  u128(\"swapBaseInAmount\"),\r\n  u128(\"swapQuoteOutAmount\"),\r\n  u64(\"swapBase2QuoteFee\"),\r\n  u128(\"swapQuoteInAmount\"),\r\n  u128(\"swapBaseOutAmount\"),\r\n  u64(\"swapQuote2BaseFee\"),\r\n  // amm vault\r\n  publicKey(\"baseVault\"),\r\n  publicKey(\"quoteVault\"),\r\n  // mint\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n  publicKey(\"lpMint\"),\r\n  // market\r\n  publicKey(\"openOrders\"),\r\n  publicKey(\"marketId\"),\r\n  publicKey(\"marketProgramId\"),\r\n  publicKey(\"targetOrders\"),\r\n  publicKey(\"withdrawQueue\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"owner\"),\r\n  // true circulating supply without lock up\r\n  u64(\"lpReserve\"),\r\n  seq(u64(), 3, \"padding\"),\r\n]);\r\n\r\nexport type LiquidityStateLayoutV4 = typeof liquidityStateV4Layout;\r\nexport type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;\r\n\r\nexport const liquidityStateV5Layout = struct([\r\n  u64(\"accountType\"),\r\n  u64(\"status\"),\r\n  u64(\"nonce\"),\r\n  u64(\"maxOrder\"),\r\n  u64(\"depth\"),\r\n  u64(\"baseDecimal\"),\r\n  u64(\"quoteDecimal\"),\r\n  u64(\"state\"),\r\n  u64(\"resetFlag\"),\r\n  u64(\"minSize\"),\r\n  u64(\"volMaxCutRatio\"),\r\n  u64(\"amountWaveRatio\"),\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n  u64(\"minPriceMultiplier\"),\r\n  u64(\"maxPriceMultiplier\"),\r\n  u64(\"systemDecimalsValue\"),\r\n  u64(\"abortTradeFactor\"),\r\n  u64(\"priceTickMultiplier\"),\r\n  u64(\"priceTick\"),\r\n  // Fees\r\n  u64(\"minSeparateNumerator\"),\r\n  u64(\"minSeparateDenominator\"),\r\n  u64(\"tradeFeeNumerator\"),\r\n  u64(\"tradeFeeDenominator\"),\r\n  u64(\"pnlNumerator\"),\r\n  u64(\"pnlDenominator\"),\r\n  u64(\"swapFeeNumerator\"),\r\n  u64(\"swapFeeDenominator\"),\r\n  // OutPutData\r\n  u64(\"baseNeedTakePnl\"),\r\n  u64(\"quoteNeedTakePnl\"),\r\n  u64(\"quoteTotalPnl\"),\r\n  u64(\"baseTotalPnl\"),\r\n  u64(\"poolOpenTime\"),\r\n  u64(\"punishPcAmount\"),\r\n  u64(\"punishCoinAmount\"),\r\n  u64(\"orderbookToInitTime\"),\r\n  u128(\"swapBaseInAmount\"),\r\n  u128(\"swapQuoteOutAmount\"),\r\n  u128(\"swapQuoteInAmount\"),\r\n  u128(\"swapBaseOutAmount\"),\r\n  u64(\"swapQuote2BaseFee\"),\r\n  u64(\"swapBase2QuoteFee\"),\r\n\r\n  publicKey(\"baseVault\"),\r\n  publicKey(\"quoteVault\"),\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n  publicKey(\"lpMint\"),\r\n\r\n  publicKey(\"modelDataAccount\"),\r\n  publicKey(\"openOrders\"),\r\n  publicKey(\"marketId\"),\r\n  publicKey(\"marketProgramId\"),\r\n  publicKey(\"targetOrders\"),\r\n  publicKey(\"owner\"),\r\n  seq(u64(), 64, \"padding\"),\r\n]);\r\n\r\nexport const addLiquidityLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"baseAmountIn\"),\r\n  u64(\"quoteAmountIn\"),\r\n  u64(\"fixedSide\"),\r\n  u64(\"otherAmountMin\"),\r\n]);\r\n\r\nexport const removeLiquidityLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"lpAmount\"),\r\n  u64(\"baseAmountMin\"),\r\n  u64(\"quoteAmountMin\"),\r\n]);\r\n\r\nexport type LiquidityStateLayoutV5 = typeof liquidityStateV5Layout;\r\nexport type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;\r\n\r\nexport type LiquidityState = LiquidityStateV4 | LiquidityStateV5;\r\nexport type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;\r\n\r\n/* ================= index ================= */\r\n// version => liquidity state layout\r\nexport const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {\r\n  [version: number]: LiquidityStateLayout;\r\n} = {\r\n  4: liquidityStateV4Layout,\r\n  5: liquidityStateV5Layout,\r\n};\r\nexport const createPoolFeeLayout = struct([u64(\"fee\")]);\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { AmmV4Keys, AmmV5Keys } from \"../../api/type\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport {\r\n  findProgramAddress,\r\n  parseSimulateLogToJson,\r\n  parseSimulateValue,\r\n  simulateMultipleInstruction,\r\n} from \"@/common/txTool/txUtils\";\r\nimport { toApiV3Token } from \"../../raydium/token/utils\";\r\nimport { makeSimulatePoolInfoInstruction } from \"./instruction\";\r\nimport { getSerumAssociatedAuthority } from \"./serum\";\r\nimport { StableLayout } from \"./stable\";\r\nimport { AmmRpcData, ComputeAmountOutParam, LiquidityPoolKeys } from \"./type\";\r\nimport { liquidityStateV4Layout } from \"./layout\";\r\nimport { splAccountLayout } from \"../account\";\r\nimport { SPL_MINT_LAYOUT } from \"../token\";\r\n\r\ntype AssociatedName =\r\n  | \"amm_associated_seed\"\r\n  | \"lp_mint_associated_seed\"\r\n  | \"coin_vault_associated_seed\"\r\n  | \"pc_vault_associated_seed\"\r\n  | \"lp_mint_associated_seed\"\r\n  | \"temp_lp_token_associated_seed\"\r\n  | \"open_order_associated_seed\"\r\n  | \"target_associated_seed\"\r\n  | \"withdraw_associated_seed\";\r\n\r\ninterface GetAssociatedParam {\r\n  name: AssociatedName;\r\n  programId: PublicKey;\r\n  marketId: PublicKey;\r\n}\r\n\r\nexport function getAssociatedConfigId({ programId }: { programId: PublicKey }): PublicKey {\r\n  const { publicKey } = findProgramAddress([Buffer.from(\"amm_config_account_seed\", \"utf-8\")], programId);\r\n  return publicKey;\r\n}\r\n\r\nexport function getLiquidityAssociatedId({ name, programId, marketId }: GetAssociatedParam): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(name, \"utf-8\")],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getAssociatedOpenOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\r\n  const { publicKey } = findProgramAddress(\r\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"open_order_associated_seed\", \"utf-8\")],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getLiquidityAssociatedAuthority({ programId }: { programId: PublicKey }): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], programId);\r\n}\r\n\r\nexport function getAssociatedPoolKeys({\r\n  version,\r\n  marketVersion,\r\n  marketId,\r\n  baseMint,\r\n  quoteMint,\r\n  baseDecimals,\r\n  quoteDecimals,\r\n  programId,\r\n  marketProgramId,\r\n}: {\r\n  version: 4 | 5;\r\n  marketVersion: 3;\r\n  marketId: PublicKey;\r\n  baseMint: PublicKey;\r\n  quoteMint: PublicKey;\r\n  baseDecimals: number;\r\n  quoteDecimals: number;\r\n  programId: PublicKey;\r\n  marketProgramId: PublicKey;\r\n}): LiquidityPoolKeys {\r\n  const id = getLiquidityAssociatedId({ name: \"amm_associated_seed\", programId, marketId });\r\n  const lpMint = getLiquidityAssociatedId({ name: \"lp_mint_associated_seed\", programId, marketId });\r\n  const { publicKey: authority, nonce } = getLiquidityAssociatedAuthority({ programId });\r\n  const baseVault = getLiquidityAssociatedId({ name: \"coin_vault_associated_seed\", programId, marketId });\r\n  const quoteVault = getLiquidityAssociatedId({ name: \"pc_vault_associated_seed\", programId, marketId });\r\n  const lpVault = getLiquidityAssociatedId({ name: \"temp_lp_token_associated_seed\", programId, marketId });\r\n  const openOrders = getAssociatedOpenOrders({ programId, marketId });\r\n  const targetOrders = getLiquidityAssociatedId({ name: \"target_associated_seed\", programId, marketId });\r\n  const withdrawQueue = getLiquidityAssociatedId({ name: \"withdraw_associated_seed\", programId, marketId });\r\n\r\n  const { publicKey: marketAuthority } = getSerumAssociatedAuthority({\r\n    programId: marketProgramId,\r\n    marketId,\r\n  });\r\n\r\n  return {\r\n    // base\r\n    id,\r\n    baseMint,\r\n    quoteMint,\r\n    lpMint,\r\n    baseDecimals,\r\n    quoteDecimals,\r\n    lpDecimals: baseDecimals,\r\n    // version\r\n    version,\r\n    programId,\r\n    // keys\r\n    authority,\r\n    nonce,\r\n    baseVault,\r\n    quoteVault,\r\n    lpVault,\r\n    openOrders,\r\n    targetOrders,\r\n    withdrawQueue,\r\n    // market version\r\n    marketVersion,\r\n    marketProgramId,\r\n    // market keys\r\n    marketId,\r\n    marketAuthority,\r\n    lookupTableAccount: PublicKey.default,\r\n    configId: getAssociatedConfigId({ programId }),\r\n  };\r\n}\r\n\r\nlet stableLayout: StableLayout | undefined;\r\n\r\nexport async function fetchMultipleInfo({\r\n  connection,\r\n  poolKeysList,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  config,\r\n  modelDataPubKey,\r\n}: {\r\n  connection: Connection;\r\n  poolKeysList: (AmmV4Keys | AmmV5Keys)[];\r\n  config: any;\r\n  modelDataPubKey?: PublicKey;\r\n}): Promise<\r\n  {\r\n    status: BN;\r\n    baseDecimals: number;\r\n    quoteDecimals: number;\r\n    lpDecimals: number;\r\n    baseReserve: BN;\r\n    quoteReserve: BN;\r\n    lpSupply: BN;\r\n    startTime: BN;\r\n  }[]\r\n> {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const loadStable = poolKeysList.find((i) => i.modelDataAccount);\r\n  if (loadStable) {\r\n    if (!stableLayout) {\r\n      stableLayout = new StableLayout({ connection, modelDataPubKey });\r\n      await stableLayout.initStableModelLayout();\r\n    }\r\n  }\r\n  return await Promise.all(\r\n    poolKeysList.map(async (itemPoolKey) => {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      if (itemPoolKey.modelDataAccount) {\r\n        const instructions = makeSimulatePoolInfoInstruction({ poolKeys: itemPoolKey });\r\n        const logs = await simulateMultipleInstruction(connection, [instructions.instruction], \"GetPoolData\");\r\n        const poolsInfo = logs.map((log) => {\r\n          const json = parseSimulateLogToJson(log, \"GetPoolData\");\r\n          const status = new BN(parseSimulateValue(json, \"status\"));\r\n          const baseDecimals = Number(parseSimulateValue(json, \"coin_decimals\"));\r\n          const quoteDecimals = Number(parseSimulateValue(json, \"pc_decimals\"));\r\n          const lpDecimals = Number(parseSimulateValue(json, \"lp_decimals\"));\r\n          const baseReserve = new BN(parseSimulateValue(json, \"pool_coin_amount\"));\r\n          const quoteReserve = new BN(parseSimulateValue(json, \"pool_pc_amount\"));\r\n          const lpSupply = new BN(parseSimulateValue(json, \"pool_lp_supply\"));\r\n          // TODO fix it when split stable\r\n          let startTime = \"0\";\r\n          try {\r\n            startTime = parseSimulateValue(json, \"pool_open_time\");\r\n          } catch (error) {\r\n            //\r\n          }\r\n          return {\r\n            status,\r\n            baseDecimals,\r\n            quoteDecimals,\r\n            lpDecimals,\r\n            baseReserve,\r\n            quoteReserve,\r\n            lpSupply,\r\n            startTime: new BN(startTime),\r\n          };\r\n        })[0];\r\n        return poolsInfo;\r\n      } else {\r\n        const [poolAcc, vaultAccA, vaultAccB, mintAccLp] = await connection.getMultipleAccountsInfo([\r\n          new PublicKey(itemPoolKey.id),\r\n          new PublicKey(itemPoolKey.vault.A),\r\n          new PublicKey(itemPoolKey.vault.B),\r\n          new PublicKey(itemPoolKey.mintLp.address),\r\n        ]);\r\n        if (poolAcc === null) throw Error(\"fetch pool error\");\r\n        if (vaultAccA === null) throw Error(\"fetch vaultAccA error\");\r\n        if (vaultAccB === null) throw Error(\"fetch vaultAccB error\");\r\n        if (mintAccLp === null) throw Error(\"fetch mintAccLp error\");\r\n        const poolInfo = liquidityStateV4Layout.decode(poolAcc.data);\r\n        const vaultInfoA = splAccountLayout.decode(vaultAccA.data);\r\n        const vaultInfoB = splAccountLayout.decode(vaultAccB.data);\r\n        const lpInfo = SPL_MINT_LAYOUT.decode(mintAccLp.data);\r\n        return {\r\n          status: poolInfo.status,\r\n          baseDecimals: poolInfo.baseDecimal.toNumber(),\r\n          quoteDecimals: poolInfo.quoteDecimal.toNumber(),\r\n          lpDecimals: lpInfo.decimals,\r\n          baseReserve: vaultInfoA.amount.sub(poolInfo.baseNeedTakePnl),\r\n          quoteReserve: vaultInfoB.amount.sub(poolInfo.quoteNeedTakePnl),\r\n          lpSupply: poolInfo.lpReserve,\r\n          startTime: poolInfo.poolOpenTime,\r\n        };\r\n      }\r\n    }),\r\n  );\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport const toAmmComputePoolInfo = (\r\n  poolData: Record<string, AmmRpcData>,\r\n): Record<string, ComputeAmountOutParam[\"poolInfo\"]> => {\r\n  const data: Record<string, ComputeAmountOutParam[\"poolInfo\"]> = {};\r\n  const tokenProgramStr = TOKEN_PROGRAM_ID.toBase58();\r\n\r\n  Object.keys(poolData).map((poolId) => {\r\n    const poolInfo = poolData[poolId];\r\n    const [mintA, mintB] = [poolInfo.baseMint.toBase58(), poolInfo.quoteMint.toBase58()];\r\n    data[poolId] = {\r\n      id: poolId,\r\n      version: 4,\r\n      status: poolInfo.status.toNumber(),\r\n      programId: poolInfo.programId.toBase58(), // needed\r\n      mintA: toApiV3Token({\r\n        address: mintA, // needed\r\n        programId: tokenProgramStr,\r\n        decimals: poolInfo.baseDecimal.toNumber(),\r\n      }),\r\n      mintB: toApiV3Token({\r\n        address: mintB, // needed\r\n        programId: tokenProgramStr,\r\n        decimals: poolInfo.quoteDecimal.toNumber(),\r\n      }),\r\n      rewardDefaultInfos: [],\r\n      rewardDefaultPoolInfos: \"Ecosystem\",\r\n      price: poolInfo.poolPrice.toNumber(),\r\n      mintAmountA: new Decimal(poolInfo.mintAAmount.toString()).div(10 ** poolInfo.baseDecimal.toNumber()).toNumber(),\r\n      mintAmountB: new Decimal(poolInfo.mintBAmount.toString()).div(10 ** poolInfo.quoteDecimal.toNumber()).toNumber(),\r\n      baseReserve: poolInfo.baseReserve, // needed\r\n      quoteReserve: poolInfo.quoteReserve, // needed\r\n      feeRate: new Decimal(poolInfo.tradeFeeNumerator.toString())\r\n        .div(poolInfo.tradeFeeDenominator.toString())\r\n        .toNumber(),\r\n      openTime: poolInfo.poolOpenTime.toString(),\r\n      tvl: 0,\r\n      day: mockRewardData,\r\n      week: mockRewardData,\r\n      month: mockRewardData,\r\n      pooltype: [],\r\n      farmUpcomingCount: 0,\r\n      farmOngoingCount: 0,\r\n      farmFinishedCount: 0,\r\n      type: \"Standard\",\r\n      marketId: poolInfo.marketId.toBase58(),\r\n      configId: getAssociatedConfigId({ programId: poolInfo.programId }).toBase58(),\r\n      lpPrice: 0,\r\n      lpAmount: new Decimal(poolInfo.lpReserve.toString())\r\n        .div(10 ** Math.min(poolInfo.baseDecimal.toNumber(), poolInfo.quoteDecimal.toNumber()))\r\n        .toNumber(),\r\n      lpMint: toApiV3Token({\r\n        address: poolInfo.lpMint.toBase58(),\r\n        programId: tokenProgramStr,\r\n        decimals: Math.min(poolInfo.baseDecimal.toNumber(), poolInfo.quoteDecimal.toNumber()),\r\n      }),\r\n      burnPercent: 0,\r\n    };\r\n  });\r\n  return data;\r\n};\r\n","import { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nimport { AmmV4Keys, AmmV5Keys } from \"@/api/type\";\r\nimport { BN_ONE, BN_ZERO, MODEL_DATA_PUBKEY, parseBigNumberish } from \"@/common\";\r\nimport { createLogger } from \"@/common/logger\";\r\nimport { accountMeta, RENT_PROGRAM_ID } from \"@/common/pubKey\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { struct, u64, u8 } from \"@/marshmallow\";\r\n\r\nimport BN from \"bn.js\";\r\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\r\nimport { InstructionReturn } from \"../type\";\r\nimport {\r\n  addLiquidityLayout,\r\n  fixedSwapInLayout,\r\n  fixedSwapOutLayout,\r\n  initPoolLayout,\r\n  removeLiquidityLayout,\r\n} from \"./layout\";\r\nimport {\r\n  InitPoolInstructionParamsV4,\r\n  LiquidityAddInstructionParams,\r\n  RemoveLiquidityInstruction,\r\n  SwapFixedInInstructionParamsV4,\r\n  SwapFixedOutInstructionParamsV4,\r\n  SwapInstructionParams,\r\n} from \"./type\";\r\n\r\nconst logger = createLogger(\"Raydium_liquidity_instruction\");\r\nexport function makeAddLiquidityInstruction(params: LiquidityAddInstructionParams): TransactionInstruction {\r\n  const {\r\n    poolInfo,\r\n    poolKeys,\r\n    userKeys,\r\n    baseAmountIn,\r\n    quoteAmountIn,\r\n    fixedSide,\r\n    otherAmountMin,\r\n    modelDataPubKey = MODEL_DATA_PUBKEY,\r\n  } = params;\r\n\r\n  const data = Buffer.alloc(addLiquidityLayout.span);\r\n  addLiquidityLayout.encode(\r\n    {\r\n      instruction: 3,\r\n      baseAmountIn: parseBigNumberish(baseAmountIn),\r\n      quoteAmountIn: parseBigNumberish(quoteAmountIn),\r\n      otherAmountMin: parseBigNumberish(otherAmountMin),\r\n      fixedSide: fixedSide === \"base\" ? BN_ZERO : BN_ONE,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.id) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.targetOrders) }),\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.lpMint.address) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B) }),\r\n  ];\r\n\r\n  if (poolInfo.pooltype.includes(\"StablePool\")) {\r\n    keys.push(accountMeta({ pubkey: modelDataPubKey }));\r\n  }\r\n\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.marketId), isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.baseTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.quoteTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: new PublicKey(poolInfo.programId),\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function removeLiquidityInstruction(params: RemoveLiquidityInstruction): TransactionInstruction {\r\n  const {\r\n    poolInfo,\r\n    poolKeys: poolKeyProps,\r\n    userKeys,\r\n    lpAmount,\r\n    baseAmountMin,\r\n    quoteAmountMin,\r\n    modelDataPubKey = MODEL_DATA_PUBKEY,\r\n  } = params;\r\n  const poolKeys = jsonInfo2PoolKeys(poolKeyProps);\r\n\r\n  let version = 4;\r\n  if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\r\n\r\n  if (version === 4 || version === 5) {\r\n    const data = Buffer.alloc(removeLiquidityLayout.span);\r\n    removeLiquidityLayout.encode(\r\n      {\r\n        instruction: 4,\r\n        lpAmount: parseBigNumberish(lpAmount),\r\n        baseAmountMin: parseBigNumberish(baseAmountMin),\r\n        quoteAmountMin: parseBigNumberish(quoteAmountMin),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const keys = [\r\n      // system\r\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n      // amm\r\n      accountMeta({ pubkey: poolKeys.id }),\r\n      accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n      accountMeta({ pubkey: poolKeys.openOrders }),\r\n      accountMeta({ pubkey: poolKeys.targetOrders }),\r\n      accountMeta({ pubkey: poolKeys.mintLp.address }),\r\n      accountMeta({ pubkey: poolKeys.vault.A }),\r\n      accountMeta({ pubkey: poolKeys.vault.B }),\r\n    ];\r\n\r\n    if (version === 5) {\r\n      keys.push(accountMeta({ pubkey: modelDataPubKey }));\r\n    } else {\r\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\r\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\r\n    }\r\n\r\n    keys.push(\r\n      // serum\r\n      accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n      accountMeta({ pubkey: poolKeys.marketId }),\r\n      accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n      accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n      accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n      // user\r\n      accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.baseTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.quoteTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n      // serum orderbook\r\n      accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n      accountMeta({ pubkey: poolKeys.marketBids }),\r\n      accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    );\r\n\r\n    return new TransactionInstruction({\r\n      programId: poolKeys.programId,\r\n      keys,\r\n      data,\r\n    });\r\n  }\r\n\r\n  // logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\r\n  return new TransactionInstruction({ programId: poolKeys.programId, keys: [] }); // won't reach\r\n}\r\n\r\nexport function createPoolV4InstructionV2({\r\n  programId,\r\n  ammId,\r\n  ammAuthority,\r\n  ammOpenOrders,\r\n  lpMint,\r\n  coinMint,\r\n  pcMint,\r\n  coinVault,\r\n  pcVault,\r\n  withdrawQueue,\r\n  ammTargetOrders,\r\n  poolTempLp,\r\n  marketProgramId,\r\n  marketId,\r\n  userWallet,\r\n  userCoinVault,\r\n  userPcVault,\r\n  userLpVault,\r\n  nonce,\r\n  openTime,\r\n  coinAmount,\r\n  pcAmount,\r\n  ammConfigId,\r\n  feeDestinationId,\r\n}: {\r\n  programId: PublicKey;\r\n  ammId: PublicKey;\r\n  ammAuthority: PublicKey;\r\n  ammOpenOrders: PublicKey;\r\n  lpMint: PublicKey;\r\n  coinMint: PublicKey;\r\n  pcMint: PublicKey;\r\n  coinVault: PublicKey;\r\n  pcVault: PublicKey;\r\n  withdrawQueue: PublicKey;\r\n  ammTargetOrders: PublicKey;\r\n  poolTempLp: PublicKey;\r\n  marketProgramId: PublicKey;\r\n  marketId: PublicKey;\r\n  userWallet: PublicKey;\r\n  userCoinVault: PublicKey;\r\n  userPcVault: PublicKey;\r\n  userLpVault: PublicKey;\r\n  ammConfigId: PublicKey;\r\n  feeDestinationId: PublicKey;\r\n\r\n  nonce: number;\r\n  openTime: BN;\r\n  coinAmount: BN;\r\n  pcAmount: BN;\r\n}): InstructionReturn {\r\n  const dataLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"openTime\"), u64(\"pcAmount\"), u64(\"coinAmount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ammId, isSigner: false, isWritable: true },\r\n    { pubkey: ammAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: ammOpenOrders, isSigner: false, isWritable: true },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: coinMint, isSigner: false, isWritable: false },\r\n    { pubkey: pcMint, isSigner: false, isWritable: false },\r\n    { pubkey: coinVault, isSigner: false, isWritable: true },\r\n    { pubkey: pcVault, isSigner: false, isWritable: true }, //12\r\n    { pubkey: ammTargetOrders, isSigner: false, isWritable: true }, //13\r\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n    { pubkey: feeDestinationId, isSigner: false, isWritable: true },\r\n    { pubkey: marketProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: marketId, isSigner: false, isWritable: false },\r\n    { pubkey: userWallet, isSigner: true, isWritable: true },\r\n    { pubkey: userCoinVault, isSigner: false, isWritable: true },\r\n    { pubkey: userPcVault, isSigner: false, isWritable: true },\r\n    { pubkey: userLpVault, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ instruction: 1, nonce, openTime, coinAmount, pcAmount }, data);\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data,\r\n    }),\r\n    instructionType: InstructionType.AmmV4CreatePool,\r\n  };\r\n}\r\n\r\nexport function simulatePoolInfoInstruction(poolKeys: AmmV4Keys | AmmV5Keys): TransactionInstruction {\r\n  const simulatePoolLayout = struct([u8(\"instruction\"), u8(\"simulateType\")]);\r\n  const data = Buffer.alloc(simulatePoolLayout.span);\r\n  simulatePoolLayout.encode(\r\n    {\r\n      instruction: 12,\r\n      simulateType: 0,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    programId: new PublicKey(poolKeys.programId),\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSwapFixedInInstruction(\r\n  {\r\n    poolKeys: propPoolKeys,\r\n    userKeys,\r\n    amountIn,\r\n    minAmountOut,\r\n    modelDataPubKey = MODEL_DATA_PUBKEY,\r\n  }: SwapFixedInInstructionParamsV4,\r\n  version: number,\r\n): TransactionInstruction {\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n  const data = Buffer.alloc(fixedSwapInLayout.span);\r\n  fixedSwapInLayout.encode(\r\n    {\r\n      instruction: 9,\r\n      amountIn: parseBigNumberish(amountIn),\r\n      minAmountOut: parseBigNumberish(minAmountOut),\r\n    },\r\n    data,\r\n  );\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n  ];\r\n\r\n  if (version === 4) keys.push(accountMeta({ pubkey: poolKeys.targetOrders }));\r\n  keys.push(accountMeta({ pubkey: poolKeys.vault.A }), accountMeta({ pubkey: poolKeys.vault.B }));\r\n  if (version === 5) keys.push(accountMeta({ pubkey: modelDataPubKey }));\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId }),\r\n    accountMeta({ pubkey: poolKeys.marketBids }),\r\n    accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSwapFixedOutInstruction(\r\n  {\r\n    poolKeys: propPoolKeys,\r\n    userKeys,\r\n    maxAmountIn,\r\n    amountOut,\r\n    modelDataPubKey = MODEL_DATA_PUBKEY,\r\n  }: SwapFixedOutInstructionParamsV4,\r\n  version: number,\r\n): TransactionInstruction {\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n  const data = Buffer.alloc(fixedSwapOutLayout.span);\r\n  fixedSwapOutLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      maxAmountIn: parseBigNumberish(maxAmountIn),\r\n      amountOut: parseBigNumberish(amountOut),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n    accountMeta({ pubkey: poolKeys.targetOrders }),\r\n    accountMeta({ pubkey: poolKeys.vault.A }),\r\n    accountMeta({ pubkey: poolKeys.vault.B }),\r\n  ];\r\n\r\n  if (version === 5) keys.push(accountMeta({ pubkey: modelDataPubKey }));\r\n\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId }),\r\n    accountMeta({ pubkey: poolKeys.marketBids }),\r\n    accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeAMMSwapInstruction(params: SwapInstructionParams): TransactionInstruction {\r\n  const { poolKeys, version, userKeys, amountIn, amountOut, fixedSide } = params;\r\n  if (version === 4 || version === 5) {\r\n    const props = { poolKeys, userKeys };\r\n    if (fixedSide === \"in\") {\r\n      return makeSwapFixedInInstruction(\r\n        {\r\n          ...props,\r\n          amountIn,\r\n          minAmountOut: amountOut,\r\n        },\r\n        version,\r\n      );\r\n    } else if (fixedSide === \"out\") {\r\n      return makeSwapFixedOutInstruction(\r\n        {\r\n          ...props,\r\n          maxAmountIn: amountIn,\r\n          amountOut,\r\n        },\r\n        version,\r\n      );\r\n    }\r\n    logger.logWithError(\"invalid params\", \"params\", params);\r\n  }\r\n\r\n  logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\r\n  throw new Error(\"invalid version\");\r\n}\r\n\r\nexport function makeInitPoolInstructionV4({\r\n  poolKeys: propPoolKeys,\r\n  userKeys,\r\n  startTime,\r\n}: InitPoolInstructionParamsV4): TransactionInstruction {\r\n  const data = Buffer.alloc(initPoolLayout.span);\r\n  initPoolLayout.encode(\r\n    {\r\n      instruction: 0,\r\n      // nonce: poolKeys.nonce, // to do fix\r\n      nonce: 5,\r\n      startTime: parseBigNumberish(startTime),\r\n    },\r\n    data,\r\n  );\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n\r\n  const keys = [\r\n    // system\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n    accountMeta({ pubkey: poolKeys.mintLp.address }),\r\n    accountMeta({ pubkey: poolKeys.mintA.address, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.mintB.address, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.vault.A, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.vault.B, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.targetOrders }),\r\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n    accountMeta({ pubkey: poolKeys.id, isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.payer, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSimulatePoolInfoInstruction({ poolKeys }: { poolKeys: AmmV4Keys | AmmV5Keys }): {\r\n  instruction: TransactionInstruction;\r\n} {\r\n  const LAYOUT = struct([u8(\"instruction\"), u8(\"simulateType\")]);\r\n  const data = Buffer.alloc(LAYOUT.span);\r\n  LAYOUT.encode(\r\n    {\r\n      instruction: 12,\r\n      simulateType: 0,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      programId: new PublicKey(poolKeys.programId),\r\n      keys,\r\n      data,\r\n    }),\r\n  };\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { createLogger } from \"../../common/logger\";\r\nimport { SerumVersion } from \"../serum\";\r\nimport { LIQUIDITY_VERSION_TO_SERUM_VERSION } from \"./constant\";\r\n\r\nconst logger = createLogger(\"Raydium_liquidity_serum\");\r\n\r\nexport function getSerumVersion(version: number): SerumVersion {\r\n  const serumVersion = LIQUIDITY_VERSION_TO_SERUM_VERSION[version];\r\n  if (!serumVersion) logger.logWithError(\"invalid version\", \"version\", version);\r\n\r\n  return serumVersion;\r\n}\r\n\r\nexport function getSerumAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const seeds = [marketId.toBuffer()];\r\n\r\n  let nonce = 0;\r\n  let publicKey: PublicKey;\r\n\r\n  while (nonce < 100) {\r\n    try {\r\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\r\n      publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\r\n    } catch (err) {\r\n      if (err instanceof TypeError) {\r\n        throw err;\r\n      }\r\n      nonce++;\r\n      continue;\r\n    }\r\n    return { publicKey, nonce };\r\n  }\r\n\r\n  logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\r\n    programId,\r\n    marketId,\r\n  });\r\n  throw new Error(\"unable to find a viable program address nonce\");\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { seq, struct, u64 } from \"../../marshmallow\";\r\nimport { MODEL_DATA_PUBKEY } from \"@/common\";\r\n\r\nconst ELEMENT_SIZE = 50000;\r\n\r\nexport const DataElement = struct([u64(\"x\"), u64(\"y\"), u64(\"price\")]);\r\n\r\nexport const modelDataInfoLayout = struct([\r\n  u64(\"accountType\"),\r\n  u64(\"status\"),\r\n  u64(\"multiplier\"),\r\n  u64(\"validDataCount\"),\r\n  seq(DataElement, ELEMENT_SIZE, \"DataElement\"),\r\n]);\r\n\r\nexport interface StableModelLayout {\r\n  accountType: number;\r\n  status: number;\r\n  multiplier: number;\r\n  validDataCount: number;\r\n  DataElement: { x: number; y: number; price: number }[];\r\n}\r\n\r\nfunction estimateRangeByXyReal(_xReal: number, _yReal: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction estimateRangeByX(_x: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction estimateRangeByY(_y: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction getMininumRangeByXyReal(\r\n  layoutData: StableModelLayout,\r\n  xReal: number,\r\n  yReal: number,\r\n): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByXyReal(xReal, yReal);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = (xReal * layoutData.multiplier) / yReal;\r\n  while (minRangeIdx <= maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n    if (mid === 0 || mid >= ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n    const cur = (layoutData.DataElement[mid].x * layoutData.multiplier) / layoutData.DataElement[mid].y;\r\n    const left = (layoutData.DataElement[mid - 1].x * layoutData.multiplier) / layoutData.DataElement[mid - 1].y;\r\n    const right = (layoutData.DataElement[mid + 1].x * layoutData.multiplier) / layoutData.DataElement[mid + 1].y;\r\n\r\n    if (target === cur) {\r\n      return [mid, mid, true];\r\n    } else if (target === left) {\r\n      return [mid - 1, mid - 1, true];\r\n    } else if (target === right) {\r\n      return [mid + 1, mid + 1, true];\r\n    } else if (target < left) {\r\n      maxRangeIdx = mid - 1;\r\n    } else if (target > left && target < cur) {\r\n      return [mid - 1, mid, true];\r\n    } else if (target > cur && target < right) {\r\n      return [mid, mid + 1, true];\r\n    } else {\r\n      minRangeIdx = mid + 1;\r\n    }\r\n  }\r\n  return [mid, mid, false];\r\n}\r\nfunction getRatio(layoutData: StableModelLayout, xReal: number, yReal: number): number {\r\n  const [minRangeIdx, maxRangeIdx, find] = getMininumRangeByXyReal(layoutData, xReal, yReal);\r\n\r\n  if (!find) {\r\n    return 0;\r\n  }\r\n\r\n  if (minRangeIdx === maxRangeIdx) {\r\n    const x = layoutData.DataElement[minRangeIdx].x;\r\n    const ratio = (xReal * layoutData.multiplier) / x;\r\n    return ratio;\r\n  } else {\r\n    const x1 = layoutData.DataElement[minRangeIdx].x;\r\n    const y1 = layoutData.DataElement[minRangeIdx].y;\r\n    const x2 = layoutData.DataElement[maxRangeIdx].x;\r\n    const y2 = layoutData.DataElement[maxRangeIdx].y;\r\n\r\n    const xDenominator = yReal * (x2 * y1 - x1 * y2);\r\n    const xNumerator1 = x1 * xDenominator;\r\n    const xNumerator2 = (x2 - x1) * (xReal * y1 - x1 * yReal) * y2;\r\n\r\n    const xNumerator = xNumerator1 + xNumerator2;\r\n    const ratio = (xReal * layoutData.multiplier * xDenominator) / xNumerator;\r\n    return ratio;\r\n  }\r\n}\r\n\r\nfunction realToTable(layoutData: StableModelLayout, realValue: number, ratio: number): number {\r\n  return (realValue * layoutData.multiplier) / ratio;\r\n}\r\n\r\nfunction tableToReal(layoutData: StableModelLayout, tableValue: number, ratio: number): number {\r\n  return (tableValue * ratio) / layoutData.multiplier;\r\n}\r\n\r\nfunction getMinimumRangeByX(layoutData: StableModelLayout, x: number): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByX(x);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = x;\r\n  while (minRangeIdx < maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n\r\n    if (mid <= 0 || mid > ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n    const cur = layoutData.DataElement[mid].x;\r\n    const left = layoutData.DataElement[mid - 1].x;\r\n    const right = layoutData.DataElement[mid + 1].x;\r\n\r\n    if (target === cur) return [mid, mid, true];\r\n    else if (target === left) return [mid - 1, mid - 1, true];\r\n    else if (target === right) return [mid + 1, mid + 1, true];\r\n    else if (target < left) maxRangeIdx = mid - 1;\r\n    else if (target > left && target < cur) return [mid - 1, mid, true];\r\n    else if (target > cur && target < right) return [mid, mid + 1, true];\r\n    else minRangeIdx = mid + 1;\r\n  }\r\n  return [mid, mid, false];\r\n}\r\n\r\nfunction getMinimumRangeByY(layoutData: StableModelLayout, y: number): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByY(y);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = y;\r\n  while (minRangeIdx <= maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n    if (mid <= 0 || mid >= ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n\r\n    const cur = layoutData.DataElement[mid].y;\r\n    const left = layoutData.DataElement[mid - 1].y;\r\n    const right = layoutData.DataElement[mid + 1].y;\r\n    if (target === cur) return [mid, mid, true];\r\n    else if (target === left) return [mid - 1, mid - 1, true];\r\n    else if (target === right) return [mid + 1, mid + 1, true];\r\n    else if (target < right) {\r\n      minRangeIdx = mid + 1;\r\n    } else if (target < left && target > cur) return [mid - 1, mid, true];\r\n    else if (target < cur && target > right) return [mid, mid + 1, true];\r\n    else maxRangeIdx = mid - 1;\r\n  }\r\n  return [mid, mid, false];\r\n}\r\n\r\nfunction getDataByX(\r\n  layoutData: StableModelLayout,\r\n  x: number,\r\n  dx: number,\r\n  priceUp: boolean,\r\n): [number, number, boolean, boolean] {\r\n  const xWithDx = priceUp ? x + dx : x - dx;\r\n  const [minIdx, maxIdx, find] = getMinimumRangeByX(layoutData, xWithDx);\r\n  if (!find) return [0, 0, false, find];\r\n\r\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].y, false, find];\r\n  else {\r\n    const x1 = layoutData.DataElement[minIdx].x;\r\n    const x2 = layoutData.DataElement[maxIdx].x;\r\n    const p1 = layoutData.DataElement[minIdx].price;\r\n    const p2 = layoutData.DataElement[maxIdx].price;\r\n    const y1 = layoutData.DataElement[minIdx].y;\r\n    const y2 = layoutData.DataElement[maxIdx].y;\r\n\r\n    if (x >= x1 && x <= x2) {\r\n      if (priceUp) return [p2, y2, true, find];\r\n      else return [p1, y1, true, find];\r\n    } else {\r\n      let p, y;\r\n      if (priceUp) {\r\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\r\n        y = y1 - ((xWithDx - x1) * layoutData.multiplier) / p2;\r\n      } else {\r\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\r\n        y = y2 + ((x2 - xWithDx) * layoutData.multiplier) / p1;\r\n      }\r\n      return [p, y, false, find];\r\n    }\r\n  }\r\n}\r\n\r\nfunction getDataByY(\r\n  layoutData: StableModelLayout,\r\n  y: number,\r\n  dy: number,\r\n  priceUp: boolean,\r\n): [number, number, boolean, boolean] {\r\n  const yWithDy = priceUp ? y - dy : y + dy;\r\n  const [minIdx, maxIdx, find] = getMinimumRangeByY(layoutData, yWithDy);\r\n  if (!find) return [0, 0, false, find];\r\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].x, false, find];\r\n  else {\r\n    const x1 = layoutData.DataElement[minIdx].x;\r\n    const x2 = layoutData.DataElement[maxIdx].x;\r\n    const p1 = layoutData.DataElement[minIdx].price;\r\n    const p2 = layoutData.DataElement[maxIdx].price;\r\n    const y1 = layoutData.DataElement[minIdx].y;\r\n    const y2 = layoutData.DataElement[maxIdx].y;\r\n\r\n    if (y >= y2 && y <= y1) {\r\n      return priceUp ? [p2, x2, true, find] : [p1, x1, true, find];\r\n    } else {\r\n      let p, x;\r\n      if (priceUp) {\r\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\r\n        x = x1 + (p2 * (y1 - yWithDy)) / layoutData.multiplier;\r\n      } else {\r\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\r\n        x = x2 - (p1 * (yWithDy - y2)) / layoutData.multiplier;\r\n      }\r\n      return [p, x, false, find];\r\n    }\r\n  }\r\n}\r\n\r\nfunction getMidPrice(layoutData: StableModelLayout, x: number): number {\r\n  const ret = getDataByX(layoutData, x, 0, false);\r\n  if (ret[3]) return ret[0];\r\n  else return 0;\r\n}\r\n\r\nexport function getDyByDxBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dxReal: number): number {\r\n  const ratio = getRatio(layoutData, xReal, yReal);\r\n  const x = realToTable(layoutData, xReal, ratio);\r\n  const y = realToTable(layoutData, yReal, ratio);\r\n  const dx = realToTable(layoutData, dxReal, ratio);\r\n  const priceUp = true;\r\n  const [p, y2, lessTrade, find] = getDataByX(layoutData, x, dx, priceUp);\r\n  if (!find) return 0;\r\n  if (lessTrade) {\r\n    const dyReal = (dxReal * layoutData.multiplier) / p;\r\n    return dyReal;\r\n  } else {\r\n    const dy = y - y2;\r\n    const dyReal = tableToReal(layoutData, dy, ratio);\r\n    return dyReal;\r\n  }\r\n}\r\n\r\nexport function getDxByDyBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dyReal: number): number {\r\n  const ratio = getRatio(layoutData, xReal, yReal);\r\n  const x = realToTable(layoutData, xReal, ratio);\r\n  const y = realToTable(layoutData, yReal, ratio);\r\n  const dy = realToTable(layoutData, dyReal, ratio);\r\n  const priceUp = false;\r\n  const [p, x2, lessTrade, find] = getDataByY(layoutData, y, dy, priceUp);\r\n  if (!find) return 0;\r\n  if (lessTrade) {\r\n    const dxReal = (dyReal * p) / layoutData.multiplier;\r\n    return dxReal;\r\n  } else {\r\n    const dx = x - x2;\r\n    const dxReal = tableToReal(layoutData, dx, ratio);\r\n    return dxReal;\r\n  }\r\n}\r\n\r\nexport function formatLayout(buffer: Buffer): StableModelLayout {\r\n  const layoutInfo = modelDataInfoLayout.decode(buffer);\r\n  return {\r\n    accountType: layoutInfo.accountType.toNumber(),\r\n    status: layoutInfo.status.toNumber(),\r\n    multiplier: layoutInfo.multiplier.toNumber(),\r\n    validDataCount: layoutInfo.validDataCount.toNumber(),\r\n    DataElement: layoutInfo.DataElement.map((item: any) => ({\r\n      x: item.x.toNumber(),\r\n      y: item.y.toNumber(),\r\n      price: item.price.toNumber(),\r\n    })),\r\n  };\r\n}\r\n\r\nexport function getStablePrice(\r\n  layoutData: StableModelLayout,\r\n  coinReal: number,\r\n  pcReal: number,\r\n  baseCoin: boolean,\r\n): number {\r\n  const price =\r\n    getMidPrice(layoutData, realToTable(layoutData, coinReal, getRatio(layoutData, coinReal, pcReal))) /\r\n    layoutData.multiplier;\r\n  return baseCoin ? price : 1 / price;\r\n}\r\n\r\nexport class StableLayout {\r\n  private readonly connection: Connection;\r\n  public modelDataPubKey: PublicKey;\r\n  private _layoutData: StableModelLayout = {\r\n    accountType: 0,\r\n    status: 0,\r\n    multiplier: 0,\r\n    validDataCount: 0,\r\n    DataElement: [],\r\n  };\r\n\r\n  constructor({\r\n    connection,\r\n    modelDataPubKey = MODEL_DATA_PUBKEY,\r\n  }: {\r\n    connection: Connection;\r\n    modelDataPubKey?: PublicKey;\r\n  }) {\r\n    this.connection = connection;\r\n    this.modelDataPubKey = modelDataPubKey;\r\n  }\r\n\r\n  get stableModelData(): StableModelLayout {\r\n    return this._layoutData;\r\n  }\r\n\r\n  public async initStableModelLayout(): Promise<void> {\r\n    if (this._layoutData.validDataCount === 0) {\r\n      if (this.connection) {\r\n        const acc = await this.connection.getAccountInfo(this.modelDataPubKey);\r\n        if (acc) this._layoutData = formatLayout(acc?.data);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const splAccountLayout = struct([\r\n  publicKey(\"mint\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"amount\"),\r\n  u32(\"delegateOption\"),\r\n  publicKey(\"delegate\"),\r\n  u8(\"state\"),\r\n  u32(\"isNativeOption\"),\r\n  u64(\"isNative\"),\r\n  u64(\"delegatedAmount\"),\r\n  u32(\"closeAuthorityOption\"),\r\n  publicKey(\"closeAuthority\"),\r\n]);\r\n","import { AccountInfo, GetProgramAccountsResponse, Keypair, PublicKey, RpcResponseAndContext } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { createLogger, getATAAddress } from \"../../common\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { sha256 } from \"@noble/hashes/sha256\";\r\nimport { splAccountLayout } from \"./layout\";\r\nimport { TokenAccount, TokenAccountRaw } from \"./types\";\r\n\r\nconst logger = createLogger(\"Raydium_Util\");\r\n\r\nexport interface ParseTokenAccount {\r\n  owner: PublicKey;\r\n  solAccountResp?: AccountInfo<Buffer> | null;\r\n  tokenAccountResp: RpcResponseAndContext<GetProgramAccountsResponse>;\r\n}\r\n\r\nexport function parseTokenAccountResp({ owner, solAccountResp, tokenAccountResp }: ParseTokenAccount): {\r\n  tokenAccounts: TokenAccount[];\r\n  tokenAccountRawInfos: TokenAccountRaw[];\r\n} {\r\n  const tokenAccounts: TokenAccount[] = [];\r\n  const tokenAccountRawInfos: TokenAccountRaw[] = [];\r\n\r\n  for (const { pubkey, account } of tokenAccountResp.value) {\r\n    const accountInfo = splAccountLayout.decode(account.data);\r\n    const { mint, amount } = accountInfo;\r\n    tokenAccounts.push({\r\n      publicKey: pubkey,\r\n      mint,\r\n      amount,\r\n      isAssociated: getATAAddress(owner, mint, account.owner).publicKey.equals(pubkey),\r\n      isNative: false,\r\n      programId: account.owner,\r\n    });\r\n    // todo programId should get from api\r\n    tokenAccountRawInfos.push({ pubkey, accountInfo, programId: account.owner });\r\n  }\r\n\r\n  if (solAccountResp) {\r\n    tokenAccounts.push({\r\n      mint: PublicKey.default,\r\n      amount: new BN(String(solAccountResp.lamports)),\r\n      isNative: true,\r\n      programId: solAccountResp.owner,\r\n    });\r\n  }\r\n\r\n  return {\r\n    tokenAccounts,\r\n    tokenAccountRawInfos,\r\n  };\r\n}\r\n\r\nexport function generatePubKey({\r\n  fromPublicKey,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  assignSeed,\r\n}: {\r\n  fromPublicKey: PublicKey;\r\n  programId: PublicKey;\r\n  assignSeed?: string;\r\n}): { publicKey: PublicKey; seed: string } {\r\n  const seed = assignSeed ? btoa(assignSeed).slice(0, 32) : Keypair.generate().publicKey.toBase58().slice(0, 32);\r\n  const publicKey = createWithSeed(fromPublicKey, seed, programId);\r\n  return { publicKey, seed };\r\n}\r\n\r\nfunction createWithSeed(fromPublicKey: PublicKey, seed: string, programId: PublicKey): PublicKey {\r\n  const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\r\n  const publicKeyBytes = sha256(buffer);\r\n  return new PublicKey(publicKeyBytes);\r\n}\r\n",null,null,null,null,"import { Commitment, Connection, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { BigNumberish, parseBigNumberish } from \"@/common\";\r\nimport {\r\n  createCloseAccountInstruction,\r\n  createInitializeAccountInstruction,\r\n  createTransferInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { TOKEN_WSOL } from \"../token/constant\";\r\nimport { generatePubKey } from \"./util\";\r\n\r\nimport { splAccountLayout } from \"./layout\";\r\n\r\nexport function initTokenAccountInstruction(params: {\r\n  mint: PublicKey;\r\n  tokenAccount: PublicKey;\r\n  owner: PublicKey;\r\n  programId?: PublicKey;\r\n}): TransactionInstruction {\r\n  const { mint, tokenAccount, owner, programId = TOKEN_PROGRAM_ID } = params;\r\n  return createInitializeAccountInstruction(tokenAccount, mint, owner, programId);\r\n}\r\n\r\nexport function closeAccountInstruction(params: {\r\n  tokenAccount: PublicKey;\r\n  payer: PublicKey;\r\n  multiSigners?: Signer[];\r\n  owner: PublicKey;\r\n  programId?: PublicKey;\r\n}): TransactionInstruction {\r\n  const { tokenAccount, payer, multiSigners = [], owner, programId = TOKEN_PROGRAM_ID } = params;\r\n  return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners, programId);\r\n}\r\n\r\ninterface CreateWSolTokenAccount {\r\n  connection: Connection;\r\n  payer: PublicKey;\r\n  owner: PublicKey;\r\n  amount: BigNumberish;\r\n  commitment?: Commitment;\r\n  skipCloseAccount?: boolean;\r\n}\r\n/**\r\n * WrappedNative account = wsol account\r\n */\r\nexport async function createWSolAccountInstructions(params: CreateWSolTokenAccount): Promise<\r\n  AddInstructionParam & {\r\n    addresses: { newAccount: PublicKey };\r\n  }\r\n> {\r\n  const { connection, amount, commitment, payer, owner, skipCloseAccount } = params;\r\n\r\n  const balanceNeeded = await connection.getMinimumBalanceForRentExemption(splAccountLayout.span, commitment);\r\n  const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\r\n  const newAccount = generatePubKey({ fromPublicKey: payer, programId: TOKEN_PROGRAM_ID });\r\n\r\n  return {\r\n    addresses: { newAccount: newAccount.publicKey },\r\n    signers: [],\r\n    instructions: [\r\n      SystemProgram.createAccountWithSeed({\r\n        fromPubkey: payer,\r\n        basePubkey: payer,\r\n        seed: newAccount.seed,\r\n        newAccountPubkey: newAccount.publicKey,\r\n        lamports: lamports.toNumber(),\r\n        space: splAccountLayout.span,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      initTokenAccountInstruction({\r\n        mint: new PublicKey(TOKEN_WSOL.address),\r\n        tokenAccount: newAccount.publicKey,\r\n        owner,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n    ],\r\n    instructionTypes: [InstructionType.CreateAccount, InstructionType.InitAccount],\r\n    endInstructionTypes: skipCloseAccount ? [] : [InstructionType.CloseAccount],\r\n    endInstructions: skipCloseAccount\r\n      ? []\r\n      : [\r\n          closeAccountInstruction({\r\n            tokenAccount: newAccount.publicKey,\r\n            payer,\r\n            owner,\r\n          }),\r\n        ],\r\n  };\r\n}\r\n\r\nexport function makeTransferInstruction({\r\n  source,\r\n  destination,\r\n  owner,\r\n  amount,\r\n  multiSigners = [],\r\n  tokenProgram = TOKEN_PROGRAM_ID,\r\n}: {\r\n  source: PublicKey;\r\n  destination: PublicKey;\r\n  owner: PublicKey;\r\n  amount: BigNumberish;\r\n  multiSigners?: Signer[];\r\n  tokenProgram?: PublicKey;\r\n}): TransactionInstruction {\r\n  return createTransferInstruction(source, destination, owner, BigInt(String(amount)), multiSigners, tokenProgram);\r\n}\r\n","import { publicKey, struct, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nexport const SPL_MINT_LAYOUT = struct([\r\n  u32(\"mintAuthorityOption\"),\r\n  publicKey(\"mintAuthority\"),\r\n  u64(\"supply\"),\r\n  u8(\"decimals\"),\r\n  u8(\"isInitialized\"),\r\n  u32(\"freezeAuthorityOption\"),\r\n  publicKey(\"freezeAuthority\"),\r\n]);\r\n\r\nexport type SplMintLayout = typeof SPL_MINT_LAYOUT;\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { SERUM_PROGRAM_ID_V3 } from \"../../common/programId\";\r\nimport { SerumVersion } from \"./type\";\r\n\r\n// serum program id string => serum version\r\nexport const SERUM_PROGRAMID_TO_VERSION: {\r\n  [key: string]: SerumVersion;\r\n} = {\r\n  [SERUM_PROGRAM_ID_V3.toBase58()]: 3,\r\n};\r\n\r\n// serum version => serum program id\r\nexport const SERUM_VERSION_TO_PROGRAMID: { [key in SerumVersion]?: PublicKey } & {\r\n  [K: number]: PublicKey;\r\n} = {\r\n  3: SERUM_PROGRAM_ID_V3,\r\n};\r\n","import { blob, GetStructureSchema, publicKey, struct, u64 } from \"../../marshmallow\";\r\n\r\n/* ================= state layouts ================= */\r\nexport const MARKET_STATE_LAYOUT_V3 = struct([\r\n  blob(5),\r\n\r\n  blob(8), // accountFlagsLayout('accountFlags'),\r\n\r\n  publicKey(\"ownAddress\"),\r\n\r\n  u64(\"vaultSignerNonce\"),\r\n\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n\r\n  publicKey(\"baseVault\"),\r\n  u64(\"baseDepositsTotal\"),\r\n  u64(\"baseFeesAccrued\"),\r\n\r\n  publicKey(\"quoteVault\"),\r\n  u64(\"quoteDepositsTotal\"),\r\n  u64(\"quoteFeesAccrued\"),\r\n\r\n  u64(\"quoteDustThreshold\"),\r\n\r\n  publicKey(\"requestQueue\"),\r\n  publicKey(\"eventQueue\"),\r\n\r\n  publicKey(\"bids\"),\r\n  publicKey(\"asks\"),\r\n\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n\r\n  u64(\"feeRateBps\"),\r\n\r\n  u64(\"referrerRebatesAccrued\"),\r\n\r\n  blob(7),\r\n]);\r\n\r\nexport type MarketStateLayoutV3 = typeof MARKET_STATE_LAYOUT_V3;\r\nexport type MarketStateLayout = MarketStateLayoutV3;\r\n\r\nexport type MarketStateV3 = GetStructureSchema<MarketStateLayoutV3>;\r\nexport type MarketState = MarketStateV3;\r\n\r\n/* ================= index ================= */\r\n// version => market state layout\r\nexport const MARKET_VERSION_TO_STATE_LAYOUT: {\r\n  [version: number]: MarketStateLayout;\r\n} = {\r\n  3: MARKET_STATE_LAYOUT_V3,\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"../../common/logger\";\r\n\r\nimport { SERUM_PROGRAMID_TO_VERSION, SERUM_VERSION_TO_PROGRAMID } from \"./id\";\r\nimport { MARKET_VERSION_TO_STATE_LAYOUT, MarketStateLayout } from \"./layout\";\r\n\r\nconst logger = createLogger(\"Serum\");\r\n\r\nexport class Market {\r\n  /* ================= get version and program id ================= */\r\n  static getProgramId(version: number): PublicKey {\r\n    const programId = SERUM_VERSION_TO_PROGRAMID[version];\r\n    if (!programId) logger.logWithError(\"invalid version\", \"version\", version);\r\n\r\n    return programId;\r\n  }\r\n\r\n  static getVersion(programId: PublicKey): number {\r\n    const programIdString = programId.toBase58();\r\n\r\n    const version = SERUM_PROGRAMID_TO_VERSION[programIdString];\r\n    if (!version) logger.logWithError(\"invalid program id\", \"programId\", programIdString);\r\n\r\n    return version;\r\n  }\r\n\r\n  /* ================= get layout ================= */\r\n  static getStateLayout(version: number): MarketStateLayout {\r\n    const STATE_LAYOUT = MARKET_VERSION_TO_STATE_LAYOUT[version];\r\n    if (!STATE_LAYOUT) logger.logWithError(!!STATE_LAYOUT, \"invalid version\", \"version\", version);\r\n\r\n    return STATE_LAYOUT;\r\n  }\r\n\r\n  static getLayouts(version: number): { state: MarketStateLayout } {\r\n    return { state: this.getStateLayout(version) };\r\n  }\r\n\r\n  /* ================= get key ================= */\r\n  static getAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\r\n    publicKey: PublicKey;\r\n    nonce: number;\r\n  } {\r\n    const seeds = [marketId.toBuffer()];\r\n\r\n    let nonce = 0;\r\n    let publicKey: PublicKey;\r\n\r\n    while (nonce < 100) {\r\n      try {\r\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\r\n        publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\r\n      } catch (err) {\r\n        if (err instanceof TypeError) {\r\n          throw err;\r\n        }\r\n        nonce++;\r\n        continue;\r\n      }\r\n      return { publicKey, nonce };\r\n    }\r\n\r\n    logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\r\n      programId,\r\n      marketId,\r\n    });\r\n\r\n    return { publicKey: PublicKey.default, nonce };\r\n  }\r\n}\r\n","import { PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nimport {\r\n  InstructionType,\r\n  LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL,\r\n  MEMO_PROGRAM_ID2,\r\n  accountMeta,\r\n  jsonInfo2PoolKeys,\r\n  getATAAddress,\r\n  ALL_PROGRAM_ID,\r\n} from \"@/common\";\r\nimport { seq, struct, u128, u64, u8 } from \"../../marshmallow\";\r\nimport {\r\n  ClmmInstrument,\r\n  MAX_SQRT_PRICE_X64,\r\n  MAX_SQRT_PRICE_X64_SUB_ONE,\r\n  MIN_SQRT_PRICE_X64,\r\n  MIN_SQRT_PRICE_X64_ADD_ONE,\r\n  ONE,\r\n  getPdaExBitmapAccount,\r\n} from \"../clmm\";\r\nimport { makeAMMSwapInstruction } from \"../liquidity/instruction\";\r\n\r\nimport { AmmV4Keys, AmmV5Keys, ApiV3PoolInfoItem, ClmmKeys, CpmmKeys, PoolKeys } from \"../../api/type\";\r\nimport { makeSwapCpmmBaseInInstruction } from \"../../raydium/cpmm\";\r\nimport { ComputePoolType, MakeSwapInstructionParam, ReturnTypeMakeSwapInstruction } from \"./type\";\r\nexport function route1Instruction(\r\n  programId: PublicKey,\r\n  poolInfoA: ApiV3PoolInfoItem,\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  // userDestinationToken: PublicKey,\r\n  userPdaAccount: PublicKey,\r\n  ownerWallet: PublicKey,\r\n\r\n  inputMint: PublicKey,\r\n\r\n  amountIn: BN,\r\n  amountOut: BN,\r\n\r\n  tickArrayA?: PublicKey[],\r\n  // tickArrayB?: PublicKey[],\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"amountOut\")]);\r\n\r\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(poolKeyA.programId), isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(poolKeyA.id), isSigner: false, isWritable: true },\r\n    { pubkey: new PublicKey(poolKeyB.id), isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userSourceToken, isSigner: false, isWritable: true },\r\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\r\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\r\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\r\n  ];\r\n\r\n  if (poolInfoA.type === \"Concentrated\") {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as ClmmKeys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.A : poolKey.vault.B,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.B : poolKey.vault.A,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        ...tickArrayA!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      ],\r\n    );\r\n  } else if (poolInfoA.pooltype.includes(\"StablePool\")) {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV5Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      ],\r\n    );\r\n  } else {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV4Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n          ? [\r\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n            ]\r\n          : [\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            ]),\r\n      ],\r\n    );\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 4,\r\n      amountIn,\r\n      amountOut,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function route2Instruction(\r\n  programId: PublicKey,\r\n  poolInfoB: ApiV3PoolInfoItem,\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  // userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  userDestinationToken: PublicKey,\r\n  userPdaAccount: PublicKey,\r\n  ownerWallet: PublicKey,\r\n\r\n  routeMint: PublicKey,\r\n\r\n  // tickArrayA?: PublicKey[],\r\n  tickArrayB?: PublicKey[],\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"instruction\")]);\r\n\r\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(String(poolKeyB.programId)), isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(String(poolKeyB.id)), isSigner: false, isWritable: true },\r\n    { pubkey: new PublicKey(String(poolKeyA.id)), isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\r\n    { pubkey: userDestinationToken, isSigner: false, isWritable: true },\r\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\r\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\r\n  ];\r\n\r\n  if (poolInfoB.type === \"Concentrated\") {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as ClmmKeys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.A : poolKey.vault.B,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.B : poolKey.vault.A,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        ...tickArrayB!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      ],\r\n    );\r\n  } else if (poolInfoB.pooltype.includes(\"StablePool\")) {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV5Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      ],\r\n    );\r\n  } else {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV4Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n          ? [\r\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n            ]\r\n          : [\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            ]),\r\n      ],\r\n    );\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 5,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\n/*\r\nfunction makeInnerInsKey(\r\n  itemPool: ComputePoolType,\r\n  itemPoolKey: PoolKeys,\r\n  inMint: string,\r\n  userInAccount: PublicKey,\r\n  userOutAccount: PublicKey,\r\n  remainingAccount: PublicKey[] | undefined,\r\n): accountMeta[] {\r\n  if (itemPool.version === 4) {\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\r\n\r\n    return [\r\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n      ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n        ? [\r\n            { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n            { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n          ]\r\n        : [\r\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n          ]),\r\n    ];\r\n  } else if (itemPool.version === 5) {\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\r\n\r\n    return [\r\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n    ];\r\n  } else if (itemPool.version === 6) {\r\n    const pool = itemPool;\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as ClmmKeys);\r\n    const baseIn = pool.mintA.address === inMint;\r\n    return [\r\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: itemPool.observationId, isSigner: false, isWritable: true },\r\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\r\n        ? [\r\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\r\n          ]\r\n        : []),\r\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      {\r\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\r\n        isSigner: false,\r\n        isWritable: true,\r\n      },\r\n    ];\r\n  } else if (itemPool.version === 7) {\r\n    const pool = itemPool;\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as CpmmKeys);\r\n    const baseIn = pool.mintA.address === inMint;\r\n    return [\r\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: itemPool.observationId, isSigner: false, isWritable: true },\r\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\r\n        ? [\r\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\r\n          ]\r\n        : []),\r\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      {\r\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\r\n        isSigner: false,\r\n        isWritable: true,\r\n      },\r\n    ];\r\n  } else {\r\n    throw Error(\"make swap ins error\");\r\n  }\r\n}\r\n*/\r\n\r\nexport function routeInstruction(\r\n  programId: PublicKey,\r\n  wallet: PublicKey,\r\n\r\n  userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  userDestinationToken: PublicKey,\r\n\r\n  inputMint: string,\r\n  routeMint: string,\r\n  outputMint: string,\r\n\r\n  poolInfoA: ComputePoolType,\r\n  poolInfoB: ComputePoolType,\r\n\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  amountIn: BN,\r\n  amountOut: BN,\r\n\r\n  remainingAccounts: (PublicKey[] | undefined)[],\r\n): TransactionInstruction {\r\n  const clmmPriceLimit: BN[] = [];\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: wallet, isSigner: true }),\r\n  ];\r\n\r\n  keys.push(accountMeta({ pubkey: userSourceToken }));\r\n  keys.push(accountMeta({ pubkey: userDestinationToken }));\r\n\r\n  const poolInfos = [poolInfoA, poolInfoB];\r\n  const poolKeys = [poolKeyA, poolKeyB];\r\n  const routeMints = [inputMint, routeMint, outputMint];\r\n\r\n  for (let index = 0; index < poolInfos.length; index++) {\r\n    const _poolInfo = poolInfos[index];\r\n    const inputIsA = routeMints[index] === _poolInfo.mintA.address;\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.programId), isWritable: false }));\r\n    if (index === poolInfos.length - 1) {\r\n      keys.push(accountMeta({ pubkey: userDestinationToken }));\r\n    } else {\r\n      keys.push(accountMeta({ pubkey: userRouteToken }));\r\n    }\r\n    keys.push(accountMeta({ pubkey: new PublicKey(routeMints[index]) }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(routeMints[index + 1]) }));\r\n    if (_poolInfo.version === 6) {\r\n      const _poolKey = poolKeys[index] as ClmmKeys;\r\n\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.A : _poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.B : _poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.observationId) })); //todo\r\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2 }));\r\n      keys.push(\r\n        accountMeta({\r\n          pubkey: getPdaExBitmapAccount(new PublicKey(_poolInfo.programId), new PublicKey(_poolInfo.id)).publicKey,\r\n        }),\r\n      );\r\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_poolInfo.sqrtPriceX64.toString(), inputIsA));\r\n      for (const item of remainingAccounts[index] ?? []) {\r\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\r\n      }\r\n    } else if (_poolInfo.version === 5) {\r\n      const _poolKey = poolKeys[index] as AmmV5Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority) }));\r\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketQuoteVault) }));\r\n    } else if (_poolInfo.version === 4) {\r\n      const _poolKey = poolKeys[index] as AmmV4Keys;\r\n      const isSupportIdOnly = _poolInfo.status !== 1;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketProgramId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketAuthority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketQuoteVault) }));\r\n    } else if (_poolInfo.version === 7) {\r\n      const _poolKey = poolKeys[index] as CpmmKeys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.A : _poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.B : _poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.observationId) }));\r\n    } else throw Error(\"pool type error\");\r\n  }\r\n\r\n  const dataLayout = struct([\r\n    u8(\"insId\"),\r\n    u64(\"amountIn\"),\r\n    u64(\"amountOut\"),\r\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\r\n  ]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      insId: 0,\r\n      amountIn,\r\n      amountOut,\r\n      clmmPriceLimit,\r\n    },\r\n    data,\r\n  );\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nfunction clmmPriceLimitX64InsData(x64Price: string | undefined, inputIsA: boolean): BN {\r\n  if (x64Price) {\r\n    if (inputIsA) {\r\n      const _m = new BN(x64Price).div(new BN(25));\r\n      return _m.gt(MIN_SQRT_PRICE_X64_ADD_ONE) ? _m : MIN_SQRT_PRICE_X64_ADD_ONE;\r\n    } else {\r\n      const _m = new BN(x64Price).mul(new BN(25));\r\n      return _m.lt(MAX_SQRT_PRICE_X64_SUB_ONE) ? _m : MAX_SQRT_PRICE_X64_SUB_ONE;\r\n    }\r\n  } else {\r\n    return inputIsA ? MIN_SQRT_PRICE_X64_ADD_ONE : MAX_SQRT_PRICE_X64_SUB_ONE;\r\n  }\r\n}\r\n\r\nexport function makeSwapInstruction({\r\n  routeProgram,\r\n  ownerInfo,\r\n  inputMint,\r\n  swapInfo,\r\n}: MakeSwapInstructionParam): ReturnTypeMakeSwapInstruction {\r\n  if (swapInfo.routeType === \"amm\") {\r\n    if (swapInfo.poolInfo[0].version === 6) {\r\n      const poolKeys = swapInfo.poolKey[0] as ClmmKeys;\r\n      const _poolKey = jsonInfo2PoolKeys(poolKeys);\r\n      const sqrtPriceLimitX64 = inputMint.equals(_poolKey.mintA.address)\r\n        ? MIN_SQRT_PRICE_X64.add(ONE)\r\n        : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n      return ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo: poolKeys,\r\n        poolKeys,\r\n        observationId: swapInfo.poolInfo[0].observationId,\r\n        ownerInfo: {\r\n          wallet: ownerInfo.wallet,\r\n          tokenAccountA: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.sourceToken : ownerInfo.destinationToken,\r\n          tokenAccountB: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.destinationToken : ownerInfo.sourceToken,\r\n        },\r\n        inputMint,\r\n        amountIn: swapInfo.amountIn.amount.raw,\r\n        amountOutMin: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts: swapInfo.remainingAccounts[0] ?? [],\r\n      });\r\n    } else if (swapInfo.poolInfo[0].version === 7) {\r\n      const poolInfo = swapInfo.poolInfo[0];\r\n      const baseIn = inputMint.toString() === swapInfo.poolInfo[0].mintA.address;\r\n\r\n      return {\r\n        signers: [],\r\n        instructions: [\r\n          makeSwapCpmmBaseInInstruction(\r\n            poolInfo.programId,\r\n            ownerInfo.wallet,\r\n            poolInfo.authority,\r\n            poolInfo.configId,\r\n            poolInfo.id,\r\n            ownerInfo.sourceToken!,\r\n            ownerInfo.destinationToken!,\r\n            baseIn ? poolInfo.vaultA : poolInfo.vaultB,\r\n            baseIn ? poolInfo.vaultB : poolInfo.vaultA,\r\n            baseIn ? poolInfo.mintProgramA : poolInfo.mintProgramB,\r\n            baseIn ? poolInfo.mintProgramB : poolInfo.mintProgramA,\r\n            new PublicKey(poolInfo[baseIn ? \"mintA\" : \"mintB\"].address),\r\n            new PublicKey(poolInfo[baseIn ? \"mintB\" : \"mintA\"].address),\r\n            poolInfo.observationId,\r\n\r\n            swapInfo.amountIn.amount.raw,\r\n            swapInfo.minAmountOut.amount.raw,\r\n          ),\r\n        ],\r\n        lookupTableAddress: [],\r\n        instructionTypes: [baseIn ? InstructionType.CpmmSwapBaseIn : InstructionType.CpmmSwapBaseOut],\r\n        address: {},\r\n      };\r\n    } else {\r\n      const _poolKey = swapInfo.poolKey[0] as AmmV4Keys | AmmV5Keys;\r\n\r\n      return {\r\n        signers: [],\r\n        instructions: [\r\n          makeAMMSwapInstruction({\r\n            poolKeys: _poolKey,\r\n            version: swapInfo.poolInfo[0].pooltype.includes(\"StablePool\") ? 5 : 4,\r\n            userKeys: {\r\n              tokenAccountIn: ownerInfo.sourceToken,\r\n              tokenAccountOut: ownerInfo.destinationToken,\r\n              owner: ownerInfo.wallet,\r\n            },\r\n            amountIn: swapInfo.amountIn.amount.raw,\r\n            amountOut: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n            fixedSide: \"in\",\r\n          }),\r\n        ],\r\n        lookupTableAddress: _poolKey.lookupTableAccount ? [_poolKey.lookupTableAccount] : [],\r\n        instructionTypes: [\r\n          swapInfo.poolInfo[0].pooltype.includes(\"StablePool\")\r\n            ? InstructionType.AmmV5SwapBaseIn\r\n            : InstructionType.AmmV4SwapBaseIn,\r\n        ],\r\n        address: {},\r\n      };\r\n    }\r\n  } else if (swapInfo.routeType === \"route\") {\r\n    const poolInfo1 = swapInfo.poolInfo[0];\r\n    const poolInfo2 = swapInfo.poolInfo[1];\r\n    const poolKey1 = swapInfo.poolKey[0];\r\n    const poolKey2 = swapInfo.poolKey[1];\r\n\r\n    if (ownerInfo.routeToken === undefined) throw Error(\"owner route token account check error\");\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: [\r\n        routeInstruction(\r\n          routeProgram,\r\n          ownerInfo.wallet,\r\n          ownerInfo.sourceToken,\r\n          ownerInfo.routeToken,\r\n          ownerInfo.destinationToken,\r\n\r\n          inputMint.toString(),\r\n          swapInfo.middleToken.mint.toString(),\r\n          swapInfo.outputMint.toString(),\r\n\r\n          poolInfo1,\r\n          poolInfo2,\r\n          poolKey1,\r\n          poolKey2,\r\n\r\n          swapInfo.amountIn.amount.raw,\r\n          swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n\r\n          swapInfo.remainingAccounts,\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.RouteSwap],\r\n      lookupTableAddress: [poolKey1.lookupTableAccount, poolKey2.lookupTableAccount].filter(\r\n        (a) => a !== undefined,\r\n      ) as string[],\r\n      address: {},\r\n    };\r\n  } else {\r\n    throw Error(\"route type error\");\r\n  }\r\n}\r\n\r\nexport interface ApiSwapV1Out {\r\n  id: string;\r\n  success: boolean;\r\n  version: \"V0\" | \"V1\";\r\n  openTime?: undefined;\r\n  msg: undefined;\r\n  data: {\r\n    swapType: \"BaseIn\" | \"BaseOut\";\r\n    inputMint: string;\r\n    inputAmount: string;\r\n    outputMint: string;\r\n    outputAmount: string;\r\n    otherAmountThreshold: string;\r\n    slippageBps: number;\r\n    priceImpactPct: number;\r\n    routePlan: {\r\n      poolId: string;\r\n      inputMint: string;\r\n      outputMint: string;\r\n      feeMint: string;\r\n      feeRate: number;\r\n      feeAmount: string;\r\n      remainingAccounts?: string[];\r\n      lastPoolPriceX64?: string;\r\n    }[];\r\n  };\r\n}\r\n\r\nexport function swapBaseInAutoAccount({\r\n  programId,\r\n  wallet,\r\n  amount,\r\n  inputAccount,\r\n  outputAccount,\r\n  routeInfo,\r\n  poolKeys,\r\n}: {\r\n  programId: PublicKey;\r\n  wallet: PublicKey;\r\n  amount: BN;\r\n  inputAccount: PublicKey;\r\n  outputAccount: PublicKey;\r\n  routeInfo: ApiSwapV1Out;\r\n  poolKeys: PoolKeys[];\r\n}): TransactionInstruction {\r\n  if (routeInfo.success === false) throw Error(\"route info error\");\r\n  const clmmPriceLimit: BN[] = [];\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: wallet, isSigner: true }),\r\n  ];\r\n  const cacheAccount: { [mint: string]: PublicKey } = {\r\n    [routeInfo.data.inputMint]: inputAccount,\r\n    [routeInfo.data.outputMint]: outputAccount,\r\n  };\r\n  keys.push(accountMeta({ pubkey: cacheAccount[routeInfo.data.inputMint] }));\r\n  keys.push(accountMeta({ pubkey: cacheAccount[routeInfo.data.outputMint] }));\r\n  for (let index = 0; index < poolKeys.length; index++) {\r\n    const _routeInfo = routeInfo.data.routePlan[index];\r\n    const _poolKey = poolKeys[index];\r\n    const inputIsA = _routeInfo.inputMint === _poolKey.mintA.address;\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.programId), isWritable: false }));\r\n    if (index === poolKeys.length - 1) {\r\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.outputMint] }));\r\n    } else {\r\n      const mint = _routeInfo.outputMint;\r\n      if (cacheAccount[mint] === undefined) {\r\n        const ata = getATAAddress(\r\n          wallet,\r\n          new PublicKey(mint),\r\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\r\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\r\n            ? new PublicKey(inputIsA ? _poolKey.mintB.programId : _poolKey.mintA.programId)\r\n            : TOKEN_PROGRAM_ID,\r\n        ).publicKey;\r\n        cacheAccount[mint] = ata;\r\n      }\r\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\r\n    }\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.inputMint) }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.outputMint) }));\r\n    if (_poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58()) {\r\n      const poolKey = _poolKey as ClmmKeys;\r\n\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\r\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.exBitmapAccount) }));\r\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_routeInfo.lastPoolPriceX64, inputIsA));\r\n      for (const item of _routeInfo.remainingAccounts ?? []) {\r\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\r\n      }\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_STABLE.toBase58()) {\r\n      const poolKey = _poolKey as AmmV5Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketProgramId), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketAuthority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.marketQuoteVault) }));\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_V4.toBase58()) {\r\n      const poolKey = _poolKey as AmmV4Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId), isWritable: false }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority), isWritable: false }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrder) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.bids) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.asks) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.eventQueue) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultA) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultB) }))\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()) {\r\n      const poolKey = _poolKey as CpmmKeys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.authority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\r\n    } else throw Error(\"pool type error\");\r\n  }\r\n  const dataLayout = struct([\r\n    u8(\"insId\"),\r\n    u64(\"amountIn\"),\r\n    u64(\"amountOut\"),\r\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\r\n  ]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      insId: 0,\r\n      amountIn: amount,\r\n      amountOut: new BN(routeInfo.data.otherAmountThreshold),\r\n      clmmPriceLimit,\r\n    },\r\n    data,\r\n  );\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function swapBaseOutAutoAccount({\r\n  programId,\r\n  wallet,\r\n  inputAccount,\r\n  outputAccount,\r\n  routeInfo,\r\n  poolKeys,\r\n}: {\r\n  programId: PublicKey;\r\n  wallet: PublicKey;\r\n  inputAccount: PublicKey;\r\n  outputAccount: PublicKey;\r\n  routeInfo: ApiSwapV1Out;\r\n  poolKeys: PoolKeys[];\r\n}): TransactionInstruction {\r\n  if (routeInfo.success === false) throw Error(\"route info error\");\r\n  const clmmPriceLimit: BN[] = [];\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: wallet, isSigner: true }),\r\n  ];\r\n  const cacheAccount: { [mint: string]: PublicKey } = {\r\n    [routeInfo.data.inputMint]: inputAccount,\r\n    [routeInfo.data.outputMint]: outputAccount,\r\n  };\r\n  for (let index = poolKeys.length - 1; index >= 0; index--) {\r\n    const _routeInfo = routeInfo.data.routePlan[index];\r\n    const _poolKey = poolKeys[index];\r\n    const inputIsA = _routeInfo.inputMint === _poolKey.mintA.address;\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.programId) }));\r\n    if (index === 0) {\r\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.inputMint] }));\r\n    } else {\r\n      const mint = _routeInfo.inputMint;\r\n      if (cacheAccount[mint] === undefined) {\r\n        const ata = getATAAddress(\r\n          wallet,\r\n          new PublicKey(mint),\r\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\r\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\r\n            ? new PublicKey(inputIsA ? _poolKey.mintA.programId : _poolKey.mintB.programId)\r\n            : TOKEN_PROGRAM_ID,\r\n        ).publicKey;\r\n        cacheAccount[mint] = ata;\r\n      }\r\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\r\n    }\r\n    if (index === poolKeys.length - 1) {\r\n      keys.push(accountMeta({ pubkey: cacheAccount[_routeInfo.outputMint] }));\r\n    } else {\r\n      const mint = _routeInfo.outputMint;\r\n      if (cacheAccount[mint] === undefined) {\r\n        const ata = getATAAddress(\r\n          wallet,\r\n          new PublicKey(mint),\r\n          _poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58() ||\r\n            _poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()\r\n            ? new PublicKey(inputIsA ? _poolKey.mintB.programId : _poolKey.mintA.programId)\r\n            : TOKEN_PROGRAM_ID,\r\n        ).publicKey;\r\n        cacheAccount[mint] = ata;\r\n      }\r\n      keys.push(accountMeta({ pubkey: cacheAccount[mint] }));\r\n    }\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.inputMint) }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_routeInfo.outputMint) }));\r\n    if (_poolKey.programId === ALL_PROGRAM_ID.CLMM_PROGRAM_ID.toBase58()) {\r\n      const poolKey = _poolKey as ClmmKeys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.A : poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolKey.vault.B : poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.observationId) }));\r\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolKey.exBitmapAccount) }));\r\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_routeInfo.lastPoolPriceX64, inputIsA));\r\n      for (const item of _routeInfo.remainingAccounts ?? []) {\r\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\r\n      }\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_STABLE.toBase58()) {\r\n      const poolkey = _poolKey as AmmV5Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketProgramId), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketAuthority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.marketQuoteVault) }));\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.AMM_V4.toBase58()) {\r\n      const poolkey = _poolKey as AmmV4Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId), isWritable: false }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority), isWritable: false }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrder) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.A) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(poolKey.vault.B) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.bids) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.asks) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.eventQueue) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultA) }))\r\n      // keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketVaultB) }))\r\n    } else if (_poolKey.programId === ALL_PROGRAM_ID.CREATE_CPMM_POOL_PROGRAM.toBase58()) {\r\n      const poolkey = _poolKey as CpmmKeys;\r\n\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.authority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolkey.vault.A : poolkey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? poolkey.vault.B : poolkey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(poolkey.observationId) }));\r\n    } else throw Error(\"pool type error\");\r\n  }\r\n  const dataLayout = struct([\r\n    u8(\"insId\"),\r\n    u64(\"amountIn\"),\r\n    u64(\"amountOut\"),\r\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\r\n  ]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      insId: 1,\r\n      amountIn: new BN(routeInfo.data.otherAmountThreshold),\r\n      amountOut: new BN(routeInfo.data.outputAmount),\r\n      clmmPriceLimit,\r\n    },\r\n    data,\r\n  );\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n"],"mappings":"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","names":[]}